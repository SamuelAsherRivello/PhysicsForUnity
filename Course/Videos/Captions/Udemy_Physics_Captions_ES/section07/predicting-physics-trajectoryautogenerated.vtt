WEBVTT

00:01.540 --> 00:03.510
Predicción de la trayectoria física.

00:03.520 --> 00:08.050
En este video, veremos cómo podemos predecir el movimiento de la física antes de que ocurra.

00:08.050 --> 00:13.090
Vamos a aprender cómo esto puede ayudar a nuestros juegos y nuestros jugadores, y luego vamos a abrir la unidad y ver

00:13.090 --> 00:16.270
un ejemplo real de predicción de trayectoria.

00:16.270 --> 00:18.100
¿Qué es la predicción física?

00:18.100 --> 00:24.400
La predicción consiste en calcular las propiedades futuras, por ejemplo, la posición o la rotación de objetos dentro de un espacio.

00:24.400 --> 00:25.480
tu sistema físico.

00:25.750 --> 00:33.280
Algunos ejemplos de esto son la visualización mostrando una línea o flecha para sugerir al usuario donde su bala

00:33.280 --> 00:34.240
irá.

00:34.240 --> 00:40.900
O yo Haciendo esta predicción da una entrada más relevante en los sistemas de inteligencia de nuestro juego.

00:41.970 --> 00:45.870
Tomemos un ejemplo de nuestro juego de la Sección cinco Upset Ducks.

00:45.870 --> 00:50.220
Actualmente está completo y es jugable, pero no tiene física predictiva.

00:50.220 --> 00:57.330
Un ejemplo de visualización sería calcular la trayectoria del asteroide y mostrar una flecha como visualización.

00:57.330 --> 01:02.220
Esto aumentaría la retroalimentación para el usuario y le daría una mejor conexión con el juego.

01:02.220 --> 01:03.840
Una sensación de juego más positiva.

01:03.840 --> 01:09.330
El resultado sería ayudar a nuestros usuarios a tomar decisiones más inteligentes incluso antes de soltar el asteroide.

01:09.330 --> 01:11.400
Sabrían más o menos hacia dónde se dirige.

01:11.430 --> 01:13.410
Otro ejemplo sería la IA.

01:13.440 --> 01:16.500
Podemos calcular la trayectoria del asteroide a ojo.

01:16.530 --> 01:20.520
Podríamos hacer que los enemigos reaccionaran con miedo mientras apuntamos hacia ellos.

01:20.520 --> 01:24.570
O podríamos tener enemigos que salten fuera del camino para evitar las colisiones.

01:24.810 --> 01:26.450
O, por supuesto, podríamos hacer ambas cosas.

01:26.460 --> 01:29.820
Podríamos tener visualización y una IA actualizada.

01:30.450 --> 01:32.190
Entonces, ¿cómo predecimos la física?

01:32.700 --> 01:37.200
Creamos una escena primaria y configuramos un objeto con algunas fuerzas físicas.

01:37.200 --> 01:40.450
Luego creamos una escena secundaria de física invisible.

01:40.470 --> 01:47.940
Allí podemos añadir bolas marcadoras, y para cada una de las bolas podemos simular el tiempo Delta con un único Delta

01:47.940 --> 01:52.860
a través del arco de recorrido por el que viajaría ese objeto.

01:53.430 --> 01:54.790
Veamos una demostración.

01:54.810 --> 01:56.860
Veamos la predicción de la trayectoria.

01:56.880 --> 01:58.080
Vamos a reproducir la escena.

01:58.080 --> 02:03.750
Veremos el inspector para el objeto de juego Cubo saltarín, actualizaremos su fuerza, veremos la predicción,

02:03.750 --> 02:05.160
e inspeccionará el código.

02:06.330 --> 02:06.570
De acuerdo.

02:06.570 --> 02:11.800
Aquí estamos dentro de unity, saltando a la predicción de trayectoria.

02:11.820 --> 02:14.700
Ahora, en este proyecto, lo que tengo configurado es.

02:15.660 --> 02:18.050
Un cubo que tiene un script.

02:18.060 --> 02:25.940
Y lo que esto hace es ilustrar hacia donde se dirige la fuerza física que está a punto de ser aplicada.

02:25.950 --> 02:31.970
Y puedes ver este arco de marcadores que está aquí delante del cubo.

02:31.980 --> 02:36.810
Y lo que soy capaz de hacer aquí es esta es la fuerza física que se va a aplicar.

02:36.810 --> 02:41.550
Uso ese mismo valor para mostrar hacia donde viajará esto.

02:41.940 --> 02:46.520
Ahora, una cosa, mientras estaba trabajando en esto, esto es relativamente nuevo en unity.

02:46.530 --> 02:53.610
Es una característica pública, pero aún así, no la había usado en producción antes y estaba decepcionado

02:53.610 --> 02:55.200
por la velocidad de esto.

02:55.200 --> 03:01.440
En realidad no es tan suave y podría haber algunas optimizaciones que se tenía, pero sin duda funciona

03:01.440 --> 03:02.310
y funciona bien.

03:02.310 --> 03:06.900
Así que soy capaz de mover las fuerzas allí y luego tengo un par de botones aquí que se establecería,

03:06.900 --> 03:10.250
probablemente simulando la entrada del usuario de alguna manera para moverse.

03:10.260 --> 03:15.450
Voy a seguir adelante y utilizar la fuerza y se puede ver que salta allí y que sigue la línea perfectamente.

03:15.450 --> 03:21.150
Mira, tengo un par de deslizadores de predicción aquí para que podamos hacer más o menos de esos.

03:22.520 --> 03:25.820
Más o menos de estos marcadores en el arco.

03:26.360 --> 03:29.540
Echemos un vistazo al código.

03:30.590 --> 03:31.910
Veamos las cosas importantes.

03:31.910 --> 03:36.240
Así que las propiedades serializadas que acabamos de ver están ahí en el inicio.

03:36.260 --> 03:41.480
Lo que estoy haciendo es crear nuevos parámetros de escena y una nueva escena.

03:41.750 --> 03:44.440
Esto es de un tipo llamado física local.

03:44.450 --> 03:50.600
Estoy creando una nueva escena que se ejecutará de forma transparente junto a nuestra escena principal.

03:51.080 --> 03:53.000
Así que lo hago en el inicio.

03:53.510 --> 03:56.750
Luego aquí abajo en el.

03:58.410 --> 03:59.640
En la predicción.

04:03.690 --> 04:05.200
Yo ver aquí.

04:05.210 --> 04:08.330
Entonces, ¿qué está pasando realmente en la predicción?

04:09.230 --> 04:11.840
Como estoy llamando a este uso marcadores.

04:12.170 --> 04:14.570
Tengo algunas iteraciones de tiempo preparadas.

04:14.570 --> 04:16.880
Así que aquí está la mayor parte del trabajo, ¿verdad?

04:17.090 --> 04:18.210
Hay dos pasos.

04:18.230 --> 04:23.960
Primero, reconstruyo los marcadores, así que periódicamente cuando actualizo el inspector ajustando algunos de los

04:23.960 --> 04:25.610
reconstruiré los marcadores.

04:25.640 --> 04:29.690
De nuevo, esto es regenerar los objetos del juego de pelota de los marcadores.

04:30.200 --> 04:33.580
Y lo que estoy haciendo es sólo un bucle a través y la creación de un número suficiente de ellos.

04:33.590 --> 04:41.060
Así que ahora que tenemos suficientes de ellos y observe aquí en la línea 151, estoy moviendo estos objetos de juego a

04:41.060 --> 04:46.070
la otra escena, a la escena de predicción que hemos creado, y les estoy dando un nombre también que

04:46.070 --> 04:47.660
me ayude en el inspector.

04:47.750 --> 04:51.590
Así que después de reconstruir los marcadores, puedo hacer la predicción.

04:51.590 --> 04:57.980
Así que tomo ese mismo conjunto de iteraciones de predicción y hago un bucle a través de ellas.

04:57.980 --> 05:04.700
Y en este bucle for, lo que estoy haciendo es para cada predicción que estoy haciendo, estoy simulando que la escena de

05:04.700 --> 05:05.300
física.

05:05.300 --> 05:06.130
Un tick.

05:06.820 --> 05:12.060
Así que si no hubiera llamado manualmente a simular, no habría simulación de física allí.

05:12.070 --> 05:19.210
Así que lo que puedo hacer es hacer un bucle y marcarlo una vez y luego mover uno de los marcadores a ese punto.

05:19.210 --> 05:25.440
Luego vuelvo a marcarlo y muevo el siguiente marcador a ese punto y continúo hasta completar el arco.

05:25.450 --> 05:26.620
Y ya está.

05:27.460 --> 05:29.170
El proceso funciona realmente bien.

05:29.170 --> 05:31.140
Me da justo el resultado que quiero.

05:31.150 --> 05:37.690
Como ya he dicho, no va tan rápido en cuanto a velocidad de fotogramas, pero sigue funcionando muy bien.

05:38.110 --> 05:38.750
Ya está.

05:38.770 --> 05:39.730
Muchas gracias.

05:41.950 --> 05:47.470
En el próximo video, vamos a echar un vistazo a la pila de tecnología orientada a datos o puntos para la física de la unidad.
