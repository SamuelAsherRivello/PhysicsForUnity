WEBVTT

00:00.650 --> 00:06.320
Physics debugging debug draw ray physics, debugger window and profiler window.

00:06.410 --> 00:11.660
In this video we'll cover what is debugging and what are the challenges of debugging physics.

00:11.690 --> 00:16.700
We'll examine the tools that we have to help us out, and then we'll open up unity and tackle some common

00:16.700 --> 00:17.490
scenarios.

00:17.510 --> 00:18.950
So what is debugging?

00:18.980 --> 00:21.170
A bug is an error flaw.

00:21.170 --> 00:23.860
Failure or fault in computer programming.

00:23.870 --> 00:28.070
Debugging is the process of identifying and removing those errors from software.

00:28.070 --> 00:31.670
So what are the challenges with debugging physics specifically?

00:31.670 --> 00:38.200
Well, physics is a highly complex and resource intensive system, so optimization is important.

00:38.210 --> 00:45.470
Physics includes a lot of setup settings, components, properties and more, as well as your own custom

00:45.470 --> 00:48.860
code properties, event handlers and more together.

00:48.860 --> 00:50.480
This is a lot of complexity.

00:50.480 --> 00:55.760
Now luckily, unity automatically does a lot for you with unity physics, that's good.

00:55.760 --> 01:00.200
But due to the system complexity, there's a lot that can go wrong and that's bad.

01:00.200 --> 01:02.300
So what are tools for general debugging?

01:02.300 --> 01:05.120
The Unity console window is very important.

01:05.120 --> 01:09.700
It shows the errors, warnings and other messages generated by unity.

01:09.710 --> 01:15.290
It will also show your custom messages which you generate with debug log to open it up.

01:15.290 --> 01:16.940
Use the unity window.

01:16.940 --> 01:20.870
General console window usage is just detecting.

01:20.870 --> 01:22.760
Did unity reach this line of code?

01:22.760 --> 01:29.000
And you can also say what is the specific value of a property or a variable you can see in the code

01:29.000 --> 01:36.710
snippet debug log Hello world passes that message up to the console breakpoints pause the game at a

01:36.710 --> 01:41.660
specific moment in code and allows you to inspect all the variables that are in memory.

01:41.660 --> 01:47.360
The setup is you attach the code editor unity and you set a breakpoint by clicking out in the margin.

01:47.360 --> 01:51.650
You run unity and play it normally, waiting for unity to pause.

01:51.650 --> 01:54.890
When unity pauses, it tells you you're at one of your breakpoints.

01:54.890 --> 02:01.160
Inspect the code editor and you can continue along or stop the debug session usages here or did Unity

02:01.160 --> 02:02.510
reach this line of code?

02:02.510 --> 02:06.590
And what are the specific values of many of the properties and variables?

02:06.770 --> 02:08.600
Custom debug and draw code.

02:08.600 --> 02:13.250
Unity's API supports drawing lines and shapes in the editor when and where we want.

02:13.250 --> 02:17.810
You can do it for non physics code too, but here are some examples that I've used.

02:17.810 --> 02:19.970
Where exactly did the collisions occur?

02:19.970 --> 02:25.340
Where the bounds of my object at a given moment and what was the path of my object over time?

02:25.340 --> 02:26.870
The code is quite simple.

02:26.870 --> 02:28.250
Let's take a look at a demo.

02:28.250 --> 02:34.310
We'll look at the following box, will play the scene, inspect the code, we'll add our own debug log

02:34.310 --> 02:38.090
statement to see it work in the console window, and then we'll add a breakpoint.

02:38.210 --> 02:38.420
All right.

02:38.420 --> 02:40.820
Let's take a look at the next scene here.

02:40.820 --> 02:42.950
We're going to look at the following box.

02:42.970 --> 02:48.620
And what I'm mostly interested in here is the scene view, because I've got some debug code set up.

02:48.620 --> 02:52.430
It's going to draw some helpful guidelines, so I'll run the scene.

02:53.450 --> 02:56.330
And while it's playing in, the cube is dropping.

02:57.150 --> 02:59.820
I tap d a few times, I'm going to pause there.

02:59.940 --> 03:06.420
So the lines that we're able to see here, green for contact, blue for where the box is traveled in

03:06.420 --> 03:11.190
its lifetime and white for some key boundaries where I tapped the key.

03:11.220 --> 03:13.760
Now, maybe you don't want to tap a key.

03:13.770 --> 03:18.000
Maybe you want to have it happen based on some programmatic situation.

03:18.000 --> 03:23.780
But I just wanted to show that this is based on collision, based on position, travel or user input.

03:23.790 --> 03:26.250
This is only visible for us as developers.

03:26.250 --> 03:27.630
It's not for the end user.

03:27.790 --> 03:29.790
Let's jump in and take a look at the code.

03:29.790 --> 03:33.810
You can imagine some scenarios where this would be helpful for debugging info.

03:34.140 --> 03:40.350
So first of all, when we have a collision, we run through the collision context and we draw array.

03:40.380 --> 03:42.420
That's how we get those little green lines.

03:43.070 --> 03:51.110
Then whenever I tap the key, I gather a list of the positions and every frame I redraw all of those

03:51.110 --> 03:54.950
little white boxes based on how gizmo, drawer, wire cube works.

03:54.950 --> 03:59.300
I have to redraw them every frame, then to draw the entire path.

03:59.300 --> 04:00.170
Pretty simple.

04:00.170 --> 04:06.860
I just capture on start the position and then every update I do a debug draw a line from the last position

04:06.860 --> 04:08.120
to the current position.

04:08.120 --> 04:12.440
And that's how I get that long blue line of where the box has been in its lifetime.

04:12.740 --> 04:13.250
That's it.

04:13.250 --> 04:14.030
Pretty simple.

04:14.030 --> 04:18.350
So what are the tools designed specifically for physics, debugging and unity?

04:18.380 --> 04:23.660
Well, first of all, if we look at the rigid body in the inspector, we can see that there's an info

04:23.660 --> 04:29.200
section that we can expand and we can see lots of very good values that are updated regularly.

04:29.210 --> 04:30.950
This is super helpful in debugging.

04:30.950 --> 04:35.170
You can watch it live or pause at any moment using the Unity editor pause.

04:35.180 --> 04:38.450
Notice that it's grayed out though, so you cannot edit these values.

04:38.450 --> 04:44.390
The physics debugger window allows you to quickly inspect the collider geometry in your scene and you

04:44.390 --> 04:47.210
can profile some common physics based scenarios.

04:47.210 --> 04:53.270
The profiler window displays statistics about physics that have been processed by the physics engine

04:53.270 --> 04:53.960
in your scene.

04:53.960 --> 05:00.560
This information can help you diagnose and resolve performance issues or unexpected discrepancies related

05:00.560 --> 05:01.550
to your physics scene.

05:01.550 --> 05:06.770
You can open it up and as you see in the screenshot here, we see a rising and falling line of how much

05:06.770 --> 05:08.540
computation power is needed.

05:08.540 --> 05:14.150
At the second, if we look for particularly high points, we can pause there and dig into the code and

05:14.150 --> 05:15.890
look at what's causing the issue.

05:16.370 --> 05:17.610
Let's take a look at a demo.

05:17.630 --> 05:19.460
We'll open the following box again.

05:19.460 --> 05:21.020
This time we'll play the scene.

05:21.020 --> 05:22.970
We'll view the rigid bodies info.

05:22.970 --> 05:27.470
We'll also open up these windows, the physics debugger and the physics profiler.

05:27.940 --> 05:29.720
All right, Let's take a look at the next scene.

05:29.720 --> 05:32.030
We're going to see the falling box again.

05:32.030 --> 05:37.670
And this time we're going to look at a few new things, one, while the scene is playing.

05:39.630 --> 05:44.730
I'm going to pause it here and take a look at the info of the rigid body.

05:45.150 --> 05:47.580
Now, there's lots of helpful information here.

05:47.580 --> 05:53.730
In the info we can see the current speed, velocity, different tensor values, etc. that could be very

05:53.730 --> 05:56.250
helpful in debugging your code.

05:56.730 --> 06:02.490
Also, let's take a look at window analysis and profiler.

06:02.850 --> 06:09.960
Here we're able to look at the physics profiler over time as it's playing even it'll be updated and

06:09.960 --> 06:16.320
scrub across and be able to see the number of dynamic colliders we have, rigid bodies, etc. that could

06:16.320 --> 06:18.060
help you debug your scene as well.

06:18.690 --> 06:25.140
Also, we're going to take a look at analysis and physics debugger, and I'll move this over here for

06:25.140 --> 06:26.520
a sex so we can see it.

06:28.280 --> 06:34.310
And what we're able to do here is while the scene is playing or while it's paused, we're able to look

06:34.310 --> 06:38.150
at all the different coloration that it adds Swatch when I toggle it.

06:38.660 --> 06:44.810
For showing us lots of different information about the scene colliders and which ones are sleeping,

06:44.810 --> 06:47.930
etc. So all that together is really helpful.

06:47.960 --> 06:48.680
That's it.

06:49.600 --> 06:54.480
In the next section, we'll create a project, something like the Angry Birds Game.

06:54.490 --> 06:57.670
This will be a complete 2D game that we create from scratch.

06:57.670 --> 07:01.570
We'll create it using physics, projectile motion, using input.

07:01.570 --> 07:05.260
We'll create game obstacles that interact with rigid body dynamics.

07:05.260 --> 07:08.950
We'll add wind loss conditions and even add some polish at the end.
