WEBVTT

00:00.650 --> 00:06.320
Fizik hata ayıklama hata ayıklama ışın fiziği, hata ayıklayıcı penceresi ve profil oluşturucu penceresi çizin.

00:06.410 --> 00:11.660
Bu videoda hata ayıklamanın ne olduğunu ve fizikte hata ayıklamanın zorluklarını ele alacağız.

00:11.690 --> 00:16.700
Bize yardımcı olacak araçları inceleyeceğiz ve ardından birliği açıp bazı yaygın sorunları ele alacağız.

00:16.700 --> 00:17.490
Senaryolar.

00:17.510 --> 00:18.950
Peki hata ayıklama nedir?

00:18.980 --> 00:21.170
Hata bir kusurdur.

00:21.170 --> 00:23.860
Bilgisayar programlamada başarısızlık veya hata.

00:23.870 --> 00:28.070
Hata ayıklama, yazılımdaki bu hataları belirleme ve giderme sürecidir.

00:28.070 --> 00:31.670
Peki özellikle fizikte hata ayıklamanın zorlukları nelerdir?

00:31.670 --> 00:38.200
Fizik oldukça karmaşık ve kaynak yoğun bir sistemdir, bu nedenle optimizasyon önemlidir.

00:38.210 --> 00:45.470
Fizik çok sayıda kurulum ayarı, bileşen, özellik ve daha fazlasının yanı sıra kendi özel

00:45.470 --> 00:48.860
kod özellikleri, olay işleyicileri ve daha fazlasını bir araya getirir.

00:48.860 --> 00:50.480
Bu çok fazla karmaşıklık demek.

00:50.480 --> 00:55.760
Neyse ki unity, unity fiziği ile sizin için otomatik olarak çok şey yapıyor, bu iyi.

00:55.760 --> 01:00.200
Ancak sistemin karmaşıklığı nedeniyle yanlış gidebilecek çok şey var ve bu kötü bir şey.

01:00.200 --> 01:02.300
Peki genel hata ayıklama araçları nelerdir?

01:02.300 --> 01:05.120
Unity konsol penceresi çok önemlidir.

01:05.120 --> 01:09.700
Unity tarafından oluşturulan hataları, uyarıları ve diğer mesajları gösterir.

01:09.710 --> 01:15.290
Ayrıca açmak için debug log ile oluşturduğunuz özel mesajlarınızı da gösterecektir.

01:15.290 --> 01:16.940
Birlik penceresini kullanın.

01:16.940 --> 01:20.870
Genel konsol penceresi kullanımı sadece algılanıyor.

01:20.870 --> 01:22.760
Birlik bu kod satırına ulaştı mı?

01:22.760 --> 01:29.000
Ayrıca, kodda görebileceğiniz bir özelliğin veya değişkenin belirli bir değerinin ne olduğunu da söyleyebilirsiniz

01:29.000 --> 01:36.710
snippet debug log Merhaba dünya bu mesajı konsola aktarır kesme noktaları oyunu bir

01:36.710 --> 01:41.660
Koddaki belirli bir an ve bellekteki tüm değişkenleri incelemenizi sağlar.

01:41.660 --> 01:47.360
Kurulum, kod düzenleyici birliğini eklemek ve kenar boşluğuna tıklayarak bir kesme noktası ayarlamaktır.

01:47.360 --> 01:51.650
Unity'yi çalıştırır ve normal bir şekilde oynatırsınız, unity'nin duraklamasını beklersiniz.

01:51.650 --> 01:54.890
Unity durakladığında, size kesme noktalarınızdan birinde olduğunuzu söyler.

01:54.890 --> 02:01.160
Kod düzenleyiciyi inceleyin ve hata ayıklama oturumu kullanımlarına buradan devam edebilir veya durdurabilirsiniz ya da Unity

02:01.160 --> 02:02.510
bu kod satırına ulaşabilir miyiz?

02:02.510 --> 02:06.590
Ve özelliklerin ve değişkenlerin çoğunun belirli değerleri nelerdir?

02:06.770 --> 02:08.600
Özel hata ayıklama ve çizim kodu.

02:08.600 --> 02:13.250
Unity'nin API'si, editörde istediğimiz zaman ve yerde çizgi ve şekil çizmeyi destekler.

02:13.250 --> 02:17.810
Bunu fizik dışı kodlar için de yapabilirsiniz, ancak burada kullandığım bazı örnekler var.

02:17.810 --> 02:19.970
Çarpışmalar tam olarak nerede gerçekleşti?

02:19.970 --> 02:25.340
Belirli bir anda nesnemin sınırları neredeydi ve nesnemin zaman içindeki yolu neydi?

02:25.340 --> 02:26.870
Kod oldukça basit.

02:26.870 --> 02:28.250
Bir demoya göz atalım.

02:28.250 --> 02:34.310
Aşağıdaki kutuya bakacağız, sahneyi oynatacağız, kodu inceleyeceğiz, kendi hata ayıklama günlüğümüzü ekleyeceğiz

02:34.310 --> 02:38.090
ifadesinin konsol penceresinde çalıştığını göreceğiz ve sonra bir kesme noktası ekleyeceğiz.

02:38.210 --> 02:38.420
Tamamdır.

02:38.420 --> 02:40.820
Bir sonraki sahneye bir göz atalım.

02:40.820 --> 02:42.950
Aşağıdaki kutuya bakacağız.

02:42.970 --> 02:48.620
Ve burada en çok ilgilendiğim şey sahne görünümü, çünkü bazı hata ayıklama kodlarım var.

02:48.620 --> 02:52.430
Bazı yararlı yönergeler çizecek, bu yüzden sahneyi çalıştıracağım.

02:53.450 --> 02:56.330
Ve o oynarken, küp düşüyor.

02:57.150 --> 02:59.820
Birkaç kez dokundum, orada duracağım.

02:59.940 --> 03:06.420
Burada görebildiğimiz çizgiler, temas için yeşil, kutunun içinde hareket ettiği yer için mavi

03:06.420 --> 03:11.190
Tuşa dokunduğum bazı tuş sınırları için ömrü ve beyazı.

03:11.220 --> 03:13.760
Şimdi, belki bir tuşa dokunmak istemezsiniz.

03:13.770 --> 03:18.000
Belki de bazı programatik durumlara bağlı olarak bunun gerçekleşmesini istiyorsunuzdur.

03:18.000 --> 03:23.780
Ancak bunun çarpışmaya, konuma, seyahate veya kullanıcı girdisine dayalı olduğunu göstermek istedim.

03:23.790 --> 03:26.250
Bu sadece geliştiriciler olarak bizim için görülebilir.

03:26.250 --> 03:27.630
Son kullanıcı için değil.

03:27.790 --> 03:29.790
Hadi içeri girelim ve koda bir göz atalım.

03:29.790 --> 03:33.810
Bunun hata ayıklama bilgisi için yararlı olacağı bazı senaryoları hayal edebilirsiniz.

03:34.140 --> 03:40.350
Her şeyden önce, bir çarpışma olduğunda, çarpışma bağlamından geçiyoruz ve dizi çiziyoruz.

03:40.380 --> 03:42.420
Bu küçük yeşil çizgileri böyle elde ediyoruz.

03:43.070 --> 03:51.110
Ardından, tuşa her dokunduğumda, konumların bir listesini toplarım ve her karede tüm bunları yeniden çizerim

03:51.110 --> 03:54.950
Gizmo, çekmece ve tel küpün nasıl çalıştığına bağlı olarak küçük beyaz kutular.

03:54.950 --> 03:59.300
Tüm yolu çizmek için her karede onları yeniden çizmem gerekiyor.

03:59.300 --> 04:00.170
Oldukça basit.

04:00.170 --> 04:06.860
Sadece başlangıçta konumu yakalıyorum ve sonra her güncellemede bir hata ayıklama yapıyorum son konumdan bir çizgi çiziyorum

04:06.860 --> 04:08.120
mevcut pozisyona.

04:08.120 --> 04:12.440
Kutunun ömrü boyunca nerede olduğunu gösteren uzun mavi çizgiyi de bu şekilde elde ediyorum.

04:12.740 --> 04:13.250
Bu kadar.

04:13.250 --> 04:14.030
Oldukça basit.

04:14.030 --> 04:18.350
Peki özellikle fizik, hata ayıklama ve unity için tasarlanmış araçlar nelerdir?

04:18.380 --> 04:23.660
Her şeyden önce, denetçide katı gövdeye bakarsak, bir bilgi olduğunu görebiliriz

04:23.660 --> 04:29.200
bölümünü genişletebilir ve düzenli olarak güncellenen çok sayıda iyi değer görebiliriz.

04:29.210 --> 04:30.950
Bu, hata ayıklamada çok yardımcı olur.

04:30.950 --> 04:35.170
Canlı olarak izleyebilir veya Unity editörü duraklatmayı kullanarak istediğiniz zaman duraklatabilirsiniz.

04:35.180 --> 04:38.450
Gri renkte olduğuna dikkat edin, yani bu değerleri düzenleyemezsiniz.

04:38.450 --> 04:44.390
Fizik hata ayıklayıcı penceresi, sahnenizdeki çarpıştırıcı geometrisini hızlı bir şekilde incelemenizi sağlar ve

04:44.390 --> 04:47.210
bazı yaygın fizik tabanlı senaryoların profilini çıkarabilir.

04:47.210 --> 04:53.270
Profil oluşturucu penceresi, fizik motoru tarafından işlenen fizikler hakkındaki istatistikleri görüntüler

04:53.270 --> 04:53.960
senin sahnende.

04:53.960 --> 05:00.560
Bu bilgiler, performans sorunlarını veya beklenmedik tutarsızlıkları teşhis etmenize ve çözmenize yardımcı olabilir

05:00.560 --> 05:01.550
fizik sahnenize.

05:01.550 --> 05:06.770
Bunu açabilirsiniz ve buradaki ekran görüntüsünde gördüğünüz gibi, ne kadar yükselip alçalan bir çizgi görüyoruz

05:06.770 --> 05:08.540
hesaplama gücüne ihtiyaç vardır.

05:08.540 --> 05:14.150
İkincisinde, özellikle yüksek noktalara bakarsak, orada durabilir ve kodu inceleyebiliriz ve

05:14.150 --> 05:15.890
Soruna neyin sebep olduğuna bir bakalım.

05:16.370 --> 05:17.610
Bir demoya göz atalım.

05:17.630 --> 05:19.460
Aşağıdaki kutuyu tekrar açacağız.

05:19.460 --> 05:21.020
Bu sefer sahneyi oynayacağız.

05:21.020 --> 05:22.970
Katı cisim bilgisini görüntüleyeceğiz.

05:22.970 --> 05:27.470
Ayrıca bu pencereleri, fizik hata ayıklayıcısını ve fizik profilleyicisini de açacağız.

05:27.940 --> 05:29.720
Pekala, bir sonraki sahneye bir göz atalım.

05:29.720 --> 05:32.030
Düşen kutuyu tekrar göreceğiz.

05:32.030 --> 05:37.670
Ve bu sefer birkaç yeni şeye bakacağız, birincisi, sahne oynatılırken.

05:39.630 --> 05:44.730
Burada duraklatacağım ve katı cismin bilgilerine bir göz atacağım.

05:45.150 --> 05:47.580
Şimdi, burada pek çok yararlı bilgi var.

05:47.580 --> 05:53.730
Bilgide mevcut hızı, hızı, farklı tensör değerlerini vb. görebiliriz.

05:53.730 --> 05:56.250
kodunuzda hata ayıklamaya yardımcı olur.

05:56.730 --> 06:02.490
Ayrıca, pencere analizi ve profilleyiciye de bir göz atalım.

06:02.850 --> 06:09.960
Burada fizik profilleyicisine zaman içinde bakabiliyoruz, hatta oynarken bile güncellenecek ve

06:09.960 --> 06:16.320
fırçalayın ve sahip olduğumuz dinamik çarpıştırıcıların, sert cisimlerin vb. sayısını görebilin.

06:16.320 --> 06:18.060
sahnenizde hata ayıklamanıza da yardımcı olur.

06:18.690 --> 06:25.140
Ayrıca, analiz ve fizik hata ayıklayıcısına bir göz atacağız ve bunu şuraya taşıyacağım

06:25.140 --> 06:26.520
bir seks, böylece onu görebiliriz.

06:28.280 --> 06:34.310
Ve burada yapabildiğimiz şey, sahne oynatılırken veya duraklatılmışken, bakabiliyoruz

06:34.310 --> 06:38.150
değiştirdiğimde Swatch'a eklediği tüm farklı renklendirmelere bakın.

06:38.660 --> 06:44.810
Bize sahne çarpıştırıcıları ve hangilerinin uyuduğu hakkında birçok farklı bilgi gösterdiği için,

06:44.810 --> 06:47.930
vs. Yani bunların hepsi bir arada gerçekten yardımcı oluyor.

06:47.960 --> 06:48.680
Bu kadar.

06:49.600 --> 06:54.480
Bir sonraki bölümde, Angry Birds Oyunu gibi bir proje oluşturacağız.

06:54.490 --> 06:57.670
Bu, sıfırdan yarattığımız eksiksiz bir 2D oyun olacak.

06:57.670 --> 07:01.570
Bunu fizik, mermi hareketi ve girdi kullanarak oluşturacağız.

07:01.570 --> 07:05.260
Katı cisim dinamikleri ile etkileşime giren oyun engelleri yaratacağız.

07:05.260 --> 07:08.950
Rüzgar kaybı koşullarını ekleyeceğiz ve hatta sonuna biraz cila ekleyeceğiz.
