WEBVTT

00:01.540 --> 00:03.510
Fizik yörüngesini tahmin etmek.

00:03.520 --> 00:08.050
Bu videoda, fizik hareketini gerçekleşmeden önce nasıl tahmin edebileceğimizi göreceğiz.

00:08.050 --> 00:13.090
Bunun oyunlarımıza ve oyuncularımıza nasıl yardımcı olabileceğini öğreneceğiz ve ardından Unity'yi açıp şunları göreceğiz

00:13.090 --> 00:16.270
Yörüngeyi tahmin etmenin gerçek dünyadan bir örneği.

00:16.270 --> 00:18.100
Peki fizik tahmini nedir?

00:18.100 --> 00:24.400
Tahmin, gelecekteki özelliklerin, örneğin nesnelerin konumunun veya rotasyonunun hesaplanmasıdır.

00:24.400 --> 00:25.480
fizik sisteminiz.

00:25.750 --> 00:33.280
Bunun bazı örnekleri, kullanıcıya mermisinin nerede olduğunu göstermek için bir çizgi veya ok gösteren görselleştirmedir.

00:33.280 --> 00:34.240
gidecek.

00:34.240 --> 00:40.900
Ya da bu tahminin oyunumuzun zeka sistemlerine daha uygun bir girdi sağladığını düşünüyorum.

00:41.970 --> 00:45.870
Beşinci Bölüm Upset Ducks oyunumuzdan bir örnek alalım.

00:45.870 --> 00:50.220
Şu anda tamamlanmış ve oynanabilir durumda, ancak öngörücü fiziği yok.

00:50.220 --> 00:57.330
Görselleştirmeye bir örnek, asteroidin yolunu hesaplamak ve görselleştirme olarak bir ok görüntülemek olabilir.

00:57.330 --> 01:02.220
Bu, kullanıcı için geri bildirimi artıracak ve onlara oyunla daha iyi bir bağlantı sağlayacaktır.

01:02.220 --> 01:03.840
Daha olumlu bir oyun hissi.

01:03.840 --> 01:09.330
Sonuç, kullanıcılarımızın asteroidi serbest bırakmadan önce daha akıllı seçimler yapmalarına yardımcı olacaktır.

01:09.330 --> 01:11.400
Nereye gittiğini az çok bilirler.

01:11.430 --> 01:13.410
Başka bir örnek de yapay zeka olabilir.

01:13.440 --> 01:16.500
Göz için asteroidin yolunu hesaplayabiliriz.

01:16.530 --> 01:20.520
Onlara doğru nişan aldığımızda düşmanların korkuyla tepki vermesini sağlayabiliriz.

01:20.520 --> 01:24.570
Ya da çarpışmalardan kaçınmak için yoldan atlayan düşmanlarımız olabilir.

01:24.810 --> 01:26.450
Ya da tabii ki ikisini de yapabiliriz.

01:26.460 --> 01:29.820
Görselleştirme ve güncellenmiş yapay zekaya sahip olabiliriz.

01:30.450 --> 01:32.190
Peki fiziği nasıl tahmin edebiliriz?

01:32.700 --> 01:37.200
Birincil bir sahne oluşturuyoruz ve bazı fizik kuvvetlerine sahip bir nesne ayarlıyoruz.

01:37.200 --> 01:40.450
Ardından ikincil bir görünmez fizik sahnesi oluşturuyoruz.

01:40.470 --> 01:47.940
Burada işaretleyici toplar ekleyebilir ve her bir top için Delta zamanını benzersiz bir Delta ile simüle edebiliriz

01:47.940 --> 01:52.860
zaman, o nesnenin seyahat edeceği yay boyunca ilerliyor.

01:53.430 --> 01:54.790
Bir demoya göz atalım.

01:54.810 --> 01:56.860
Yörünge tahminine bakalım.

01:56.880 --> 01:58.080
Sahneyi oynatacağız.

01:58.080 --> 02:03.750
Zıplayan Küp oyun nesnesi için denetçiyi görüntüleyecek, kuvvetini güncelleyecek, tahmini görüntüleyecektir,

02:03.750 --> 02:05.160
ve kodu inceleyecek.

02:06.330 --> 02:06.570
Tamamdır.

02:06.570 --> 02:11.800
İşte birlik içindeyiz, yörünge tahminine geçiyoruz.

02:11.820 --> 02:14.700
Şimdi, bu projede, kurduğum şey şu.

02:15.660 --> 02:18.050
Üzerinde senaryo olan bir küp.

02:18.060 --> 02:25.940
Ve bunun yaptığı şey, uygulanmak üzere olan fizik kuvvetinin nereye gittiğini göstermektir.

02:25.950 --> 02:31.970
Ve burada küpün önündeki bu işaretleyici yayını görebilirsiniz.

02:31.980 --> 02:36.810
Ve burada yapabildiğim şey, uygulanacak olan fizik kuvvetidir.

02:36.810 --> 02:41.550
Bunun nereye gideceğini göstermek için aynı değeri kullanıyorum.

02:41.940 --> 02:46.520
Şimdi, bir şey, ben bunun üzerinde çalışırken, bu unity'de nispeten yeni.

02:46.530 --> 02:53.610
Herkese açık bir özellik, ancak yine de daha önce üretimde kullanmamıştım ve hayal kırıklığına uğradım

02:53.610 --> 02:55.200
bunun hızına göre.

02:55.200 --> 03:01.440
Aslında o kadar da pürüzsüz değil ve bazı optimizasyonlar yapılabilir, ancak kesinlikle işe yarıyor

03:01.440 --> 03:02.310
ve iyi çalışıyor.

03:02.310 --> 03:06.900
Böylece kuvvetleri oraya taşıyabiliyorum ve burada ayarlanacak birkaç düğmem var,

03:06.900 --> 03:10.250
muhtemelen hareket etmek için kullanıcı girdisini bir şekilde simüle ediyor.

03:10.260 --> 03:15.450
Devam edip güç kullanacağım ve orada zıpladığını ve çizgiyi mükemmel bir şekilde takip ettiğini görebilirsiniz.

03:15.450 --> 03:21.150
Bakın, burada birkaç tahmin kaydırıcım var, böylece bunlardan daha fazla veya daha az yapabiliriz.

03:22.520 --> 03:25.820
Yaydaki bu işaretlerden az ya da çok.

03:26.360 --> 03:29.540
Şimdi buradaki koda bir göz atalım.

03:30.590 --> 03:31.910
Önemli şeylerin üzerinden geçelim.

03:31.910 --> 03:36.240
Yani az önce gördüğümüz serileştirilmiş özellikler başlangıçta var.

03:36.260 --> 03:41.480
Yaptığım şey, yeni sahne parametreleri ve yeni bir sahne oluşturmak.

03:41.750 --> 03:44.440
Bu, yerel fizik olarak adlandırılan bir türdür.

03:44.450 --> 03:50.600
Bu yüzden ana sahnemizin hemen yanında şeffaf bir şekilde çalışacak yeni bir sahne oluşturuyorum.

03:51.080 --> 03:53.000
Bunu başlangıçta yapıyorum.

03:53.510 --> 03:56.750
Sonra burada aşağıda.

03:58.410 --> 03:59.640
Tahminde.

04:03.690 --> 04:05.200
Ben buraya bakıyorum.

04:05.210 --> 04:08.330
Peki tahminde gerçekten ne oluyor?

04:09.230 --> 04:11.840
Bu kullanım işaretleri dediğim gibi.

04:12.170 --> 04:14.570
Birkaç zamanlama yinelemesi ayarladım.

04:14.570 --> 04:16.880
İşin büyük kısmı burada, değil mi?

04:17.090 --> 04:18.210
İki adım var.

04:18.230 --> 04:23.960
İlk olarak, işaretleyicileri yeniden oluşturuyorum, böylece denetçiyi periyodik olarak güncellediğimde bazı

04:23.960 --> 04:25.610
değerleri, işaretleyicileri yeniden oluşturacağım.

04:25.640 --> 04:29.690
Yine, bu işaretleyici top oyunu nesnelerini yeniden üretiyor.

04:30.200 --> 04:33.580
Ve yaptığım şey sadece döngüye girmek ve bunlardan yeterince oluşturmak.

04:33.590 --> 04:41.060
Şimdi bunlardan yeterince var ve 151. satıra dikkat edin, bu oyun nesnelerini

04:41.060 --> 04:46.070
diğer sahneyi, oluşturduğumuz tahmin sahnesine ekliyorum ve onlara da bir isim veriyorum.

04:46.070 --> 04:47.660
sadece müfettişte bana yardımcı oluyor.

04:47.750 --> 04:51.590
İşaretleyicileri yeniden oluşturduktan sonra, aslında tahmin yapabilirim.

04:51.590 --> 04:57.980
Bu yüzden aynı tahmin yinelemeleri kümesini alıyorum ve bunlar arasında döngü yapıyorum.

04:57.980 --> 05:04.700
Ve bu for döngüsünde yaptığım şey, yaptığım her tahmin için o sahnenin

05:04.700 --> 05:05.300
Fizik.

05:05.300 --> 05:06.130
Bir tik.

05:06.820 --> 05:12.060
Yani simülasyonu manuel olarak çağırmamış olsaydım, orada fizik simülasyonu olmayacaktı.

05:12.070 --> 05:19.210
Yani yapabileceğim şey, döngü oluşturup bir kez işaretlemek ve ardından işaretleyicilerden birini o noktaya taşımak.

05:19.210 --> 05:25.440
Sonra tekrar işaretliyorum ve bir sonraki işaretleyiciyi o noktaya taşıyorum ve tüm yayı tamamlayana kadar devam ediyorum.

05:25.450 --> 05:26.620
İşte bu kadar.

05:27.460 --> 05:29.170
Süreç gerçekten iyi işliyor.

05:29.170 --> 05:31.140
Bana tam istediğim sonucu veriyor.

05:31.150 --> 05:37.690
Bahsettiğim gibi, kare hızı açısından çok hızlı çalışmıyor, ancak yine de gerçekten iyi çalışıyor.

05:38.110 --> 05:38.750
Bu kadar.

05:38.770 --> 05:39.730
Çok teşekkürler.

05:41.950 --> 05:47.470
Bir sonraki videoda, veri odaklı teknoloji yığınına veya unity physics için noktalara bir göz atacağız.
