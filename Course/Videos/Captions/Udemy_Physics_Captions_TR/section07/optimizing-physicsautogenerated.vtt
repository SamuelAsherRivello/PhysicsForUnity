WEBVTT

00:01.840 --> 00:03.150
Fiziği optimize ediyorum.

00:03.160 --> 00:06.810
Bu videoda gerçek dünyadan bir fizik örneğine göz atacağız.

00:06.820 --> 00:09.220
Bazı optimizasyonları deneyeceğiz.

00:09.220 --> 00:12.700
Son olarak, performansı önemli ölçüde artıracağız.

00:13.030 --> 00:14.530
Hadi optimize edelim.

00:14.980 --> 00:19.560
Aynı zincir nesnesinin birçok örneğini içeren bir demo oluşturdum.

00:19.570 --> 00:22.810
Burada yaklaşık 20.000 yumurtladığımı görebilirsiniz.

00:23.260 --> 00:25.420
Mevcut performans çok düşük.

00:25.420 --> 00:28.420
Dizüstü bilgisayarımda saniyede üç kare civarında.

00:28.420 --> 00:31.900
Elbette hangi makinede olduğunuza bağlı olarak farklı performans görebilirsiniz.

00:31.900 --> 00:36.100
Saniyede 60 kare civarında bir performans elde etmek için kendimize bir hedef belirleyelim.

00:36.280 --> 00:38.500
Bunu optimize etmek için ne yapabileceğimize bakacağız.

00:40.620 --> 00:41.980
Demoya bir göz atalım.

00:42.000 --> 00:44.720
Optimize edilmiş fizik başlangıç sahnesini kullanacağız.

00:44.730 --> 00:50.430
Sahneyi oynatacağız ve ardından optimizasyonları yineleyeceğiz, kare hızını sürekli kontrol edeceğiz

00:50.430 --> 00:51.480
ve nasıl yaptığımıza bakalım.

00:52.110 --> 00:53.790
Pekala, projeye geçelim.

00:54.300 --> 00:57.150
Yani optimize edilmiş başlangıç sahnesine bakıyoruz.

00:57.540 --> 01:02.460
Burada kurduğum şey bir zincirin bir dizi halkasıdır.

01:02.640 --> 01:04.170
Eklemleri olan bir zincir değil.

01:04.170 --> 01:06.000
Ben sadece bu parçaları kullanıyorum.

01:06.000 --> 01:11.460
Ve bu pencereyi biraz daha açarsam Unity'nin bazı istatistikleri var.

01:12.420 --> 01:18.300
İstatistikler sayesinde, bu parçalar düştükçe ve her bir parçadaki kusurla etkileşime girdikçe

01:18.300 --> 01:18.840
Diğerleri.

01:18.840 --> 01:25.200
Saniyede 2,8 ila 3 kare civarında bir kare hızı elde ediyoruz, yani bu çok düşük.

01:25.860 --> 01:28.840
Saniyede 60 kare gibi bir hedef belirleyelim.

01:28.890 --> 01:30.720
Ne tür değişiklikler yapabileceğimize bakalım.

01:32.070 --> 01:33.990
Yani sahne kurulumu oldukça basit.

01:33.990 --> 01:35.040
Bir zemin var.

01:35.070 --> 01:40.680
Sonra burada yaklaşık 20.000 nesne oluşturmak için kullandığım bir nesne var, ki bu çok fazla.

01:41.010 --> 01:42.420
O zaman bir sahnem var.

01:43.350 --> 01:46.630
Optimize Edilmiş Fizik kurulumu adlı oyun nesnesi kuruldu.

01:46.650 --> 01:50.200
Yorumlardan veya yorumlanmış kodlardan oluşan bir grup şey.

01:50.220 --> 01:51.690
Her birinin üzerinden geçelim.

01:51.780 --> 01:56.850
Her şeyden önce, test tavsiyesi olarak, bu gerçekten daha verimli bir proje yapmaz, ancak şunları verir

01:56.850 --> 02:00.270
bu ekran kullanıcı arayüzünde daha iyi kare hızı okuması.

02:00.390 --> 02:02.550
V Sync sayısını sıfıra ayarladık.

02:02.550 --> 02:09.660
Dolayısıyla optimizasyonun kendisi için ilk büyük adım her zaman unity'yi en son genel sürüme yükseltmektir.

02:09.660 --> 02:14.670
Yapabilirseniz, daha iyi performans elde edersiniz çünkü unity her zaman tüm sistemlerini güncelliyor

02:14.670 --> 02:18.510
Böylece gerçekten harika sonuçlar elde edersiniz.

02:18.600 --> 02:24.300
İkinci olarak, test ederken, kare hızı sizin için çok önemliyse

02:24.300 --> 02:29.550
Son cihazınız, ister bir Windows derlemesi olsun, ister iOS veya Android üzerinde oluşturulsun ve daha yakından test edilsin

02:29.550 --> 02:37.080
Son kullanıcıların deneyimine göre, daha iyi veya daha yakın bir performans elde edersiniz.

02:37.080 --> 02:39.510
kullanıcı elde edecektir, ki bu elbette önemli bir kriterdir.

02:40.660 --> 02:43.390
Proje içinde yapabileceğimiz bazı şeylerle başlayalım.

02:43.720 --> 02:48.190
Üç numara, devam edebilir ve sahnedeki gölgeleri kapatabiliriz.

02:48.220 --> 02:52.450
Ayrıca sahnedeki zemini statik olarak ayarlayabiliriz, bu da bir fizik değişikliğidir.

02:52.810 --> 03:00.100
Şey prefabrikine gidebilir ve örgü çarpıştırıcısını kapatabilir ve kutu çarpıştırıcı gibi bir ilkel kullanabiliriz

03:00.100 --> 03:00.700
onun yerine.

03:00.730 --> 03:03.940
Bu üç adımı uygulayalım ve ne tür değişiklikler elde ettiğimize bakalım.

03:04.450 --> 03:06.070
Her şeyden önce, ışıklandırma ile.

03:07.270 --> 03:10.660
Elimizde sert gölgeler var.

03:11.440 --> 03:13.630
Yumuşak gölgelerden daha etkilidir.

03:13.630 --> 03:15.370
Ama gölgesiz deneyelim.

03:15.370 --> 03:16.930
Bakalım burada bir etki görecek miyiz?

03:16.930 --> 03:20.620
Bu yüzden, bu şeylerden bazılarının iyi bir fark yaratabileceğini ve bazılarının da

03:20.620 --> 03:21.490
olmayabilir.

03:21.880 --> 03:27.970
Yapacağımız şey, döndürücüyü başlatmak için buraya bir fare tıklaması yapmak ve.

03:28.780 --> 03:30.190
En azından başlangıçta.

03:30.190 --> 03:34.330
Daha fazla zaman geçtikçe yavaşlayacaktır çünkü daha fazla hesaplama yapılacaktır.

03:34.330 --> 03:36.490
Ama bence biraz daha iyi olabilir.

03:36.490 --> 03:41.170
Üçe daha önce olduğumuzdan daha yakınız, bu yüzden bunu bir seçenek olarak düşünün.

03:42.180 --> 03:44.230
Oyununuz elbette gölge gerektirebilir.

03:44.290 --> 03:45.150
Belki bunu yapamazsın.

03:45.150 --> 03:49.050
Ancak burada fizik dışı bir çözüme gidildiğini belirtmek isterim.

03:49.200 --> 03:54.120
Bakacağımız bir sonraki şey, her şeyin altında olan basit zemini ayarlamak, ayarlamak

03:54.120 --> 03:55.020
statik hale getir.

03:55.820 --> 04:00.980
Sadece bunu yaparak sert gövdeyi optimize edebilir, daha verimli çalışabilir.

04:00.980 --> 04:02.030
Bir göz atalım.

04:02.650 --> 04:05.660
Hatırlayın, en iyi üçte alıyorduk.

04:06.580 --> 04:07.780
İşte.

04:10.280 --> 04:11.780
Aşağı yukarı aynı.

04:11.780 --> 04:16.010
Küçük değişiklikler olması mümkündür, ancak bu kontrol edilmesi gereken bir şeydir.

04:16.640 --> 04:19.820
Daha fazla nesneniz varsa, daha fazlasını statik olarak ayarlamak iyi olacaktır.

04:19.850 --> 04:21.960
Şimdi de prefabrik şeye bakalım.

04:21.980 --> 04:25.190
Şimdi bunu alalım ve dünyaya getirip yakınlaştıralım.

04:25.190 --> 04:28.430
Ve burada bir ağ çarpıştırıcımız olduğunu görebiliyoruz.

04:28.430 --> 04:35.540
Dolayısıyla, örgü çarpıştırıcıyı kapatır ve bunun yerine bir kutu çarpıştırıcı eklersek, kutu çarpıştırıcının

04:35.540 --> 04:38.600
şeklini tahmin etmede oldukça iyi bir iş çıkarıyor.

04:38.600 --> 04:43.910
Tabii ki, köşeler artık yuvarlak değil ve oyun projemize bağlı olarak bu aslında

04:43.910 --> 04:47.000
madde, bize yeterince farklı bir fizik sonucu verebilir.

04:47.300 --> 04:52.910
Şimdi bu değişikliği yaptığıma ve prefabriğe kaydettiğime göre, nasıl çalıştığını görelim.

04:55.830 --> 04:58.020
Bu yüzden başlatmak için fareme tıklıyorum.

05:03.740 --> 05:05.350
Üç civarında geziniyor.

05:06.850 --> 05:09.670
O halde bu, burada büyük bir fark yaratmamış olabilir.

05:10.720 --> 05:16.360
Bu yüzden bunun gerçekten bir değişiklik olup olmadığını iki kez kontrol edeceğim.

05:16.660 --> 05:17.880
Bir kutu çarpıştırıcım var.

05:17.890 --> 05:19.570
Ağ çarpıştırıcı kapalı.

05:19.780 --> 05:21.550
Çarpıştırıcı ağını kaldıracağım.

05:21.850 --> 05:23.800
Bu bir fark yaratır mı bilmiyorum ama.

05:24.800 --> 05:29.150
Kapalı olmasına rağmen, çünkü biraz kare atlaması almadığımıza şaşırdım

05:29.150 --> 05:31.730
orada, biraz gelişme var.

05:35.810 --> 05:37.640
Ve bu büyük bir fark yaratmış gibi görünmüyor.

05:37.640 --> 05:39.440
Ama belki sizin projenizde öyle olabilir.

05:40.350 --> 05:41.490
Sonraki adımlara geçelim.

05:42.850 --> 05:43.390
İşte.

05:43.390 --> 05:47.200
Ayarlayabileceğimiz birkaç farklı zaman değeri var.

05:47.410 --> 05:55.990
Şimdi, bunların her biriyle, doğru fizik veya verimli fizik arasında bir uzlaşma arayacaksınız.

05:55.990 --> 05:56.740
Kare hızı.

05:56.980 --> 06:01.930
Bu yüzden bunlarda ince ayar yapabiliyoruz ve hesaplamaları hala yapıyor olacaklar, ancak belki daha az sıklıkta

06:01.930 --> 06:03.360
ya da eskisinden daha sık.

06:03.370 --> 06:08.110
Sadece bu ince ayarlarla, bunlar önceden uğraştığım ve elde ettiğim bazı değerler

06:08.110 --> 06:08.890
Bazı iyi sonuçlar.

06:08.890 --> 06:09.760
Bir göz atalım.

06:10.800 --> 06:11.880
Burada koşacağım.

06:15.850 --> 06:16.810
Ve bir oynayın.

06:18.030 --> 06:21.570
Yani bu büyük bir fark yaratıyor.

06:21.570 --> 06:24.330
Bence bu durumda, bu gerçekten anahtar.

06:25.080 --> 06:28.830
Muhtemelen sadece bu değişikliği yapıp diğerlerini geri alabiliriz.

06:28.830 --> 06:31.740
Önceden saniyede 80, 80 küsur kareye kadar çıkıyorduk.

06:31.740 --> 06:35.100
Yani hedefimiz olan 60'a ulaştık ki bu harika bir şey.

06:35.220 --> 06:39.450
Dolayısıyla, bu iki özelliğin belgelerine bakarsanız, biraz daha fazla bilgi edinebilirsiniz

06:39.450 --> 06:41.700
ne yaptıklarını ve neden onları değiştirebileceğinizi anlatacağım.

06:41.700 --> 06:46.800
Ve projenize bağlı olarak, belki de bunları tam olarak benim yaptığım kadar aşırı derecede değiştiremezsiniz.

06:46.800 --> 06:49.920
Orada doğruluğa ihtiyacınız olabilir.

06:50.490 --> 06:53.790
Sonra denediğim birkaç şey daha bana pek yardımcı olmadı.

06:54.330 --> 07:01.530
Burada ayarlayabileceğiniz bazı fizik ayarları var ve bunları ayarlamak ve belki de benim seçtiğim değerler

07:01.530 --> 07:04.020
bana gerçekten iyi bir fark vermedi.

07:04.020 --> 07:09.060
Bu yüzden onları bu konuşmanın bir parçası haline getirmeyeceğim, ancak şunu bilin ki bazı

07:09.060 --> 07:10.050
diğer değerler ayarlanır.

07:10.050 --> 07:13.320
Ve son olarak, ayarlarda Uyarlanabilir Kuvvet adı verilen bir şey var.

07:13.320 --> 07:14.550
Bunu bir deneyeceğim.

07:15.300 --> 07:22.680
Fizik Projesi ayarlarında Fizik uyarlanabilir kuvveti etkinleştirin.

07:22.680 --> 07:25.110
Oh, aslında buradaki demomuzda zaten etkinleştirilmiş durumda.

07:25.110 --> 07:30.780
Böylece büyük yığınların stabilitesini artıran kuvveti mümkün kılar.

07:30.780 --> 07:37.800
Bu yüzden stabilite daha iyi bir sonuç olabilir ama daha yavaştır çünkü bir hesaplama olduğunu hayal ediyorum

07:37.800 --> 07:38.160
Orada.

07:38.160 --> 07:42.600
Kapatalım ve daha kötü bir performans elde edip edemeyeceğimize bakalım.

07:42.600 --> 07:44.250
Daha iyi performans gösteriyoruz.

07:46.400 --> 07:47.630
Ya da belki aynısı olur.

07:48.320 --> 07:50.840
Yani iyi görünüyoruz.

07:52.970 --> 07:54.710
Daha önce.

07:57.000 --> 07:59.230
Evet, bunun şimdi daha iyi olduğunu söyleyebilirim.

07:59.250 --> 08:03.840
Yani uyarlanabilir özelliğin açık olmaması daha iyidir.

08:04.380 --> 08:08.490
Bunu söylemek zor çünkü oynamasına izin verdikçe sahnede daha fazla karmaşıklık oluyor.

08:08.490 --> 08:14.250
Yani burada sadece kare hızına bakıp görsel bir ölçüm yapmamız bilimsel değil.

08:14.250 --> 08:19.830
Ancak genel olarak daha önce elde ettiğimizden çok daha iyi bir performans elde ettiğimizi görüyoruz.

08:20.620 --> 08:20.890
Şimdi.

08:20.890 --> 08:23.320
Ve tabii ki, 20.000 nesne ile birlikteyiz.

08:23.320 --> 08:29.950
Bu yüzden oyununuzda da bazı kare hızı sorunları yaşıyorsanız, belki de karmaşıklaştırın

08:29.950 --> 08:35.680
seviye tasarımınızda daha fazla engel, daha fazla seviye ile ilgili sorun.

08:36.160 --> 08:41.980
Daha yavaş yapıp yapamayacağınıza bakın, o zaman bu küçük değişikliklerin her biri daha dramatik bir çerçeve oluşturacaktır

08:41.980 --> 08:44.470
oran değişikliği ve sonra anlayacaksınız.

08:44.470 --> 08:45.790
Tamam, bu özellik yardımcı oluyor.

08:45.790 --> 08:46.830
Bu özellik yok.

08:46.840 --> 08:51.880
Karmaşıklığı ortadan kaldırdığınızda, daha istikrarlı bir kare hızına geri dönersiniz ve yine bu

08:51.880 --> 08:53.950
orada istediğiniz oyunu temsil eder.

08:53.950 --> 08:55.090
İşte bu kadar.

08:55.390 --> 09:00.520
Aynı sonucu görmek için optimize edilmiş fiziğin tamamlandığı sahneye de bakabilirsiniz.

09:00.520 --> 09:04.600
Ama tıpkı deney yaparken olduğu gibi, atlamak istiyorsanız, oynayın ve sonra kendinizi karşılaştırın,

09:04.600 --> 09:05.400
Bunu yapabilirsin.

09:05.410 --> 09:06.140
İşte bu kadar.

09:06.160 --> 09:07.030
Çok teşekkürler.

09:09.720 --> 09:14.010
Bir sonraki videoda, fizik yörüngesini tahmin etmeye bir göz atacağız.
