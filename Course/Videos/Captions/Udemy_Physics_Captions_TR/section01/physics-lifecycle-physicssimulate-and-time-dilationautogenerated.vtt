WEBVTT

00:01.890 --> 00:07.500
Bu videoda fizik, yaşam döngüsü fiziği, simülasyon ve zaman genişlemesinin yapısı ele alınacaktır.

00:07.500 --> 00:13.650
unity projeleri, unity içindeki mono davranışların rolü ve fizik için davranış kodu.

00:13.830 --> 00:15.660
Peki Unity nasıl yapılandırılmış?

00:15.840 --> 00:18.330
En üst seviyeden Birlik Yapısı.

00:18.330 --> 00:21.870
Sahnenin içinde görülen bir projeniz var.

00:21.870 --> 00:26.990
Bir veya daha fazla oyun nesnesi vardır ve her oyun nesnesinde C-sharp bileşenleri bulunur.

00:27.000 --> 00:30.330
C-sharp bileşenleri bir veri tipi unity motoruna sahiptir.

00:30.350 --> 00:31.260
Benim davranışım.

00:31.260 --> 00:36.120
Bu derste bileşenlerden ve davranışlardan aynı şey olarak bahsedeceğim.

00:36.120 --> 00:41.460
Resimde görüldüğü gibi, merkezde bir oyun nesnemiz ve etrafında birçok olası bileşen var ve

00:41.460 --> 00:43.770
bu oyun nesneleri oyun dünyasının içine sığar.

00:44.190 --> 00:49.290
Davranışları anlamak, birlik davranışlarını anlamak için kritik öneme sahiptir.

00:49.290 --> 00:56.010
Kod sınıfınızı bir oyun nesnesine eklemek için, mono davranışının çoğunu genişletmeniz gerekir, ancak

00:56.010 --> 00:58.440
kodunuz mono davranışlarından genişleyecektir.

00:58.440 --> 01:03.840
Mono davranışları, öngörülebilir bir yürütme sırasına sahip güçlü yerleşik işlevlerle birlikte gelir.

01:03.840 --> 01:08.400
Mono davranışların bu yürütme sırası oyun geliştirmede çok önemlidir.

01:08.400 --> 01:09.720
Çalışma zamanı hakkında konuşacağız.

01:09.720 --> 01:11.160
Bu yürütme sırası.

01:11.160 --> 01:16.620
Sağdaki resimde oyununuz oyuncularınız için çalışırken, çok sayıda

01:16.620 --> 01:18.990
farklı yürütme sırası işlevleri.

01:19.020 --> 01:20.340
Biraz yakınlaştıralım.

01:20.490 --> 01:26.400
Üst yarıda, ana bölümleri, başlatmayı, fiziği, giriş olaylarını ve daha fazlasını görebiliriz.

01:26.430 --> 01:32.400
Bunların her biri unity'nin bizim için çağıracağı ve isteğe bağlı olarak dinleyebileceğimiz bir işlevdir.

01:32.400 --> 01:34.710
Bizim için anahtar olanlar uyanık.

01:34.710 --> 01:41.100
Sabit güncelleme tetikleyici ve çarpışma olaylarını başlatın ve aşağıya bakarsak güncelleyin.

01:41.100 --> 01:42.690
Diyagram devam ediyor.

01:42.690 --> 01:46.440
Sahne oluşturma, duraklatma ve hizmet dışı bırakma var.

01:46.440 --> 01:49.260
Burada odak noktamız yok etmektir.

01:49.290 --> 01:55.320
Önem verdiğimiz Monte davranış fonksiyonlarının birlikte yürütülme sırası burada listelenmiştir awake ve

01:55.320 --> 01:59.100
başlangıç bir kez ve projenin hayatının başlarında orta ve kalın olarak adlandırılır.

01:59.100 --> 02:01.590
Fizikle ilgili birkaç anahtarımız var.

02:01.590 --> 02:04.470
Sabit güncelleme fizik tik başına bir kez çağrılır.

02:04.500 --> 02:09.600
Bunun kare hızından bağımsız olması önemlidir, böylece tetikleme sırasında güvenilir sonuçlar elde ederiz

02:09.600 --> 02:11.640
ve çarpışma olaylarında.

02:11.640 --> 02:13.440
Bunlar hakkında daha sonra konuşacağız.

02:13.440 --> 02:19.440
Ancak orada, fizik dünyamızdaki nesneler üst üste geldiğinde, bu güncellemeyi nasıl dinleyebileceğimiz

02:19.440 --> 02:20.640
kare başına bir kez çağrılır.

02:20.640 --> 02:25.110
Bu, fizik dışındaki kodlarımızın çoğu için ana iş gücü işlevidir.

02:25.110 --> 02:30.390
Yok etme kodu, oyun nesnesi silindiğinde veya oyun dünyası sona erdiğinde çağrılır.

02:31.910 --> 02:35.870
Burada kodlayabileceğimiz örnek bir şablon dosyası oluşturdum.

02:35.870 --> 02:41.060
Şimdi bu C kodu ve bunu unity'de bildirebiliriz ve iyi çalışır.

02:41.060 --> 02:42.680
Burada pek bir şey olmuyor.

02:42.680 --> 02:45.200
Sadece boş fonksiyon bildirimleri var.

02:45.200 --> 02:48.770
Ama size sadece imzayı, bunların nasıl kurulduğunu göstermek istiyorum.

02:48.860 --> 02:54.680
Şunu da belirtmek gerekir ki, tüm bunları beyan etmeniz gerekmez, sadece beklemek ve

02:54.680 --> 02:55.190
Güncelle.

02:55.190 --> 02:56.530
Bunları da açıklayın.

02:56.540 --> 02:59.060
Ancak başlamanız için size burada eksiksiz bir şablon gösteriyorum.

03:00.140 --> 03:02.950
Bu şablonu çalışırken görebilmek için bir demoya bakalım.

03:02.960 --> 03:08.900
Davranış şablonunu çalıştıracağız, sahneyi göreceğiz, bir hata ayıklama günlüğü ifadesi ekleyeceğiz, böylece

03:08.900 --> 03:14.300
Kodun hangi kısımlarına ulaştığımızı görebiliyoruz ve bir çarpışma olayında bir tetikleyiciyi test edeceğiz.

03:15.540 --> 03:17.970
Devam edelim ve varlıkları açalım.

03:17.970 --> 03:22.050
Birinci bölüm, Davranış şablonunun beşinci videosu.

03:22.050 --> 03:22.710
Bu sahnede.

03:22.710 --> 03:25.220
Yerde yüzen bir küpümüz var.

03:25.230 --> 03:28.170
Box Collider ve rijit gövdeye ek olarak.

03:28.170 --> 03:31.000
Monarch Behavior şablon komut dosyasına sahip olduğumuzu görebiliriz.

03:31.020 --> 03:32.220
Devam edelim ve buna tıklayalım.

03:32.490 --> 03:34.500
Bu, onu favori kod düzenleyicinizde açacaktır.

03:34.860 --> 03:38.910
Şimdi, burada üstten bakıldığında, daha önce tartıştığımız tüm farklı yöntemleri görebiliriz.

03:38.910 --> 03:45.480
Uyanıklığın içinde, bir hata ayıklama günlüğü deyimimiz var ve yine çarpışma girişinin içinde ve

03:45.480 --> 03:51.480
destroy debug log, unity içindeki bir pencereye sadece şunu onaylamak için küçük bir metin gönderecektir

03:51.480 --> 03:53.040
Kodda o noktaya ulaştık.

03:53.040 --> 03:54.600
Devam edelim ve sahneyi çalıştıralım.

03:56.470 --> 04:01.240
Aşağıda konsol penceresinde, uyanma ve çarpışmanın gerçekleştiğini görebiliriz.

04:01.240 --> 04:06.010
Ve sonra sahneyi durdurduğumda ve tüm nesneler temizlendiğinde, yok etmeyi görebiliriz.

04:06.080 --> 04:08.070
Çarpışmanın girdiğini görebilirsiniz.

04:08.080 --> 04:10.750
Küpün zemine çarptığı yazıyor.

04:10.750 --> 04:14.680
Ve bu bize sadece buradaki Cube ismini, buradaki zemin ismine çarpmış olarak gösteriyor.

04:14.680 --> 04:17.410
Bu, fizik kullanarak yapabileceğiniz türden bir tespittir.

04:18.520 --> 04:20.130
Zaman genişlemesi hakkında konuşalım.

04:20.140 --> 04:20.560
Şimdi.

04:20.560 --> 04:26.710
Matrix gibi bir filmde gördüğünüz yavaşlatma efekti gibi bir şey oluşturmak istiyorsanız veya

04:26.710 --> 04:33.250
Max Payne gibi, daha dramatik bir anı simüle etmek için tüm dünyanın yavaşladığı bir oyun.

04:33.280 --> 04:35.300
Bunu fizikte simüle edebilirsiniz.

04:35.320 --> 04:42.070
Yaptığımız şey, fiziği, otomatik simülasyonu yanlışa çevirmek ve ardından fiziği kendimiz manuel olarak simüle etmektir.

04:42.100 --> 04:43.120
Anahtar bu.

04:43.150 --> 04:48.060
Fizik simülasyonunu çağırmadan önce belirli bir süre bekliyoruz.

04:48.070 --> 04:52.540
Şimdi bizim projelerimizde ve muhtemelen sizin projelerinizde bunu yapmanıza gerek yok.

04:52.720 --> 04:57.400
Bunu tipik olarak anlayabilmeniz için zaman genişlemesi hakkında biraz konuşmak istiyorum

04:57.400 --> 05:04.450
birlik, Dünya'nın yerçekimi için gerçekçi bir şekilde çalışır ve fiziği manuel olarak simüle etmemize gerek yoktur.

05:04.450 --> 05:06.310
Ama ihtiyacınız olursa bunu nasıl yapabileceğinizi aşağıda bulabilirsiniz.

05:08.790 --> 05:09.830
Bir sonraki bölümde.

05:09.840 --> 05:12.150
Unity iki D Physics bileşeni.
