WEBVTT

00:01.540 --> 00:03.510
Previsão da trajetória física.

00:03.520 --> 00:08.050
Neste vídeo, veremos como podemos prever o movimento da física antes que ele aconteça.

00:08.050 --> 00:13.090
Aprenderemos como isso pode ajudar os nossos jogos e os nossos jogadores e, em seguida, abriremos o unity e veremos

00:13.090 --> 00:16.270
um exemplo do mundo real de previsão de trajetória.

00:16.270 --> 00:18.100
Então, o que é a previsão física?

00:18.100 --> 00:24.400
A previsão é o cálculo das propriedades futuras, por exemplo, a posição ou a rotação de objetos dentro de

00:24.400 --> 00:25.480
seu sistema de física.

00:25.750 --> 00:33.280
Alguns exemplos disso são a visualização que mostra uma linha ou seta para sugerir ao usuário onde a bala

00:33.280 --> 00:34.240
irá.

00:34.240 --> 00:40.900
Ou eu faço esta previsão para dar um input mais relevante aos sistemas de inteligência do nosso jogo.

00:41.970 --> 00:45.870
Vamos pegar um exemplo do nosso jogo Section five Upset Ducks.

00:45.870 --> 00:50.220
Atualmente, ele está completo e pode ser jogado, mas não tem física preditiva.

00:50.220 --> 00:57.330
Um exemplo de visualização seria calcular o caminho do asteroide e exibir uma seta como visualização.

00:57.330 --> 01:02.220
Isso aumentaria o feedback para o usuário e daria a ele uma melhor conexão com o jogo.

01:02.220 --> 01:03.840
Uma sensação de jogo mais positiva.

01:03.840 --> 01:09.330
O resultado seria ajudar nossos usuários a fazer escolhas mais inteligentes antes mesmo de liberar o asteroide.

01:09.330 --> 01:11.400
Eles saberiam mais ou menos para onde ele está indo.

01:11.430 --> 01:13.410
Outro exemplo seria a IA.

01:13.440 --> 01:16.500
Podemos calcular a trajetória do asteroide para o olho.

01:16.530 --> 01:20.520
Poderíamos fazer com que os inimigos reagissem com medo quando apontássemos na direção deles.

01:20.520 --> 01:24.570
Ou poderíamos ter inimigos que saltam do caminho para evitar as colisões.

01:24.810 --> 01:26.450
Ou, é claro, poderíamos fazer as duas coisas.

01:26.460 --> 01:29.820
Poderíamos ter visualização e IA atualizada.

01:30.450 --> 01:32.190
Então, como podemos prever a física?

01:32.700 --> 01:37.200
Criamos uma cena primária e configuramos um objeto com algumas forças físicas.

01:37.200 --> 01:40.450
Em seguida, criamos uma cena física invisível secundária.

01:40.470 --> 01:47.940
Nela, podemos adicionar bolas marcadoras e, para cada uma das bolas, podemos simular o tempo Delta com um Delta exclusivo

01:47.940 --> 01:52.860
O tempo delta passa pelo arco de deslocamento em que o objeto viajaria.

01:53.430 --> 01:54.790
Vamos dar uma olhada em uma demonstração.

01:54.810 --> 01:56.860
Vamos dar uma olhada na previsão de trajetória.

01:56.880 --> 01:58.080
Vamos reproduzir a cena.

01:58.080 --> 02:03.750
Visualizará o inspetor do objeto de jogo Cube que salta, atualizará sua força e visualizará a previsão,

02:03.750 --> 02:05.160
e inspecionará o código.

02:06.330 --> 02:06.570
Muito bem.

02:06.570 --> 02:11.800
Aqui estamos dentro da unidade, saltando para a previsão de trajetória.

02:11.820 --> 02:14.700
Agora, neste projeto, o que eu tenho configurado é.

02:15.660 --> 02:18.050
Um cubo que tem um script nele.

02:18.060 --> 02:25.940
E o que isso faz é ilustrar para onde se dirige a força física que está prestes a ser aplicada.

02:25.950 --> 02:31.970
E você pode ver esse arco de marcadores que está aqui na frente do cubo.

02:31.980 --> 02:36.810
E o que posso fazer aqui é que esta é a força física que será aplicada.

02:36.810 --> 02:41.550
Utilizo esse mesmo valor para mostrar para onde ele se deslocará.

02:41.940 --> 02:46.520
Agora, uma coisa, enquanto eu estava trabalhando nisso, isso é relativamente novo na unidade.

02:46.530 --> 02:53.610
É um recurso público, mas ainda assim, eu não o tinha usado em produção antes e fiquei desapontado

02:53.610 --> 02:55.200
com a velocidade disso.

02:55.200 --> 03:01.440
Na verdade, não é tão suave e poderia haver algumas otimizações, mas certamente funciona

03:01.440 --> 03:02.310
e funciona bem.

03:02.310 --> 03:06.900
Assim, consigo mover as forças e tenho alguns botões aqui que seriam configurados,

03:06.900 --> 03:10.250
provavelmente simulando a entrada do usuário de alguma forma para se mover.

03:10.260 --> 03:15.450
Vou usar o force e você pode ver que ele salta para lá e segue a linha perfeitamente.

03:15.450 --> 03:21.150
Veja, eu tenho alguns controles deslizantes de previsão aqui para que possamos fazer mais ou menos disso.

03:22.520 --> 03:25.820
Mais ou menos desses marcadores no arco.

03:26.360 --> 03:29.540
Então vamos dar uma olhada se eu entrar no código aqui.

03:30.590 --> 03:31.910
Vamos dar uma olhada nas coisas importantes.

03:31.910 --> 03:36.240
Portanto, as propriedades serializadas que acabamos de ver estão lá no início.

03:36.260 --> 03:41.480
O que estou fazendo é criar novos parâmetros de cena e uma nova cena.

03:41.750 --> 03:44.440
Esta é de um tipo chamado física local.

03:44.450 --> 03:50.600
Portanto, estou criando uma nova cena que será executada de forma transparente ao lado da nossa cena principal.

03:51.080 --> 03:53.000
Então eu faço isso no início.

03:53.510 --> 03:56.750
Depois, aqui embaixo, no.

03:58.410 --> 03:59.640
Na previsão.

04:03.690 --> 04:05.200
Eu vejo aqui.

04:05.210 --> 04:08.330
Então, o que realmente está acontecendo na previsão?

04:09.230 --> 04:11.840
Como estou chamando isso de marcadores de uso.

04:12.170 --> 04:14.570
Tenho algumas iterações de tempo configuradas.

04:14.570 --> 04:16.880
Então, aqui está a maior parte do trabalho, certo?

04:17.090 --> 04:18.210
Há duas etapas.

04:18.230 --> 04:23.960
Primeiro, eu reconstruo os marcadores, então, periodicamente, quando eu atualizo o inspetor ajustando alguns dos

04:23.960 --> 04:25.610
valores, eu reconstruo os marcadores.

04:25.640 --> 04:29.690
Novamente, isso está regenerando os objetos do jogo de bola do marcador.

04:30.200 --> 04:33.580
E o que estou fazendo é apenas um looping e criando um número suficiente deles.

04:33.590 --> 04:41.060
Agora que já temos um número suficiente deles, observe aqui na linha 151 que estou movendo esses objetos do jogo para

04:41.060 --> 04:46.070
para a outra cena, para a cena de previsão que criamos, e também estou lhes dando um nome que

04:46.070 --> 04:47.660
apenas me ajuda no inspetor.

04:47.750 --> 04:51.590
Assim, depois de reconstruir os marcadores, posso de fato fazer a previsão.

04:51.590 --> 04:57.980
Então, pego o mesmo conjunto de iterações de previsão e faço um loop por elas.

04:57.980 --> 05:04.700
E nesse loop for, o que estou fazendo é, para cada previsão que estou fazendo, simular a cena

05:04.700 --> 05:05.300
física.

05:05.300 --> 05:06.130
Um tique.

05:06.820 --> 05:12.060
Portanto, se eu não tivesse chamado manualmente o simulate, não haveria nenhuma simulação de física aqui.

05:12.070 --> 05:19.210
Portanto, o que posso fazer é percorrer o loop e marcar uma vez e depois mover um dos marcadores para esse ponto.

05:19.210 --> 05:25.440
Em seguida, faço o tique novamente e movo o próximo marcador para aquele ponto e continuo até fazer o arco inteiro.

05:25.450 --> 05:26.620
E é isso.

05:27.460 --> 05:29.170
O processo funciona muito bem.

05:29.170 --> 05:31.140
Ele está me dando exatamente o resultado que eu quero.

05:31.150 --> 05:37.690
Como mencionei, ele não funciona tão rápido em uma espécie de taxa de quadros, mas ainda assim funciona muito bem.

05:38.110 --> 05:38.750
É isso aí.

05:38.770 --> 05:39.730
Muito obrigado.

05:41.950 --> 05:47.470
No próximo vídeo, daremos uma olhada na pilha de tecnologia orientada a dados ou dots para a física da unidade.
