WEBVTT

00:01.650 --> 00:06.010
Pilha de tecnologia orientada a dados ou pontos para física de unidade.

00:06.030 --> 00:11.350
Neste vídeo, abordaremos o que é o Unity dots e quais são os três principais recursos.

00:11.370 --> 00:15.750
Também veremos como os dots afetarão o futuro da física do Unity.

00:16.470 --> 00:17.820
Então, o que são os dots?

00:18.630 --> 00:22.890
Dance é um projeto da unity que promete desempenho por padrão.

00:22.920 --> 00:30.360
Ele tira proveito dos processadores de múltiplos núcleos atuais e do novo sistema de alto desempenho orientado a dados da Unity

00:30.360 --> 00:31.410
orientado a dados.

00:31.440 --> 00:37.260
Seus jogos serão executados mais rapidamente e seu código será mais fácil de ler e reutilizar em outros projetos.

00:37.290 --> 00:42.030
Dê uma olhada nesta captura de tela da demonstração gratuita do megacity da Unity Technologies.

00:42.030 --> 00:46.380
É uma cena realmente complexa com muita coisa acontecendo na demonstração do megacity.

00:46.380 --> 00:52.420
Ela apresenta quatro milhões e meio de renderizações de malha e mais de 200.000 objetos de construção exclusivos.

00:52.440 --> 00:57.400
É tão complexo e não seria possível sem pontos para realizar isso.

00:57.420 --> 01:00.180
A Unity está reconstruindo o núcleo da ferramenta.

01:00.180 --> 01:05.040
Está reconstruindo cada um dos principais sistemas com dots multithreaded de alto desempenho.

01:05.040 --> 01:11.970
As características desse sistema são o sistema de trabalho C-sharp para executar código multithread, o componente de entidade

01:11.970 --> 01:18.720
para escrever código de alto desempenho e, finalmente, o compilador burst para produzir código altamente otimizado

01:18.720 --> 01:19.710
código nativo altamente otimizado.

01:20.520 --> 01:22.290
Então, o que é a física de pontos.

01:22.590 --> 01:27.270
No futuro, a física do Dot será renomeada para apenas física da unidade.

01:27.270 --> 01:34.500
A filosofia é determinística completa, dinâmica de corpo rígido e sistema de consulta espacial escrito em alta resolução.

01:34.500 --> 01:35.070
desempenho.

01:35.070 --> 01:41.160
C-sharp Será uma unidade sem estado A física renuncia a qualquer cache em favor da simplicidade.

01:41.160 --> 01:46.140
É modular, está desacoplado de outros sistemas e incentiva sua reutilização.

01:46.380 --> 01:47.550
Tem bom desempenho.

01:47.550 --> 01:52.830
Atenderá ou excederá o desempenho de qualquer mecanismo de física disponível comercialmente.

01:52.830 --> 01:54.570
Então, o que isso significa para nós?

01:54.570 --> 01:59.970
Os princípios que abordamos neste curso são relevantes para a física de hoje, bem como para o futuro, com

01:59.970 --> 02:06.090
A versão da física 2D e 3D atual que abordamos continuará existindo.

02:06.090 --> 02:11.220
O Unity Physics será uma opção adicional para melhorias de velocidade extremamente rápidas.

02:11.930 --> 02:12.530
Vamos ver.

02:12.560 --> 02:12.880
Pontos.

02:12.890 --> 02:14.030
Física em ação.

02:14.300 --> 02:16.670
As etapas a seguir já foram executadas para você.

02:16.670 --> 02:17.750
Mas aqui estão os passos.

02:17.750 --> 02:21.800
Se você quiser criar um projeto do zero, primeiro dê uma olhada neste repositório.

02:21.830 --> 02:27.160
Em seguida, você abre o editor mais recente do Unity e abre o Unity Physics Examples Project.

02:27.170 --> 02:30.950
Em seguida, temos de nos certificar de que temos os pacotes certos e atualizá-los.

02:30.950 --> 02:38.000
Portanto, abra o gerenciador de pacotes, clique em Advanced (Avançado), clique em Show preview packages (Mostrar pacotes de visualização) e verifique se você tem os pacotes mais recentes.

02:38.000 --> 02:42.020
versão dos pacotes necessários, incluindo o Unity Physics.

02:43.210 --> 02:44.720
Vamos dar uma olhada em uma demonstração.

02:44.740 --> 02:50.350
Observe que, em comparação com todas as outras demonstrações deste curso, esta está localizada em um projeto separado.

02:50.350 --> 02:52.960
Isso se deve ao fato de ela ter aspectos de configuração exclusivos.

02:52.960 --> 02:55.930
Reproduzir a cena e inspecionar a cena juntos.

02:55.930 --> 02:59.950
Veremos que a física, a forma e o corpo da física são novos componentes.

02:59.950 --> 03:06.730
Verificaremos meu código de controlador de cena de reinicialização e veremos como tive de ajustá-lo especificamente para os pontos.

03:06.730 --> 03:10.000
Como bônus, adicionei algumas chaves inglesas à cena.

03:10.000 --> 03:14.170
Poderemos adicionar muitos objetos de física e ver como o desempenho funciona.

03:14.620 --> 03:16.830
Muito bem, vamos abrir o nosso projeto Dots aqui.

03:16.840 --> 03:21.710
Novamente, observe que este é um projeto diferente do que usamos no restante do curso.

03:21.730 --> 03:24.370
Isso se deve ao fato de que ele precisa de uma configuração específica.

03:24.930 --> 03:32.070
Mas aqui no exemplo do Unity Physics Dots, executaremos a cena e veremos uma configuração bastante semelhante.

03:32.160 --> 03:36.810
Temos uma pilha de cubos, algo parecido com as demonstrações que usamos anteriormente.

03:36.840 --> 03:41.910
Posso até mesmo apertar a barra de espaço e recarregar a cena, como já fizemos antes.

03:42.180 --> 03:46.950
E se olharmos para a cena, notaremos que não temos mais cubos aqui.

03:47.370 --> 03:53.160
Há um aspecto temporário, acho que único, dos pontos, pois quando a cena começa, certos objetos

03:53.160 --> 03:54.130
desaparecerão.

03:54.150 --> 03:55.200
Não é um bug.

03:55.200 --> 04:01.620
É apenas uma maneira de a otimização funcionar e, no futuro, isso será representado na hierarquia.

04:02.300 --> 04:08.000
Portanto, se olharmos para um dos cubos, em vez de vermos o colisor familiar, veremos a forma física.

04:08.150 --> 04:12.560
E em vez de ver o corpo rígido familiar, vemos o corpo físico.

04:12.560 --> 04:14.930
Portanto, há um esquema de nomenclatura diferente aqui.

04:15.080 --> 04:20.900
Mas muitos dos valores semelhantes que esperávamos ver, incluindo a possibilidade de ter algo como um corpo físico

04:20.900 --> 04:23.030
material para saltar --, etc..

04:23.420 --> 04:29.120
Outra coisa que gostaria de mostrar é que consegui reiniciar a cena, mas tive de acrescentar um pouco de

04:29.120 --> 04:31.820
algo ao código aqui embaixo.

04:31.820 --> 04:38.570
Além de recarregar a cena, o que fiz antes aqui para os pontos, tenho de reiniciar o sistema

04:38.570 --> 04:40.970
destruindo o que chamamos de entidades na cena.

04:40.970 --> 04:46.700
Então, definitivamente, tenho que pensar um pouco mais quando tive que fazer alguns passos simples aqui, mas funciona

04:46.700 --> 04:47.180
muito bem.

04:48.250 --> 04:54.160
Por fim, quero mostrar que tenho um patrocinador configurado aqui que vai gerar 3.000 objetos diferentes em

04:54.160 --> 04:54.760
no mundo.

04:55.330 --> 04:57.190
Vamos ver o desempenho dele.

04:57.520 --> 05:01.780
Vou mostrar apenas a visualização do jogo aqui e dar uma olhada.

05:02.230 --> 05:04.840
Também vou ativar o contador de taxa de quadros.

05:05.170 --> 05:11.830
Você pode ver que estamos em cerca de seis quadros, dez quadros por segundo quando a cena começa e depois

05:11.830 --> 05:13.660
ganha rapidamente muita velocidade.

05:13.690 --> 05:17.410
Acho que é a instanciação de itens no mundo que é cara.

05:17.410 --> 05:20.620
Mas a operação física funciona muito bem.

05:20.650 --> 05:25.900
Aqui temos milhares de objetos, mais do que podemos ver na tela, e ainda consigo interagir

05:25.900 --> 05:27.610
com eles com uma taxa de quadros muito boa.

05:27.640 --> 05:32.980
Acho que isso continuará a melhorar à medida que o projeto amadurecer, mas já estávamos vendo uma taxa de quadros muito boa

05:32.980 --> 05:33.880
desempenho.

05:34.150 --> 05:35.040
Então é isso.

05:35.050 --> 05:37.210
Essa é uma visão geral rápida do Unity Dots.

05:38.290 --> 05:39.830
Este é o fim do curso.

05:39.850 --> 05:41.380
Muito obrigado.
