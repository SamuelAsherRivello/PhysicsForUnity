WEBVTT

00:01.890 --> 00:07.500
Física, física do ciclo de vida, simulação e dilatação do tempo neste vídeo cobrirá a estrutura de

00:07.500 --> 00:13.650
projetos do unity, o papel dos comportamentos mono dentro do unity e o código de comportamento para a física.

00:13.830 --> 00:15.660
Então, como o Unity é estruturado?

00:15.840 --> 00:18.330
Estrutura do Unity no nível mais alto.

00:18.330 --> 00:21.870
Você tem um projeto com vistas dentro da cena.

00:21.870 --> 00:26.990
Há um ou mais objetos de jogo, e em cada objeto de jogo você tem componentes C-sharp.

00:27.000 --> 00:30.330
Os componentes C-sharp são de um tipo de dados unity engine.

00:30.350 --> 00:31.260
Meu comportamento.

00:31.260 --> 00:36.120
Neste curso, vou me referir a componentes e comportamentos como a mesma coisa.

00:36.120 --> 00:41.460
Como mostra a imagem, temos um objeto de jogo no centro com muitos componentes possíveis ao seu redor e

00:41.460 --> 00:43.770
esses objetos de jogo se encaixam no mundo do jogo.

00:44.190 --> 00:49.290
Entender os comportamentos é fundamental para entender os comportamentos da unidade.

00:49.290 --> 00:56.010
Para anexar sua classe de código a um objeto de jogo, você tem que estender o comportamento mono em grande parte, mas não em tudo

00:56.010 --> 00:58.440
seu código será estendido a partir de comportamentos mono.

00:58.440 --> 01:03.840
Os mono behaviors vêm com funções poderosas incorporadas com uma ordem de execução previsível.

01:03.840 --> 01:08.400
Essa ordem de execução dos mono behaviors é muito importante no desenvolvimento de jogos.

01:08.400 --> 01:09.720
Vamos falar sobre o tempo de execução.

01:09.720 --> 01:11.160
Essa é a ordem de execução.

01:11.160 --> 01:16.620
Enquanto o jogo está sendo executado para os jogadores na imagem à direita, você pode ver que há muitos, muitos

01:16.620 --> 01:18.990
funções de ordem de execução diferentes.

01:19.020 --> 01:20.340
Vamos aumentar um pouco o zoom.

01:20.490 --> 01:26.400
Na metade superior, podemos ver as principais seções, inicialização, física, eventos de entrada e muito mais.

01:26.430 --> 01:32.400
Cada uma dessas seções é uma função que o unity chamará para nós e que podemos, opcionalmente, escutar.

01:32.400 --> 01:34.710
Os principais para nós estão acordados.

01:34.710 --> 01:41.100
Inicie o gatilho de atualização fixa e os eventos de colisão e atualize se olharmos abaixo.

01:41.100 --> 01:42.690
O diagrama continua.

01:42.690 --> 01:46.440
Há renderização de cena, pausa e desativação.

01:46.440 --> 01:49.260
Aqui o nosso foco está na destruição.

01:49.290 --> 01:55.320
Juntos, a ordem de execução das funções de comportamento do Monte que nos interessam estão listadas aqui, acordadas e

01:55.320 --> 01:59.100
start são chamadas uma vez e no início da vida do projeto, no meio e em negrito.

01:59.100 --> 02:01.590
Temos várias chaves relacionadas à física.

02:01.590 --> 02:04.470
A atualização fixa é chamada uma vez por tique de física.

02:04.500 --> 02:09.600
É importante que isso seja independente da taxa de quadros, para que possamos obter resultados confiáveis no acionamento

02:09.600 --> 02:11.640
e em eventos de colisão.

02:11.640 --> 02:13.440
Falaremos sobre isso mais tarde.

02:13.440 --> 02:19.440
Mas aí, quando os objetos do mundo da física estão sobrepostos, a forma de ouvir essa atualização é

02:19.440 --> 02:20.640
chamada uma vez por quadro.

02:20.640 --> 02:25.110
Essa é a principal função de trabalho para a maior parte do nosso código, exceto a física.

02:25.110 --> 02:30.390
O código on destroy é chamado quando o objeto do jogo é excluído ou quando o mundo do jogo termina.

02:31.910 --> 02:35.870
Aqui está um exemplo de arquivo de modelo que criei para o qual podemos codificar.

02:35.870 --> 02:41.060
Este é o código C, e poderíamos declará-lo no unity e ele funcionaria bem.

02:41.060 --> 02:42.680
Não há muita coisa acontecendo aqui.

02:42.680 --> 02:45.200
Há apenas declarações de funções vazias.

02:45.200 --> 02:48.770
Mas eu só quero lhe mostrar a assinatura, como elas são configuradas.

02:48.860 --> 02:54.680
E é importante notar que você não precisaria declarar tudo isso apenas se quiser esperar e

02:54.680 --> 02:55.190
atualizar.

02:55.190 --> 02:56.530
Basta declará-los também.

02:56.540 --> 02:59.060
Mas estou lhe mostrando um modelo completo aqui para começar.

03:00.140 --> 03:02.950
Vamos dar uma olhada em uma demonstração para que possamos ver esse modelo em ação.

03:02.960 --> 03:08.900
Executaremos o modelo de comportamento, veremos a cena, adicionaremos uma declaração de registro de depuração para que possamos

03:08.900 --> 03:14.300
possamos ver a que partes do código chegamos e testaremos um acionador em um evento de colisão.

03:15.540 --> 03:17.970
Vamos prosseguir e abrir os ativos.

03:17.970 --> 03:22.050
Seção um, vídeo cinco do modelo Behavior.

03:22.050 --> 03:22.710
Nesta cena.

03:22.710 --> 03:25.220
Temos um cubo flutuando no chão.

03:25.230 --> 03:28.170
Além do Box Collider e do corpo rígido.

03:28.170 --> 03:31.000
Podemos ver que temos o script de modelo Monarch Behavior.

03:31.020 --> 03:32.220
Vamos clicar nele.

03:32.490 --> 03:34.500
Isso o abrirá em seu editor de código favorito.

03:34.860 --> 03:38.910
Agora, aqui na parte superior, podemos ver todos os métodos diferentes que já discutimos aqui.

03:38.910 --> 03:45.480
Dentro do awake, temos uma declaração de registro de depuração e, novamente, dentro do on collision enter e dentro do

03:45.480 --> 03:51.480
o registro de depuração de destruição enviará um pouco de texto para uma janela dentro da unidade apenas para confirmar que

03:51.480 --> 03:53.040
chegamos a esse ponto no código.

03:53.040 --> 03:54.600
Vamos prosseguir e executar a cena.

03:56.470 --> 04:01.240
Aqui embaixo, na janela do console, podemos ver que o despertar e a colisão aconteceram.

04:01.240 --> 04:06.010
E depois que parei a cena e todos os objetos foram limpos, podemos ver a destruição.

04:06.080 --> 04:08.070
Você pode ver que a colisão entrou.

04:08.080 --> 04:10.750
Ele diz que o cubo foi atingido pelo chão.

04:10.750 --> 04:14.680
E isso está apenas nos mostrando o nome Cube aqui como atingido pelo nome floor aqui.

04:14.680 --> 04:17.410
Esse é o tipo de detecção que você pode fazer usando a física.

04:18.520 --> 04:20.130
Vamos falar sobre a dilatação do tempo.

04:20.140 --> 04:20.560
Agora.

04:20.560 --> 04:26.710
Se você quiser criar algo como um efeito de desaceleração que você vê em um filme como Matrix ou em

04:26.710 --> 04:33.250
um jogo como Max Payne, em que o mundo inteiro está desacelerando para simular um momento mais dramático.

04:33.280 --> 04:35.300
Você pode simular isso na física.

04:35.320 --> 04:42.070
O que fazemos é colocar a física, a simulação automática como falsa e, então, nós mesmos simulamos a física manualmente.

04:42.100 --> 04:43.120
Esta é a chave.

04:43.150 --> 04:48.060
Estamos esperando por um determinado período de tempo antes de nos darmos ao trabalho de chamar a simulação da física.

04:48.070 --> 04:52.540
Agora, em nossos projetos e provavelmente em seus projetos, você não precisa fazer isso.

04:52.720 --> 04:57.400
Só quero falar um pouco sobre a dilatação do tempo para que você entenda que normalmente

04:57.400 --> 05:04.450
a unidade funciona de forma realista para a gravidade da Terra e não precisamos simular a física manualmente.

05:04.450 --> 05:06.310
Mas aqui está como você pode fazer isso se precisar.

05:08.790 --> 05:09.830
Na próxima seção.

05:09.840 --> 05:12.150
Unity dois componentes D Physics.
