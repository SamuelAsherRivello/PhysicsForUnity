WEBVTT

00:00.650 --> 00:06.320
Depuração de física, depuração de física de raios de desenho, janela do depurador e janela do profiler.

00:06.410 --> 00:11.660
Neste vídeo, abordaremos o que é depuração e quais são os desafios da depuração de física.

00:11.690 --> 00:16.700
Examinaremos as ferramentas que temos para nos ajudar e, em seguida, abriremos a unidade e abordaremos alguns problemas comuns.

00:16.700 --> 00:17.490
comuns.

00:17.510 --> 00:18.950
Então, o que é depuração?

00:18.980 --> 00:21.170
Um bug é uma falha de erro.

00:21.170 --> 00:23.860
Falha ou defeito na programação de computadores.

00:23.870 --> 00:28.070
Depuração é o processo de identificar e remover esses erros do software.

00:28.070 --> 00:31.670
Então, quais são os desafios da depuração da física especificamente?

00:31.670 --> 00:38.200
Bem, a física é um sistema altamente complexo e que consome muitos recursos, portanto, a otimização é importante.

00:38.210 --> 00:45.470
A física inclui muitos ajustes de configuração, componentes, propriedades e muito mais, além de suas próprias configurações personalizadas.

00:45.470 --> 00:48.860
O Physics inclui muitas configurações de configuração, componentes, propriedades e muito mais, bem como suas próprias propriedades de código personalizadas, manipuladores de eventos e muito mais.

00:48.860 --> 00:50.480
Isso é muito complexo.

00:50.480 --> 00:55.760
Agora, felizmente, o unity automaticamente faz muito por você com o unity physics, isso é bom.

00:55.760 --> 01:00.200
Mas devido à complexidade do sistema, há muita coisa que pode dar errado e isso é ruim.

01:00.200 --> 01:02.300
Então, quais são as ferramentas para depuração geral?

01:02.300 --> 01:05.120
A janela do console do Unity é muito importante.

01:05.120 --> 01:09.700
Ela mostra os erros, avisos e outras mensagens geradas pela unidade.

01:09.710 --> 01:15.290
Também mostrará as mensagens personalizadas que você gerar com o registro de depuração para abri-lo.

01:15.290 --> 01:16.940
Use a janela unity.

01:16.940 --> 01:20.870
O uso geral da janela do console está apenas detectando.

01:20.870 --> 01:22.760
O unity alcançou essa linha de código?

01:22.760 --> 01:29.000
E você também pode dizer qual é o valor específico de uma propriedade ou de uma variável que você pode ver no código

01:29.000 --> 01:36.710
snippet debug log Hello world passa essa mensagem para o console breakpoints pausar o jogo em um

01:36.710 --> 01:41.660
momento específico no código e permite que você inspecione todas as variáveis que estão na memória.

01:41.660 --> 01:47.360
A configuração é anexar a unidade do editor de código e definir um ponto de interrupção clicando na margem.

01:47.360 --> 01:51.650
Você executa o unity e o reproduz normalmente, esperando que o unity faça uma pausa.

01:51.650 --> 01:54.890
Quando o unity faz uma pausa, ele informa que você está em um dos seus pontos de interrupção.

01:54.890 --> 02:01.160
Inspecione o editor de código e você pode continuar ou interromper os usos da sessão de depuração aqui ou no Unity

02:01.160 --> 02:02.510
chegou a essa linha de código?

02:02.510 --> 02:06.590
E quais são os valores específicos de muitas das propriedades e variáveis?

02:06.770 --> 02:08.600
Depuração personalizada e código de desenho.

02:08.600 --> 02:13.250
A API do Unity suporta o desenho de linhas e formas no editor quando e onde quisermos.

02:13.250 --> 02:17.810
Você também pode fazer isso para códigos que não sejam de física, mas aqui estão alguns exemplos que eu usei.

02:17.810 --> 02:19.970
Onde exatamente ocorreram as colisões?

02:19.970 --> 02:25.340
Onde estão os limites do meu objeto em um determinado momento e qual foi a trajetória do meu objeto ao longo do tempo?

02:25.340 --> 02:26.870
O código é bastante simples.

02:26.870 --> 02:28.250
Vamos dar uma olhada em uma demonstração.

02:28.250 --> 02:34.310
Veremos a seguinte caixa, reproduziremos a cena, inspecionaremos o código e adicionaremos nosso próprio registro de depuração

02:34.310 --> 02:38.090
para ver o funcionamento na janela do console e, em seguida, adicionaremos um ponto de interrupção.

02:38.210 --> 02:38.420
Muito bem.

02:38.420 --> 02:40.820
Vamos dar uma olhada na próxima cena aqui.

02:40.820 --> 02:42.950
Vamos dar uma olhada na caixa a seguir.

02:42.970 --> 02:48.620
E o que mais me interessa aqui é a visualização da cena, porque tenho algum código de depuração configurado.

02:48.620 --> 02:52.430
Ele vai traçar algumas diretrizes úteis, portanto, vou executar a cena.

02:53.450 --> 02:56.330
E enquanto ela está sendo executada, o cubo está caindo.

02:57.150 --> 02:59.820
Toco em d algumas vezes, vou pausar aqui.

02:59.940 --> 03:06.420
Portanto, as linhas que podemos ver aqui, verde para o contato, azul para o local onde a caixa é percorrida

03:06.420 --> 03:11.190
e branco para alguns limites de chave onde eu bati na chave.

03:11.220 --> 03:13.760
Agora, talvez você não queira tocar em uma tecla.

03:13.770 --> 03:18.000
Talvez você queira que isso aconteça com base em alguma situação programática.

03:18.000 --> 03:23.780
Mas eu só queria mostrar que isso se baseia na colisão, na posição, no deslocamento ou na entrada do usuário.

03:23.790 --> 03:26.250
Isso só é visível para nós, desenvolvedores.

03:26.250 --> 03:27.630
Não é para o usuário final.

03:27.790 --> 03:29.790
Vamos entrar e dar uma olhada no código.

03:29.790 --> 03:33.810
Você pode imaginar alguns cenários em que isso seria útil para informações de depuração.

03:34.140 --> 03:40.350
Então, antes de mais nada, quando temos uma colisão, passamos pelo contexto de colisão e desenhamos o array.

03:40.380 --> 03:42.420
É assim que obtemos essas pequenas linhas verdes.

03:43.070 --> 03:51.110
Então, sempre que toco na tecla, obtenho uma lista das posições e, a cada quadro, redesenho todas elas

03:51.110 --> 03:54.950
pequenas caixas brancas com base no funcionamento do gizmo, da gaveta e do cubo de arame.

03:54.950 --> 03:59.300
Tenho de redesenhá-las a cada quadro e depois desenhar o caminho inteiro.

03:59.300 --> 04:00.170
Muito simples.

04:00.170 --> 04:06.860
Eu simplesmente capturo a posição no início e depois, a cada atualização, faço uma depuração e desenho uma linha a partir da última posição

04:06.860 --> 04:08.120
até a posição atual.

04:08.120 --> 04:12.440
E é assim que obtenho essa longa linha azul de onde a caixa esteve em sua vida útil.

04:12.740 --> 04:13.250
É isso aí.

04:13.250 --> 04:14.030
Bastante simples.

04:14.030 --> 04:18.350
Então, quais são as ferramentas projetadas especificamente para física, depuração e unidade?

04:18.380 --> 04:23.660
Bem, em primeiro lugar, se olharmos para o corpo rígido no inspetor, podemos ver que há uma informação

04:23.660 --> 04:29.200
que podemos expandir e podemos ver muitos valores muito bons que são atualizados regularmente.

04:29.210 --> 04:30.950
Isso é muito útil para a depuração.

04:30.950 --> 04:35.170
Você pode assistir ao vivo ou pausar a qualquer momento usando o pause do Unity Editor.

04:35.180 --> 04:38.450
Observe que ele está acinzentado, portanto você não pode editar esses valores.

04:38.450 --> 04:44.390
A janela do depurador de física permite inspecionar rapidamente a geometria do colisor na sua cena e você

04:44.390 --> 04:47.210
pode traçar o perfil de alguns cenários comuns baseados em física.

04:47.210 --> 04:53.270
A janela do criador de perfil exibe estatísticas sobre a física que foi processada pelo mecanismo de física

04:53.270 --> 04:53.960
em sua cena.

04:53.960 --> 05:00.560
Essas informações podem ajudá-lo a diagnosticar e resolver problemas de desempenho ou discrepâncias inesperadas relacionadas

05:00.560 --> 05:01.550
à sua cena de física.

05:01.550 --> 05:06.770
Você pode abri-lo e, como pode ver na captura de tela aqui, vemos uma linha ascendente e descendente de quanto

05:06.770 --> 05:08.540
poder de computação é necessário.

05:08.540 --> 05:14.150
No segundo, se procurarmos por pontos particularmente altos, podemos fazer uma pausa e nos aprofundar no código e

05:14.150 --> 05:15.890
ver o que está causando o problema.

05:16.370 --> 05:17.610
Vamos dar uma olhada em uma demonstração.

05:17.630 --> 05:19.460
Vamos abrir a caixa a seguir novamente.

05:19.460 --> 05:21.020
Desta vez, vamos reproduzir a cena.

05:21.020 --> 05:22.970
Veremos as informações dos corpos rígidos.

05:22.970 --> 05:27.470
Também abriremos estas janelas, o depurador de física e o profiler de física.

05:27.940 --> 05:29.720
Muito bem, vamos dar uma olhada na próxima cena.

05:29.720 --> 05:32.030
Veremos a caixa caindo novamente.

05:32.030 --> 05:37.670
E, desta vez, vamos ver algumas coisas novas, uma delas, enquanto a cena está sendo reproduzida.

05:39.630 --> 05:44.730
Vou pausar a cena aqui e dar uma olhada nas informações do corpo rígido.

05:45.150 --> 05:47.580
Agora, há muitas informações úteis aqui.

05:47.580 --> 05:53.730
Nas informações, podemos ver a velocidade atual, a velocidade, os diferentes valores do tensor, etc., que podem ser muito úteis.

05:53.730 --> 05:56.250
útil para depurar o seu código.

05:56.730 --> 06:02.490
Além disso, vamos dar uma olhada na análise de janelas e no profiler.

06:02.850 --> 06:09.960
Aqui podemos dar uma olhada no perfil de física ao longo do tempo, já que ele está sendo reproduzido e será atualizado e

06:09.960 --> 06:16.320
e ver o número de colisores dinâmicos que temos, corpos rígidos, etc. que poderiam

06:16.320 --> 06:18.060
ajudá-lo a depurar sua cena também.

06:18.690 --> 06:25.140
Além disso, vamos dar uma olhada no depurador de análise e física, e eu vou mover isso aqui para

06:25.140 --> 06:26.520
um sexo para que possamos vê-lo.

06:28.280 --> 06:34.310
E o que podemos fazer aqui é que, enquanto a cena estiver sendo reproduzida ou pausada, podemos ver

06:34.310 --> 06:38.150
todas as cores diferentes que ele adiciona ao Swatch quando eu o altero.

06:38.660 --> 06:44.810
Por nos mostrar muitas informações diferentes sobre os colliders da cena e quais estão dormindo,

06:44.810 --> 06:47.930
etc. Portanto, tudo isso junto é muito útil.

06:47.960 --> 06:48.680
É isso aí.

06:49.600 --> 06:54.480
Na próxima seção, criaremos um projeto, algo como o Angry Birds Game.

06:54.490 --> 06:57.670
Esse será um jogo 2D completo que criaremos do zero.

06:57.670 --> 07:01.570
Vamos criá-lo usando física, movimento de projétil, usando entrada.

07:01.570 --> 07:05.260
Criaremos obstáculos de jogo que interagem com a dinâmica de corpo rígido.

07:05.260 --> 07:08.950
Adicionaremos condições de perda de vento e até mesmo um pouco de polimento no final.
