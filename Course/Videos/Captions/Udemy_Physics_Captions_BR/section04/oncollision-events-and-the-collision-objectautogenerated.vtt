WEBVTT

00:00.660 --> 00:01.770
Section four.

00:01.930 --> 00:02.370
Unity.

00:02.420 --> 00:04.170
C-sharp Physics Programming.

00:04.200 --> 00:10.470
In this section, we'll cover handling physics events for collisions and triggers, adding physics forces

00:10.470 --> 00:11.560
to move objects.

00:11.580 --> 00:15.690
We'll tackle the most common and useful physics properties and physics functions.

00:15.690 --> 00:20.940
And we'll take a look at physics debugging on collision events and the collision object.

00:20.970 --> 00:24.300
In this video, we'll cover physics Lifecycle recap.

00:24.300 --> 00:26.700
Then we'll jump into what our collision events.

00:26.700 --> 00:28.020
Why are they useful?

00:28.020 --> 00:33.870
And then we'll open the Unity editor and we'll play with collision events, Recommended viewing physics,

00:33.870 --> 00:40.350
life cycle physics, simulate and time dilation introduces the core fundamentals of physics, events,

00:40.620 --> 00:42.210
physics, life cycle Recap.

00:42.210 --> 00:48.360
As we saw in earlier sections, the on collision events are called When the collider intersects another

00:48.360 --> 00:55.560
collider, we use the on collision enter method inside of a behavior, and we notice that we get past

00:55.560 --> 00:58.530
the collision object on collision events.

00:58.530 --> 00:59.820
Let's take a closer look.

00:59.820 --> 01:00.900
Why do we use them?

01:00.900 --> 01:02.730
First of all, on collision events?

01:02.730 --> 01:05.640
Give us more information about physics collisions.

01:05.640 --> 01:09.720
These are collisions we're talking about between rigid bodies with colliders.

01:09.720 --> 01:11.580
When is trigger is set to false?

01:11.580 --> 01:16.980
Some common examples would be when a bullet hits an enemy or when a character collects a coin.

01:16.980 --> 01:20.100
Let's take a look at a scenario for an on collision event.

01:20.100 --> 01:24.450
Let's imagine we have a pink cube falling downward toward a blue cube.

01:24.450 --> 01:27.030
Each of them has a rigid body and a collider.

01:27.030 --> 01:29.220
With collider is trigger set to false.

01:29.220 --> 01:30.480
The pink is falling.

01:30.480 --> 01:33.480
Pink enters the collision, firing an on collision.

01:33.480 --> 01:35.730
Enter pink stays in the collision.

01:35.730 --> 01:42.810
Now, for every frame that they're touching will get a on collision stay called when pink exits.

01:42.810 --> 01:45.600
The collision will get a one time on collision exit.

01:45.600 --> 01:47.070
Then pink continues to fall.

01:47.100 --> 01:49.490
Our focus is really on the collision enter.

01:49.500 --> 01:55.050
This allows us to capture the bullet hits an enemy or the character collects a coin scenario.

01:55.080 --> 02:00.570
The collision object that comes into that method gives us more information about the collision.

02:00.570 --> 02:05.640
We can ask Collision game object What did we hit or collision contacts?

02:05.640 --> 02:08.700
Where exactly in the 3D world did the collision happen?

02:08.700 --> 02:10.620
So let's take a look at what did we hit.

02:10.620 --> 02:15.990
Well, we can check collision game object name and see if it matches the something we're looking for.

02:16.020 --> 02:18.150
That's good for very specific checks.

02:18.150 --> 02:21.540
We can use the tag for a whole category of checking.

02:21.540 --> 02:22.440
We can check.

02:22.440 --> 02:26.700
Is this colliding with any one of the coins which are tagged coin?

02:26.700 --> 02:27.870
An alternative?

02:27.870 --> 02:31.470
Also good for categorical checks is we can check the layer.

02:31.470 --> 02:35.760
Did we hit anything with a layer set to floor tags and layers?

02:35.760 --> 02:36.960
Both can be used here.

02:36.960 --> 02:38.370
Something to be noted.

02:38.370 --> 02:42.450
We can have zero or one tags or layers on each of our objects.

02:42.450 --> 02:47.670
However, we have unlimited tags in a project, but only 31 layers.

02:47.760 --> 02:50.790
Also notice that layers are much faster than tags.

02:50.790 --> 02:56.040
So if you don't have many layers and you want to get the speed increase, go ahead and use layers.

02:56.040 --> 03:00.000
If you have a lot of different combinations to check, maybe tags is better for you.

03:00.000 --> 03:06.120
You can open up and manage from menu unity, Edit Project Settings, Tags and Layers.

03:06.450 --> 03:08.190
Let's jump into a demo now.

03:08.520 --> 03:12.540
We'll take a look at the on collision events, one and two scenes.

03:12.540 --> 03:16.050
We'll play the scene and inspect the code here.

03:16.080 --> 03:16.950
Inside Unity.

03:16.950 --> 03:20.010
Let's open up our on collision events one.

03:20.930 --> 03:22.190
We've got a pink cube.

03:22.990 --> 03:24.010
In the blue cube.

03:24.640 --> 03:26.110
Pink cube is going to fall.

03:26.880 --> 03:27.930
Let's see what happens.

03:30.760 --> 03:34.000
It falls, collides and then continues falling.

03:35.020 --> 03:40.810
We can see in the console window we have one enter several stay and one exit.

03:42.920 --> 03:48.590
Looking at the code pretty straightforward using debug log to send out some simple text.

03:49.100 --> 03:49.730
That's it.

03:50.780 --> 03:52.730
Let's take a look at collision events.

03:52.730 --> 03:53.510
Two seen.

03:55.740 --> 03:57.060
Same scenario.

03:57.180 --> 03:58.530
At this time, we have a floor.

03:59.220 --> 03:59.940
Let's play.

04:02.800 --> 04:04.090
We see the collision.

04:04.090 --> 04:08.140
And in each console line we also see what we're colliding with.

04:08.590 --> 04:11.200
The pink cube is colliding with Cube B.

04:11.530 --> 04:13.780
Notice it's not colliding with the floor.

04:13.810 --> 04:15.040
Let's see how that's done.

04:18.110 --> 04:19.370
Inside each method.

04:19.370 --> 04:24.920
We check if we're colliding with the floor and then we do not say the debug log statement.

04:25.100 --> 04:26.840
So how does is floor work?

04:27.790 --> 04:29.800
Down here, we simply check the layer.

04:29.920 --> 04:32.170
And is it the floor layer now?

04:32.170 --> 04:34.780
Floor layer constant just equals floor.

04:34.810 --> 04:37.240
It's a simple way for me to store that variable.

04:38.490 --> 04:44.160
If we look in unity and we expect the floor, we see that the layer is set to floor.

04:44.310 --> 04:46.290
That's how this code knows.

04:46.290 --> 04:50.310
Not to say debug log when we're colliding with the floor.

04:50.340 --> 04:51.090
That's it.

04:52.180 --> 04:56.830
In the next video, we'll take a look at on trigger events and the collider object.

04:56.950 --> 05:01.510
We'll cover what are trigger events, why are they useful in our game projects?

05:01.510 --> 05:04.750
And we'll even open up unity and play with some trigger events.
