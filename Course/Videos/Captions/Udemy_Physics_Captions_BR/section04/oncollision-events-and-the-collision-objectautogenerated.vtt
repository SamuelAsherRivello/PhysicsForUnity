WEBVTT

00:00.660 --> 00:01.770
Seção quatro.

00:01.930 --> 00:02.370
Unidade.

00:02.420 --> 00:04.170
Programação de Física em C-sharp.

00:04.200 --> 00:10.470
Nesta seção, abordaremos a manipulação de eventos de física para colisões e acionadores, adicionando forças de física

00:10.470 --> 00:11.560
para mover objetos.

00:11.580 --> 00:15.690
Abordaremos as propriedades físicas e as funções físicas mais comuns e úteis.

00:15.690 --> 00:20.940
E daremos uma olhada na depuração da física em eventos de colisão e no objeto de colisão.

00:20.970 --> 00:24.300
Neste vídeo, abordaremos a recapitulação do ciclo de vida da física.

00:24.300 --> 00:26.700
Em seguida, vamos ver quais são os nossos eventos de colisão.

00:26.700 --> 00:28.020
Por que eles são úteis?

00:28.020 --> 00:33.870
Em seguida, abriremos o editor do Unity e brincaremos com os eventos de colisão e com a física de visualização recomendada,

00:33.870 --> 00:40.350
A física do ciclo de vida, simulação e dilatação do tempo introduzem os fundamentos básicos da física, eventos,

00:40.620 --> 00:42.210
física, ciclo de vida Recapitulação.

00:42.210 --> 00:48.360
Como vimos nas seções anteriores, os eventos de colisão são chamados de Quando o colisor cruza outro

00:48.360 --> 00:55.560
Usamos o método on collision enter dentro de um comportamento e percebemos que passamos por

00:55.560 --> 00:58.530
o objeto de colisão nos eventos de colisão.

00:58.530 --> 00:59.820
Vamos dar uma olhada mais de perto.

00:59.820 --> 01:00.900
Por que os usamos?

01:00.900 --> 01:02.730
Em primeiro lugar, em eventos de colisão?

01:02.730 --> 01:05.640
Dê-nos mais informações sobre colisões físicas.

01:05.640 --> 01:09.720
Estamos falando de colisões entre corpos rígidos com colisores.

01:09.720 --> 01:11.580
Quando o gatilho é definido como falso?

01:11.580 --> 01:16.980
Alguns exemplos comuns seriam quando uma bala atinge um inimigo ou quando um personagem coleta uma moeda.

01:16.980 --> 01:20.100
Vamos dar uma olhada em um cenário para um evento de colisão.

01:20.100 --> 01:24.450
Vamos imaginar que temos um cubo rosa caindo para baixo em direção a um cubo azul.

01:24.450 --> 01:27.030
Cada um deles tem um corpo rígido e um colisor.

01:27.030 --> 01:29.220
Com o collider, o gatilho é definido como falso.

01:29.220 --> 01:30.480
A rosa está caindo.

01:30.480 --> 01:33.480
A rosa entra na colisão, disparando um on collision.

01:33.480 --> 01:35.730
A rosa entra e permanece na colisão.

01:35.730 --> 01:42.810
Agora, para cada quadro em que eles estiverem tocando, será chamada uma permanência de colisão quando a rosa sair.

01:42.810 --> 01:45.600
A colisão terá uma saída de colisão única.

01:45.600 --> 01:47.070
Em seguida, a rosa continua a cair.

01:47.100 --> 01:49.490
Nosso foco está realmente na entrada de colisão.

01:49.500 --> 01:55.050
Isso nos permite capturar a bala atingindo um inimigo ou o personagem coletando um cenário de moedas.

01:55.080 --> 02:00.570
O objeto de colisão que entra nesse método nos dá mais informações sobre a colisão.

02:00.570 --> 02:05.640
Podemos perguntar ao objeto de jogo Collision O que atingimos ou os contatos da colisão?

02:05.640 --> 02:08.700
Onde exatamente no mundo 3D ocorreu a colisão?

02:08.700 --> 02:10.620
Então vamos dar uma olhada no que atingimos.

02:10.620 --> 02:15.990
Bem, podemos verificar o nome do objeto de jogo de colisão e ver se ele corresponde ao que estamos procurando.

02:16.020 --> 02:18.150
Isso é bom para verificações muito específicas.

02:18.150 --> 02:21.540
Podemos usar a tag para toda uma categoria de verificação.

02:21.540 --> 02:22.440
Podemos verificar.

02:22.440 --> 02:26.700
Isso está colidindo com alguma das moedas que têm a tag coin?

02:26.700 --> 02:27.870
Uma alternativa?

02:27.870 --> 02:31.470
Também é bom para verificações categóricas, pois podemos verificar a camada.

02:31.470 --> 02:35.760
Encontramos algo com uma camada definida para tags e camadas de piso?

02:35.760 --> 02:36.960
Ambos podem ser usados aqui.

02:36.960 --> 02:38.370
Algo a ser observado.

02:38.370 --> 02:42.450
Podemos ter zero ou uma tag ou camada em cada um dos nossos objetos.

02:42.450 --> 02:47.670
No entanto, temos tags ilimitadas em um projeto, mas apenas 31 camadas.

02:47.760 --> 02:50.790
Observe também que as camadas são muito mais rápidas do que as tags.

02:50.790 --> 02:56.040
Portanto, se você não tiver muitas camadas e quiser obter o aumento de velocidade, vá em frente e use camadas.

02:56.040 --> 03:00.000
Se você tiver muitas combinações diferentes para verificar, talvez as tags sejam melhores para você.

03:00.000 --> 03:06.120
Você pode abrir e gerenciar a partir do menu unity, Edit Project Settings, Tags and Layers.

03:06.450 --> 03:08.190
Vamos entrar em uma demonstração agora.

03:08.520 --> 03:12.540
Vamos dar uma olhada nos eventos de colisão, uma e duas cenas.

03:12.540 --> 03:16.050
Vamos reproduzir a cena e inspecionar o código aqui.

03:16.080 --> 03:16.950
Dentro do Unity.

03:16.950 --> 03:20.010
Vamos abrir o nosso evento de colisão.

03:20.930 --> 03:22.190
Temos um cubo rosa.

03:22.990 --> 03:24.010
No cubo azul.

03:24.640 --> 03:26.110
O cubo rosa vai cair.

03:26.880 --> 03:27.930
Vamos ver o que acontece.

03:30.760 --> 03:34.000
Ele cai, colide e depois continua caindo.

03:35.020 --> 03:40.810
Podemos ver na janela do console que temos uma entrada, várias permanências e uma saída.

03:42.920 --> 03:48.590
Observando o código, é bastante simples usar o registro de depuração para enviar um texto simples.

03:49.100 --> 03:49.730
É isso aí.

03:50.780 --> 03:52.730
Vamos dar uma olhada nos eventos de colisão.

03:52.730 --> 03:53.510
Dois vistos.

03:55.740 --> 03:57.060
Mesmo cenário.

03:57.180 --> 03:58.530
Neste momento, temos um piso.

03:59.220 --> 03:59.940
Vamos jogar.

04:02.800 --> 04:04.090
Estamos vendo a colisão.

04:04.090 --> 04:08.140
E em cada linha do console também vemos com o que estamos colidindo.

04:08.590 --> 04:11.200
O cubo rosa está colidindo com o cubo B.

04:11.530 --> 04:13.780
Observe que ele não está colidindo com o chão.

04:13.810 --> 04:15.040
Vamos ver como isso é feito.

04:18.110 --> 04:19.370
Dentro de cada método.

04:19.370 --> 04:24.920
Verificamos se estamos colidindo com o chão e então não dizemos a declaração do registro de depuração.

04:25.100 --> 04:26.840
Então, como funciona o piso?

04:27.790 --> 04:29.800
Aqui embaixo, simplesmente verificamos a camada.

04:29.920 --> 04:32.170
E agora é a camada do piso?

04:32.170 --> 04:34.780
A constante da camada do piso é igual ao piso.

04:34.810 --> 04:37.240
É uma maneira simples de armazenar essa variável.

04:38.490 --> 04:44.160
Se olharmos para a unidade e esperarmos o piso, veremos que a camada está definida como piso.

04:44.310 --> 04:46.290
É assim que este código sabe.

04:46.290 --> 04:50.310
Para não dizer debug log quando estamos colidindo com o chão.

04:50.340 --> 04:51.090
É isso aí.

04:52.180 --> 04:56.830
No próximo vídeo, daremos uma olhada nos eventos de acionamento e no objeto collider.

04:56.950 --> 05:01.510
Falaremos sobre o que são eventos de acionamento e por que eles são úteis em nossos projetos de jogos.

05:01.510 --> 05:04.750
E até abriremos o unity e brincaremos com alguns eventos de acionamento.
