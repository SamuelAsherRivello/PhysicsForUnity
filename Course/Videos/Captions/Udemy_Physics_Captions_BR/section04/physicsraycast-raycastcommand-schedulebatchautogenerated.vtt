WEBVTT

00:00.670 --> 00:04.450
Lote de programação do comando Ray cast e Ray cast de física.

00:04.660 --> 00:08.500
Neste vídeo, abordaremos o que são consultas espaciais em física.

00:08.650 --> 00:10.870
Por que elas são úteis e como podemos fazê-las?

00:11.320 --> 00:13.900
Em seguida, abriremos o editor Unity e brincaremos com elas.

00:14.530 --> 00:15.810
Vamos dar um passo para trás.

00:15.820 --> 00:18.550
O que queremos dizer quando falamos de um sistema de física de jogo?

00:18.580 --> 00:20.140
Bem, há duas partes principais.

00:20.140 --> 00:23.980
A maior parte deste curso até agora falou sobre simulação de corpo rígido.

00:24.280 --> 00:28.000
Esse é o movimento realista e a interação entre grupos de objetos.

00:28.240 --> 00:31.120
Ainda não falamos muito sobre consultas espaciais.

00:31.330 --> 00:39.130
Isso é projetar um raio ou um colisor através do espaço para ver a distância e verificar futuras colisões.

00:39.400 --> 00:44.290
Por exemplo, podemos ver se a minha arma está apontando diretamente para o inimigo.

00:44.590 --> 00:49.090
A classe physics define a física global, as propriedades e os métodos auxiliares.

00:49.210 --> 00:55.270
Nosso foco será a reformulação da física, um dos métodos que nos dá algumas informações excelentes que podemos aprender.

00:55.270 --> 00:57.130
Há alguma coisa na frente do meu objeto?

00:57.130 --> 00:59.200
O que exatamente está na frente do meu objeto?

00:59.200 --> 00:59.620
O que está acontecendo?

00:59.620 --> 01:02.260
O espaço vazio está na frente do objeto?

01:02.440 --> 01:04.390
Então, por que fazer consultas espaciais?

01:04.540 --> 01:08.370
Bem, as consultas espaciais podem nos ajudar a responder a muitas perguntas interessantes.

01:08.380 --> 01:09.970
Nosso inimigo está perto de um muro?

01:09.970 --> 01:11.830
Bem, o inimigo pode se virar.

01:11.860 --> 01:13.540
O inimigo está na mira de nossas armas?

01:13.540 --> 01:17.300
Bem, poderíamos indicar para nós, como jogadores, que agora é hora de atirar.

01:17.320 --> 01:18.640
O inimigo pode me ver?

01:18.670 --> 01:19.780
Isso pode ajudar o inimigo.

01:19.780 --> 01:20.860
Alerta da IA.

01:20.860 --> 01:21.760
Outro inimigo.

01:21.760 --> 01:25.170
A IA é um objeto sob a posição do meu mouse.

01:25.180 --> 01:27.580
Isso pode nos ajudar a selecionar ou arrastar o objeto.

01:27.580 --> 01:30.970
Onde exatamente dentro de um colisor ocorreu a colisão?

01:31.000 --> 01:36.940
Isso poderia nos dizer a diferença de pontos recompensados por um tiro certeiro em um alvo ou um ponto mais baixo

01:36.940 --> 01:37.540
valor.

01:37.900 --> 01:39.520
E há muito mais possibilidades.

01:39.520 --> 01:41.260
Isso é muito útil.

01:41.260 --> 01:45.360
A aula de física que mencionei tem muitos métodos disponíveis para nós.

01:45.370 --> 01:47.080
Vamos falar sobre recast.

01:47.110 --> 01:48.800
Dê uma olhada no diagrama aqui.

01:48.820 --> 01:55.330
Imagine que lançamos o array a partir do ponto um e o lançamos na direção da caixa rosa.

01:55.330 --> 02:00.980
Isso nos retornará uma lista ordenada de colisores de interseção na cena.

02:01.000 --> 02:03.880
Nesse caso, ele retornaria o número três.

02:03.910 --> 02:07.510
Agora, observe que não vamos nos lançar em um espaço infinito aqui.

02:07.510 --> 02:13.090
Vamos usar uma distância finita definida que é uma otimização que ajudará nos cálculos.

02:13.090 --> 02:18.610
Assim, por exemplo, se tivermos a distância definida como quatro, colidiremos com a caixa rosa, mas não

02:18.610 --> 02:19.570
a caixa azul.

02:19.600 --> 02:22.030
Um método semelhante seria o box cast.

02:22.030 --> 02:27.690
Esse método lança uma forma a partir do ponto um até o cubo rosa, mas não até o cubo azul.

02:27.700 --> 02:32.770
A distância aqui é que, em vez de enviar uma linha ou matriz, é um espaço mais espesso.

02:32.770 --> 02:38.920
O array cast, programação de comandos, funções em lote, algo como a reformulação física, mas é muito mais,

02:38.920 --> 02:39.940
muito mais rápido.

02:39.940 --> 02:46.660
As operações serão realizadas de forma assíncrona e em paralelo em processadores paralelos, se estiverem disponíveis.

02:46.660 --> 02:48.940
Isso nos dá uma velocidade extremamente rápida.

02:49.120 --> 02:53.200
É um recurso relativamente novo para a unidade, mas está disponível publicamente.

02:53.410 --> 02:54.670
Vamos ver algumas demonstrações.

02:54.940 --> 02:57.130
Vamos dar uma olhada na demonstração do Ray cast.

02:57.160 --> 02:59.800
Vamos reproduzir a cena e inspecionar o código.

03:03.000 --> 03:03.180
Aqui.

03:03.180 --> 03:05.520
Vamos dar uma olhada na demonstração de reformulação.

03:06.770 --> 03:08.010
Executamos a cena.

03:08.190 --> 03:16.410
E esta cápsula, como podemos ver com a diretriz vermelha aqui, está enviando um elenco de taxa abaixo dela.

03:16.770 --> 03:20.850
E, na janela do console, ela nos mostra com o que está colidindo.

03:21.240 --> 03:25.290
A linha vermelha, como era de se esperar, diz que a rampa está logo abaixo.

03:25.350 --> 03:31.690
Agora, se eu mover isso manualmente para fora da rampa, ele diz que o piso está logo abaixo.

03:31.710 --> 03:37.980
Como você pode ver, podemos detectar qual objeto está abaixo de nós ou em qualquer direção que quisermos e obter

03:37.980 --> 03:39.020
informações sobre ele.

03:39.030 --> 03:40.200
Vamos ver como isso funciona.

03:44.590 --> 03:45.760
Na atualização.

03:46.670 --> 03:52.220
O que fazemos é usar a física, reformular e lançar um raio na direção de baixo para cima.

03:52.460 --> 03:57.200
Então, se houver um colisor com o qual tenhamos colidido, verificaremos a camada dele.

03:57.410 --> 04:00.890
Se for uma camada de piso, neste caso, faremos um registro de depuração.

04:01.010 --> 04:07.570
Talvez os passos do seu personagem mudem de som quando ele estiver andando sobre uma superfície de metal ou sobre a água.

04:07.580 --> 04:09.230
Você poderia fazer coisas assim.

04:09.560 --> 04:10.530
E é isso.

04:10.550 --> 04:13.160
Vamos dar uma olhada na demonstração do comando Ray cast.

04:13.190 --> 04:15.800
Vamos reproduzir a cena e inspecionar o código.

04:16.770 --> 04:19.650
Muito bem, vamos abrir a demonstração do comando Ray cast.

04:21.560 --> 04:21.830
Aqui.

04:21.830 --> 04:27.090
Temos uma configuração familiar da nossa demonstração Recast, mas com o comando recast.

04:27.110 --> 04:32.030
O que vamos fazer é uma maneira ligeiramente diferente de obter o resultado final aqui.

04:32.030 --> 04:37.760
Assim, semelhante ao último que obtivemos, a rampa está próxima abaixo no nosso console.

04:38.150 --> 04:43.370
Saímos, o piso está logo abaixo no nosso console, portanto estamos detectando o que está abaixo de nós.

04:43.600 --> 04:46.070
Vamos ver que a implementação aqui é diferente.

04:47.070 --> 04:49.350
Dentro do comando recast.

04:50.460 --> 04:53.940
O que estamos fazendo é dentro do update.

04:54.060 --> 05:01.790
A cada atualização, crio um novo comando recast aqui e programo um lote de comandos.

05:01.800 --> 05:08.310
Agora, neste exemplo simples, o que estou fazendo aqui é preencher uma lista de comandos com apenas um.

05:08.310 --> 05:10.800
Estou colocando o comando de índice zero um.

05:10.800 --> 05:16.620
Mas você pode imaginar que se tivesse uma cena complexa em que estivesse fazendo muitas reformulações, nós

05:16.620 --> 05:20.730
poderíamos colocar todos eles na mesma lista de comandos e chamar o lote de programação.

05:20.730 --> 05:21.450
Uma vez.

05:21.540 --> 05:27.030
O que podemos fazer então é garantir que estamos obtendo resultados realmente rápidos porque isso vai acontecer

05:27.030 --> 05:31.560
de forma assíncrona e também vai acontecer em vários núcleos.

05:31.560 --> 05:35.880
Se o computador ou o dispositivo em que você está executando tiver processamento múltiplo.

05:36.490 --> 05:42.490
Em seguida, aqui embaixo, de forma semelhante ao último exemplo, basta examinarmos os resultados que obtivemos e veremos

05:42.490 --> 05:48.550
se para qualquer um dos acertos, se houver um colisor presente e se for o piso ou a rampa, isso é

05:48.550 --> 05:49.000
isso.

05:49.150 --> 05:50.230
Uma atribuição de bônus.

05:50.230 --> 05:56.530
Se você quiser se aprofundar um pouco mais no Ray casting, dê uma olhada na demonstração de arrastar e soltar do Ray cast, reproduza

05:56.530 --> 05:58.450
a cena e inspecione o código.

05:59.140 --> 06:05.260
No próximo vídeo, veremos física, depuração, depuração, física de raio de desenho, janela do depurador e

06:05.260 --> 06:06.490
criar o perfil de uma janela.

06:06.910 --> 06:09.790
Neste vídeo, falaremos sobre o que é o bug?

06:09.790 --> 06:12.520
Quais são os desafios da depuração da física?

06:12.520 --> 06:14.770
Que ferramentas temos para nos ajudar?

06:15.070 --> 06:18.580
E, finalmente, abriremos o editor do Unity e brincaremos com tudo isso.
