WEBVTT

00:00.840 --> 00:04.980
O sono é o uso cinemático, a gravidade e a velocidade.

00:05.010 --> 00:09.480
Neste vídeo, abordaremos essas propriedades físicas muito poderosas e úteis.

00:09.480 --> 00:13.380
Aprenderemos a ativar e desativar a física para cada objeto do jogo.

00:13.470 --> 00:15.720
Aprenderemos por que queremos fazer isso às vezes.

00:15.720 --> 00:17.490
Em seguida, abriremos o editor Unity.

00:17.510 --> 00:19.020
Vamos brincar com estas propriedades.

00:19.020 --> 00:21.820
Vamos recapitular algumas das propriedades físicas importantes.

00:21.840 --> 00:25.370
Imagine que temos uma pilha de cubos e um desses cubos é selecionado.

00:25.380 --> 00:30.750
Ele tem um colisor de caixa com algumas propriedades e um corpo rígido que também tem propriedades.

00:30.960 --> 00:37.800
Algumas dessas propriedades podem ser acessadas pelo inspetor e também pelo código, por exemplo, a cinemática

00:37.800 --> 00:39.030
e usar a gravidade.

00:39.120 --> 00:45.480
No entanto, algumas propriedades só podem ser acessadas a partir do código, por exemplo, o sono e a velocidade.

00:45.930 --> 00:48.510
Vamos dar uma olhada no corpo rígido é cinemático.

00:48.510 --> 00:53.520
Isso controla se a física do sistema afeta ou não esse corpo rígido.

00:53.640 --> 00:55.860
Por padrão, está definido como falso.

00:55.860 --> 00:58.800
O objeto do jogo se comportará sob o controle da física.

00:58.920 --> 01:05.580
Às vezes, queremos defini-la como true e, assim, as forças físicas, colisões e articulações serão ignoradas.

01:06.060 --> 01:12.660
Definir como true dará ao nosso objeto de jogo a oportunidade de ser conduzido por scripts em vez do

01:12.660 --> 01:13.680
sistema de física.

01:13.680 --> 01:16.290
Podemos até mesmo alternar isso em determinados cenários.

01:16.290 --> 01:20.310
Poderíamos começar com ele verdadeiro com um objeto de jogo acionado por script.

01:20.400 --> 01:26.310
E então, quando o nosso personagem for atingido, por exemplo, poderíamos transformá-lo rapidamente em um ragdoll e ele

01:26.310 --> 01:28.260
cairia de forma crível no chão.

01:28.260 --> 01:32.850
Ao definir sua cinemática como falso corpo rígido, use a gravidade.

01:32.850 --> 01:36.690
Isso controla se a gravidade afeta ou não esse corpo rígido.

01:37.110 --> 01:41.970
Por padrão, está definido como true, o que permite que o objeto caia sob as forças da gravidade.

01:42.120 --> 01:44.610
Às vezes, queremos defini-la como falsa.

01:44.610 --> 01:50.580
Se quisermos nos comportar como se estivéssemos no espaço sideral, onde a gravidade não é afetada, ou se quisermos mais

01:50.580 --> 01:52.530
controle manual sobre os objetos.

01:52.530 --> 01:55.440
O corpo rígido de movimento está dormindo.

01:55.740 --> 02:00.570
Embora isso não seja de fato uma propriedade, é um método, como se vê pelos parênteses.

02:00.570 --> 02:04.020
Depois disso, podemos obter o valor da mesma forma que uma propriedade.

02:04.050 --> 02:06.930
Isso nos permite saber se o corpo rígido está dormindo?

02:06.930 --> 02:13.680
Quando um corpo rígido está se movendo muito lentamente, o mecanismo de física assume que ele parou e define

02:13.680 --> 02:15.290
em um modo de suspensão.

02:15.300 --> 02:19.710
Essa otimização economiza tempo do processador para a maioria das finalidades.

02:19.710 --> 02:26.130
O modo de dormir e acordar acontece automaticamente, portanto, podemos presumir que quando ele está em movimento está dormindo.

02:26.130 --> 02:29.880
falso e que, quando finalmente está em repouso, o sono é verdadeiro.

02:30.240 --> 02:36.090
Nosso foco, por exemplo, é detectar quando nosso personagem parou de se mover ou um item no jogo

02:36.090 --> 02:37.080
parou de se mover.

02:37.290 --> 02:43.230
Por exemplo, se o meu personagem dispara uma flecha em um alvo, a flecha voa pelo ar e, eventualmente

02:43.230 --> 02:44.400
pára.

02:44.730 --> 02:48.030
Quando ela parar, o sono será verdadeiro.

02:48.060 --> 02:52.980
Eu poderia verificar isso e saber, ok, ele está pronto para disparar outra flecha.

02:53.400 --> 02:55.110
Velocidade de corpo rígido.

02:55.110 --> 03:00.990
O vetor de velocidade do corpo rígido é mantido neste vetor rigid body velocity.

03:00.990 --> 03:03.750
Este é o vetor de velocidade do corpo rígido.

03:03.750 --> 03:06.040
É a direção e a velocidade do movimento.

03:06.060 --> 03:12.780
Na maioria dos casos, você não deve modificar a velocidade diretamente, pois isso pode resultar em um comportamento não realista.

03:12.780 --> 03:14.610
No entanto, há exceções.

03:14.850 --> 03:20.700
Um uso típico é quando você altera a velocidade imediatamente em um jogo de tiro em primeira pessoa.

03:20.700 --> 03:26.460
Quando o personagem pula, você quer ter essa mudança rápida na velocidade para que possa defini-la diretamente.

03:26.640 --> 03:33.000
Nosso foco é, normalmente, acessar o valor sem defini-lo apenas para obter a velocidade do objeto.

03:33.000 --> 03:39.810
Por exemplo, se quisermos mostrar o velocímetro de um carro baseado em física na tela, podemos obter

03:39.810 --> 03:40.710
esse valor.

03:40.710 --> 03:43.320
Vamos falar sobre a desativação da física.

03:43.320 --> 03:47.970
Às vezes, os jogos podem desativar a física de um objeto específico durante o jogo.

03:47.970 --> 03:52.920
Por exemplo, queremos mover os objetos com a entrada do mouse em vez da física.

03:52.920 --> 03:59.220
Há duas propriedades que precisamos alternar aqui se quisermos ativar e desativar a física para desativá-la,

03:59.220 --> 04:03.660
definimos o uso da gravidade como falso e a cinemática como verdadeira.

04:03.660 --> 04:08.910
Agora podemos controlar o movimento desse corpo rígido com o código Quando estivermos prontos para voltar o movimento

04:08.910 --> 04:15.000
para o controle baseado em física, podemos definir use gravity como true e is kinematic como false.

04:15.000 --> 04:20.570
Então, ele cairia sob a gravidade e se comportaria com articulações e forças físicas, etc.

04:20.580 --> 04:25.620
Vamos criar uma demonstração que use todas essas propriedades de que falamos e ver como elas podem funcionar juntas.

04:25.620 --> 04:27.960
Criei uma cena chamada Dropper Game.

04:27.960 --> 04:29.160
Vamos reproduzir a cena.

04:29.160 --> 04:30.930
É um jogo muito simples.

04:30.930 --> 04:35.340
Vamos inspecionar o código e ver como essas quatro propriedades estão sendo usadas.

04:35.340 --> 04:37.470
Aguardamos a próxima vez do usuário.

04:37.470 --> 04:38.880
Ao usar está dormindo.

04:38.880 --> 04:47.070
Mostramos a velocidade em uma UI usando a velocidade e usamos essa combinação de arrastar o mouse versus cair

04:47.070 --> 04:51.060
Usando as duas propriedades cinemáticas e usando a gravidade.

04:52.110 --> 04:52.410
Muito bem.

04:52.410 --> 04:53.760
Aqui estamos de volta à unidade.

04:54.240 --> 04:57.120
Vamos dar uma olhada na cena do jogo propriamente dita.

04:58.260 --> 05:02.910
E veremos como essas propriedades para a física são usadas na jogabilidade.

05:03.150 --> 05:04.320
Vamos continuar e jogar.

05:10.350 --> 05:17.460
Portanto, há quatro propriedades sobre as quais estamos falando: uma, quando a caixa do conta-gotas cai, a velocidade na

05:17.460 --> 05:19.800
tela está usando a propriedade velocity.

05:20.160 --> 05:27.630
Em segundo lugar, depois que a caixa cai e atinge o trilho na parte inferior, a caixa, a próxima caixa fica disponível

05:27.630 --> 05:28.680
para eu usar.

05:28.710 --> 05:33.390
Assim, você pode ver que há alguns segundos de intervalo e, em seguida, outra caixa está pronta para ser usada.

05:33.600 --> 05:39.660
A maneira de lidar com isso é esperar até que a mensagem is sleeping seja verdadeira para a caixa seguinte.

05:39.960 --> 05:42.600
Então o "está dormindo" é falso.

05:42.600 --> 05:47.040
E então, quando finalmente chegar, seu sono é verdadeiro, e então é a minha vez novamente.

05:47.130 --> 05:48.630
Portanto, essas são duas das propriedades.

05:49.080 --> 05:52.710
Além disso, observe como posso controlar a caixa com o mouse.

05:52.710 --> 05:58.650
Portanto, embora esteja usando um corpo rígido, tenho configurações definidas para que eu possa movê-lo manualmente.

05:58.830 --> 06:01.980
Desligo a gravidade e ligo a cinemática.

06:01.980 --> 06:09.470
E depois que clico com o mouse, desligo a cinemática e ligo a gravidade.

06:09.480 --> 06:11.040
Então, vamos dar uma olhada no código para isso.

06:16.740 --> 06:20.490
Portanto, há quatro pontos em que eu acesso esse aqui.

06:20.490 --> 06:25.020
Toda vez que adiciono um novo conta-gotas, você pode ver o comentário acessando as propriedades físicas.

06:25.020 --> 06:30.240
O que estou fazendo aqui é definir a gravidade como falsa e cinemática como verdadeira.

06:30.240 --> 06:31.980
Isso me permite ter o controle do mouse.

06:33.720 --> 06:41.400
Então, na atualização, que é chamada a cada quadro, se eu clicar no botão do mouse, eu alterno

06:41.400 --> 06:44.700
a gravidade de volta e torno a cinemática falsa.

06:44.700 --> 06:47.610
Isso permite que ele caia sob as forças naturais da gravidade.

06:48.300 --> 06:52.980
Além disso, enquanto ele está caindo na atualização, a verificação ocular está dormindo.

06:53.250 --> 06:56.040
Se estiver dormindo, então está pronto para o próximo turno.

06:56.040 --> 06:58.830
Então, eu marco alguns pontos e vou em frente.

06:59.840 --> 07:01.160
Solto o próximo conta-gotas.

07:02.570 --> 07:05.330
E, finalmente, eu.

07:06.660 --> 07:14.190
Capturo a velocidade máxima para recompensar os pontos com base na velocidade que o bloco estava atingindo no momento mais rápido.

07:14.400 --> 07:20.910
É uma mecânica boba e é uma desculpa para usar a velocidade, mas recompensa mais pontos por cair de

07:20.910 --> 07:21.750
uma altura maior.

07:21.750 --> 07:22.650
E é isso.

07:23.520 --> 07:29.010
No próximo vídeo, veremos a física, a reformulação e a reformulação do lote do Command Schedule.

07:29.040 --> 07:33.450
Neste vídeo, abordaremos o que são consultas espaciais em um sistema de física.

07:33.450 --> 07:37.110
Como e por que elas são úteis para nós e o que fazemos com elas?
