WEBVTT

00:01.740 --> 00:07.570
Neste vídeo, adicionaremos animação programática para as moedas coletadas.

00:07.590 --> 00:11.640
Adicionaremos sons por meio do gerenciador de som e discutiremos o design de níveis.

00:11.850 --> 00:13.230
Então, o que é polonês?

00:13.230 --> 00:13.640
Polonês?

00:13.830 --> 00:18.960
São os pequenos detalhes no final de um projeto que fazem com que um bom projeto se torne excelente?

00:18.990 --> 00:24.420
Geralmente são visuais, de áudio, de animação e pequenos ajustes na jogabilidade.

00:25.560 --> 00:29.370
A quebra de impostos aqui será para adicionar animação às nossas moedas giratórias.

00:29.370 --> 00:33.870
Assim, quando as coletarmos, elas se desvanecerão em vez de desaparecerem instantaneamente.

00:33.870 --> 00:38.670
Adicionaremos sons aos eventos principais por meio do gerenciador de som e discutiremos o design do nível.

00:39.680 --> 00:45.000
Para o projeto, abriremos a seção seis Vídeo cinco Crazy Ball cinco OC.

00:45.050 --> 00:49.070
Aqui estamos dentro do Unity e abriremos o Crazy Ball five.

00:49.850 --> 00:55.580
Agora aqui, adicionamos um pouco de polimento, adicionamos alguns sons, adicionamos algumas animações.

00:55.580 --> 00:57.740
E também quero falar um pouco sobre design de níveis.

00:57.890 --> 01:02.180
Então, vamos começar com o efeito que adicionamos para quando coletamos moedas.

01:02.540 --> 01:07.370
Agora, antes, quando coletávamos uma moeda, ela desaparecia instantaneamente.

01:07.880 --> 01:12.860
Aqui, o que eu fiz foi escaloná-la de seu tamanho total até zero.

01:13.130 --> 01:14.120
Muito rapidamente.

01:14.120 --> 01:15.620
Mas acho que o efeito é bom.

01:15.620 --> 01:15.860
Observe.

01:15.860 --> 01:19.040
Quando eu pego essa moeda, ela encolhe.

01:19.040 --> 01:23.780
É sutil, mas é um nível de polimento muito bom que lhe dá um pouco mais de sensação

01:23.780 --> 01:26.790
de que há algum cuidado no jogo e é um efeito agradável.

01:26.810 --> 01:28.700
Então, vamos ver como conseguimos isso.

01:29.460 --> 01:30.960
Vamos dar uma olhada em alguns códigos.

01:31.690 --> 01:38.230
Aqui na moeda, podemos ver que no destroy que configuramos antes do método público destroy me

01:38.230 --> 01:42.990
Eu sinalizei o is a live false e depois usei para destruir imediatamente.

01:43.000 --> 01:49.180
Agora, no número um aqui, podemos ver que estamos usando a operação "do scale" e ela será reduzida

01:49.180 --> 01:55.390
para zero No decorrer de cerca de um quarto de segundo, posso definir uma flexibilização para que ela seja mais ou menos

01:55.390 --> 01:58.150
saltar ou fazer isso rapidamente ou acelerar à medida que avança.

01:58.150 --> 01:59.680
Você tem muitas opções.

01:59.680 --> 02:01.960
Em seguida, defino o método on complete.

02:01.960 --> 02:07.090
O que isso faz é esperar até o final da animação e, em seguida, destruir o objeto.

02:07.090 --> 02:12.700
Assim, em vez de destruir o objeto instantaneamente, ele faz essa animação agradável e cerca de um quarto de segundo.

02:12.700 --> 02:15.430
segundo depois, ele será destruído.

02:15.430 --> 02:16.810
Podemos ver as configurações aqui.

02:16.810 --> 02:22.330
Eu reduzi o encolhimento para cerca de zero e ele faz isso em um quarto de segundo, mas você pode ajustar

02:22.330 --> 02:22.720
isso.

02:22.720 --> 02:25.870
Agora vamos falar sobre o design de som dentro da cena.

02:25.870 --> 02:27.280
Configurei um gerenciador de som.

02:27.280 --> 02:28.390
Vamos dar uma olhada nisso.

02:29.630 --> 02:37.250
Portanto, no ambiente, temos o gerenciador de som aqui e ele tem todos os sons que queremos alinhados

02:37.250 --> 02:38.900
ali, arrastados do nosso projeto.

02:38.900 --> 02:42.920
Estes são arquivos WAV ou M.P. threes que podemos usar para fazer alguns sons.

02:42.920 --> 02:50.000
Em seguida, posso chamar por índice e dizer "play zero" para a moeda, "play um" para a colisão, etc.

02:50.090 --> 02:51.410
Vamos dar uma olhada no código novamente.

02:52.490 --> 02:59.780
Então, o que eu faço aqui dentro do gatilho enter é depois de saber que tenho a moeda e começo a

02:59.780 --> 03:05.990
operação de encolhimento com uma chamada destroy me, eu então reproduzo o som que uso na instância do gerenciador de som play

03:05.990 --> 03:09.320
e passo o índice do que eu quero reproduzir.

03:09.680 --> 03:10.940
Todos eles são armazenados aqui.

03:10.940 --> 03:14.930
Portanto, agora dentro das constantes, sei exatamente qual som estou prestes a tocar.

03:14.930 --> 03:18.110
Há muitas maneiras de organizar o som em um projeto, mas essa maneira funciona.

03:18.110 --> 03:20.570
Bem, agora vamos falar sobre o design do jogo.

03:22.050 --> 03:25.770
Então, se diminuirmos um pouco o zoom e olharmos o mundo de cima.

03:27.430 --> 03:30.070
Foi assim que projetei o jogo originalmente.

03:30.130 --> 03:35.400
Desde o início, aqui na visão do jogo, pensei que queria poder ver a linha de chegada.

03:35.410 --> 03:42.700
Assim, entre a IU de tempo, a IU de pontuação e a conexão visual com o objetivo final, o usuário é conduzido

03:42.700 --> 03:45.340
um caminho claro para onde ele deve ir.

03:45.550 --> 03:48.610
Depois, à medida que o usuário joga o jogo, ele o fará.

03:49.430 --> 03:55.970
Movimentam-se por aqui, talvez tentando pegar todas as moedas que puderem, dobram a esquina, sobem e

03:55.970 --> 04:01.070
veriam que, à medida que coletassem as moedas, a pontuação aumentaria e, assim, conseguiriam a conexão.

04:01.070 --> 04:05.750
Essa pontuação é uma coisa boa nos jogos, normalmente, e eles percebem que ela aumenta quando coletam

04:05.750 --> 04:06.440
moedas.

04:06.440 --> 04:07.900
Portanto, isso funciona muito bem.

04:07.910 --> 04:11.350
Criei um padrão de labirinto muito simples aqui.

04:11.360 --> 04:17.600
Permitindo também que o usuário interessado no melhor momento possível possa passar por cima disso

04:17.600 --> 04:21.560
pequena colina, contornar a esquina e obter a pontuação mais rápida.

04:21.590 --> 04:25.370
Eles também veriam que venceram, mas não obtiveram a pontuação mais alta.

04:25.370 --> 04:27.830
Portanto, imagino que um jogador veria as coisas desta forma.

04:27.860 --> 04:33.950
Ele jogaria o jogo, provavelmente brincaria e perderia na primeira vez ao atingir o tempo zero.

04:34.130 --> 04:39.320
Em seguida, jogariam novamente, percebendo que talvez as moedas sejam boas, mas o objetivo é a linha de chegada.

04:39.320 --> 04:42.020
Chegue à linha de chegada com alguns pontos.

04:42.020 --> 04:47.600
Depois, em uma terceira jogada, eles podem tentar obter todas as moedas possíveis dentro do limite de tempo.

04:47.930 --> 04:49.100
Neste jogo de demonstração.

04:49.100 --> 04:54.320
Fiz isso de forma bastante simples, mas você pode se imaginar jogando com o usuário e imaginando as diferentes

04:54.320 --> 04:58.550
maneiras como ele abordaria o jogo para incentivá-lo a jogar de novo e de novo e de novo.

04:58.550 --> 05:03.680
Portanto, é apenas uma pequena observação sobre o design do jogo e que também contribui para a boa sensação de

05:03.680 --> 05:04.970
polonês no final do jogo.

05:04.970 --> 05:05.530
É isso aí.

05:05.540 --> 05:06.620
Muito obrigado.

05:07.820 --> 05:10.400
Como tarefa bônus, você pode adicionar o seu próprio polimento.

05:10.430 --> 05:11.750
Aqui estão algumas idéias.

05:11.750 --> 05:18.710
Sons de geminação mais programáticos, obstáculos, níveis ainda maiores ou vários níveis e diferentes

05:18.710 --> 05:19.940
tipos diferentes de bolas malucas.

05:21.810 --> 05:25.290
Na próxima seção, trataremos de tópicos avançados.
