WEBVTT

00:01.520 --> 00:04.670
Welcome to an Introduction to Game Physics Section one.

00:04.700 --> 00:08.360
In this section, we'll look at the benefits of creating physics based games.

00:08.510 --> 00:14.060
We'll look at the three major concerns of any physics system, and we'll see how those concerns apply

00:14.060 --> 00:17.310
to unity, Unity's physics system and project setup.

00:17.330 --> 00:20.180
We'll also look at physics, life cycle and timing.

00:20.360 --> 00:25.760
In this video integration, collision detection and collision resolution, we'll see.

00:25.760 --> 00:28.320
These are the three major concerns of any physics system.

00:28.340 --> 00:30.650
We'll see how unity handles each one.

00:30.650 --> 00:34.310
And we'll take a look at physics in the Unity editor for the first time.

00:34.550 --> 00:36.450
So what do we mean by game physics?

00:36.470 --> 00:41.920
Typically, when we think of game physics as a player, we think more of rigid body simulation.

00:41.930 --> 00:43.610
These are the calculations.

00:43.610 --> 00:50.690
For example, a stack of cubes on how cubes can stand on top of each other, collide, interact.

00:50.840 --> 00:52.820
But there's also spatial queries.

00:52.820 --> 00:55.690
Spatial queries are non visual.

00:55.700 --> 01:03.650
They're examining the space in the 3D world, using physics to check distances by projecting a line

01:03.650 --> 01:09.350
or a collider through space to judge where the obstacles are in the world.

01:09.350 --> 01:12.860
You can also look ahead to see potential future collisions.

01:12.860 --> 01:19.910
And for example, you could evaluate is my gun of my character pointing at the enemy and have the enemy

01:19.910 --> 01:21.380
with a reaction for that.

01:21.590 --> 01:28.460
The three major concerns of any physics system are integration, collision detection and collision resolution.

01:28.460 --> 01:31.460
Integration handles how physics fit into the game.

01:31.460 --> 01:38.780
World Collision detection is regarding how objects are overlapping and how the system detects that,

01:38.780 --> 01:44.840
and collision resolution is handling the reactions of those overlapping objects.

01:44.840 --> 01:49.460
For example, objects could bounce or move away from each other.

01:49.520 --> 01:50.900
Let's look at integration.

01:50.900 --> 01:53.780
Using physics in unity is optional.

01:53.780 --> 02:00.680
The way that unity projects are architected is game objects are in the three D space and each has one

02:00.680 --> 02:02.300
or more components on top.

02:02.540 --> 02:09.080
For example, in the screenshot we see a game object with the transform component that is obligatory.

02:09.080 --> 02:15.440
If we want to add and integrate physics into this project, we just add a rigid body onto that same

02:15.440 --> 02:16.160
game object.

02:16.160 --> 02:19.130
And now the game object is aware of its own space.

02:19.130 --> 02:20.810
Inside the physics world.

02:20.960 --> 02:26.480
Each frame, the physics system will review all the components related to physics and do the right updates

02:26.480 --> 02:27.590
and calculations.

02:27.890 --> 02:29.690
Collision detection is the second.

02:29.720 --> 02:36.410
It's the system that looks at all the physical based objects in the world and decides are they overlapping.

02:36.410 --> 02:42.260
For example, in this image we see a blue square and a pink square overlapping by just a little bit.

02:42.470 --> 02:47.060
Collision resolution is handling that overlap in the same situation.

02:47.060 --> 02:52.730
The blue square and pink Square would be moved apart by the physics system because rigid bodies may

02:52.730 --> 02:53.720
not overlap.

02:54.260 --> 03:00.000
After the physics system executes, there will be no overlapping rigid bodies in the entire world.

03:00.020 --> 03:03.470
Now, this happens so quickly that you don't perceive any overlap.

03:03.470 --> 03:05.540
That's the ideal setup in a world.

03:05.540 --> 03:10.550
You see objects interacting as if they are solid and cannot pass through each other.

03:10.970 --> 03:12.890
Now let's look at a demo Inside Unity.

03:12.890 --> 03:18.560
If you've downloaded the asset files that come with this course, open the core project and browse to

03:18.560 --> 03:19.310
the folder.

03:19.310 --> 03:20.240
Section one.

03:20.240 --> 03:23.890
Video two, you'll see a scene called three D Pyramid.

03:23.900 --> 03:25.310
We'll take a look at that together.

03:25.310 --> 03:27.200
You can follow along here.

03:27.200 --> 03:33.260
We'll examine the differences of start, stop and step as we control the scene and we'll examine some

03:33.260 --> 03:36.650
of the objects in the scene to look for a rigid body and collider.

03:37.410 --> 03:38.890
Here we are inside unity.

03:38.910 --> 03:43.680
If you download the course materials that come with this course, you'll see a project just like this.

03:43.710 --> 03:48.300
Inside, you can drill through the project window to find the related scene that we'll be touching.

03:48.300 --> 03:51.390
Or you can drill down through this menu here that I've created.

03:51.390 --> 03:53.190
So if we go to Section one.

03:54.130 --> 03:56.820
Video two, three, D Pyramid.

03:56.830 --> 04:01.290
We open it up, we can hit, play, pause and step through the scene.

04:01.300 --> 04:02.930
Step goes frame by frame.

04:02.970 --> 04:03.910
Here we're going to play.

04:03.920 --> 04:06.160
We see these boxes settle upon each other.

04:06.160 --> 04:11.680
We can then manipulate the scene and we see real world physics interaction.

04:12.100 --> 04:17.470
Each one of these cubes is set up in a similar way, and in the inspector window we can see we've got

04:17.470 --> 04:19.780
a box collider and a rigid body.

04:19.780 --> 04:26.020
We'll be learning about those two physics components in future lessons in the next video unities physics

04:26.020 --> 04:28.180
system, past, present and future.

04:28.270 --> 04:29.890
We'll look at what is unity.

04:29.890 --> 04:32.350
We'll take a step back and look at the system itself.

04:32.350 --> 04:37.780
We'll look at what libraries and power unity physics today, and we'll look into the future of unity

04:37.780 --> 04:38.440
physics.
