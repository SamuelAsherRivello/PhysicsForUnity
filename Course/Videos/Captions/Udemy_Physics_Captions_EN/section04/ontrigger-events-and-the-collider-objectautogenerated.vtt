WEBVTT

00:01.060 --> 00:03.670
On trigger events and the collider object.

00:03.760 --> 00:08.470
In this video, we'll cover what our trigger events and why are they useful in our game.

00:08.740 --> 00:12.280
We'll also open up the Unity editor and play with trigger events.

00:12.790 --> 00:14.890
So why use on trigger events?

00:15.220 --> 00:19.210
These events give us more information about physics intersections.

00:19.510 --> 00:22.630
These are between game objects with colliders.

00:22.630 --> 00:24.790
When is trigger is set to true.

00:25.150 --> 00:26.500
This is useful in a game.

00:26.500 --> 00:29.980
For example, when a character enters a dungeon room.

00:30.460 --> 00:33.730
Let's go through a scenario here with a non trigger event.

00:34.180 --> 00:37.300
A pink cube is following toward a trigger volume.

00:37.510 --> 00:43.120
Pink has a rigid body and a collider so that it falls and it detects where its bounds are.

00:43.120 --> 00:47.350
And the green has a collider with collider is trigger set to true.

00:47.620 --> 00:55.450
So pink is falling, pink enters the trigger volume, we get the on trigger enter one time while pink

00:55.450 --> 00:57.640
is in the trigger volume.

00:57.640 --> 01:01.900
While it's staying in there, we'll get a repeated call to the on trigger stay.

01:02.080 --> 01:04.840
We would expect this to be called many times.

01:05.570 --> 01:12.560
When pink exits, the trigger volume will get one time on trigger exit called and then pink continues

01:12.560 --> 01:13.220
to fall.

01:13.610 --> 01:16.740
Our focus here is really about the on trigger enter.

01:16.760 --> 01:21.530
That's usually enough information to get what we need from the callback.

01:21.620 --> 01:27.800
For example, again, when a character enters a dungeon room, we would get notified that the character

01:27.800 --> 01:34.040
has entered something and then we can inspect the collider object to find out if it's the dungeon room.

01:34.310 --> 01:40.460
So the collider object itself is the component that defines the shape of an object for the purposes

01:40.460 --> 01:41.700
of physical collision.

01:41.720 --> 01:47.210
We've used colliders before, of course, and we're going to focus on one property here, the collider

01:47.420 --> 01:51.510
game object that's going to tell us for the collider that we're hitting.

01:51.530 --> 01:53.600
What game object is it on?

01:53.990 --> 01:57.380
Let's take a look at a demo we'll look at on trigger events.

01:57.380 --> 02:03.290
One, we'll play the scene, we'll inspect the code, and as a bonus, we'll take a look at the console

02:03.290 --> 02:05.360
Windows feature called Collapse.

02:06.600 --> 02:07.610
Here we are in unity.

02:07.620 --> 02:09.150
Let's open up the next scene.

02:12.660 --> 02:19.260
The en trigger events, number one, and we'll notice that q b here is set up with a box collider with

02:19.260 --> 02:21.480
is trigger set on.

02:21.780 --> 02:23.430
There's also no rigid body.

02:23.640 --> 02:27.030
When we play the scene, we expect the pink to fall right through it.

02:27.180 --> 02:28.020
Let's see.

02:32.280 --> 02:32.650
Yep.

02:32.760 --> 02:34.770
It behaves exactly as we'd expect.

02:34.860 --> 02:42.110
And if we look at the console we see we get one enter many stays and one exit.

02:42.120 --> 02:43.230
Let's look at the code.

02:46.790 --> 02:47.390
On trigger.

02:47.390 --> 02:48.560
Enter on sugar.

02:48.560 --> 02:49.830
Stay and on sugar.

02:49.850 --> 02:50.330
Exit.

02:50.330 --> 02:51.600
Just like we'd expect.

02:51.620 --> 02:52.430
That's it.

02:53.600 --> 02:57.320
In the next video, we'll look at adding Programatic forces.

02:57.920 --> 03:04.880
We'll cover movement and unity from a traditional sense movement in unity for physics specifically.

03:04.970 --> 03:10.100
We'll look at types of forces and then we'll open up the unity editor and we'll play with those forces.
