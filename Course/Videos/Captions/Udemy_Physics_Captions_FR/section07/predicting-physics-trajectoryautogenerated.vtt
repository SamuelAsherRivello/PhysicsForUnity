WEBVTT

00:01.540 --> 00:03.510
Prédiction de la trajectoire de la physique.

00:03.520 --> 00:08.050
Dans cette vidéo, nous allons voir comment nous pouvons prédire les mouvements physiques avant qu'ils ne se produisent.

00:08.050 --> 00:13.090
Nous verrons comment cela peut aider nos jeux et nos joueurs, puis nous ouvrirons unity et verrons

00:13.090 --> 00:16.270
un exemple concret de prédiction de trajectoire.

00:16.270 --> 00:18.100
Qu'est-ce que la prédiction physique ?

00:18.100 --> 00:24.400
La prédiction consiste à calculer les propriétés futures, par exemple, la position ou la rotation d'objets à l'intérieur d'une trajectoire.

00:24.400 --> 00:25.480
votre système physique.

00:25.750 --> 00:33.280
Par exemple, la visualisation affiche une ligne ou une flèche pour suggérer à l'utilisateur l'emplacement de sa balle.

00:33.280 --> 00:34.240
ira.

00:34.240 --> 00:40.900
Ou encore, je pense que cette prédiction fournit des informations plus pertinentes aux systèmes d'intelligence de notre jeu.

00:41.970 --> 00:45.870
Prenons l'exemple de notre jeu de la section 5 "Upset Ducks".

00:45.870 --> 00:50.220
Actuellement, il est complet et jouable, mais il n'a pas de physique prédictive.

00:50.220 --> 00:57.330
Un exemple de visualisation serait de calculer la trajectoire de l'astéroïde et d'afficher une flèche comme visualisation.

00:57.330 --> 01:02.220
Cela permettrait à l'utilisateur d'avoir un meilleur retour d'information et une meilleure connexion avec le jeu.

01:02.220 --> 01:03.840
Une sensation de jeu plus positive.

01:03.840 --> 01:09.330
Le résultat serait d'aider nos utilisateurs à faire des choix plus judicieux avant même de libérer l'astéroïde.

01:09.330 --> 01:11.400
Ils sauraient plus ou moins où il se dirige.

01:11.430 --> 01:13.410
Un autre exemple serait l'IA.

01:13.440 --> 01:16.500
Nous pouvons calculer la trajectoire de l'astéroïde pour l'œil.

01:16.530 --> 01:20.520
Nous pourrions faire en sorte que les ennemis réagissent avec crainte lorsque nous les visons.

01:20.520 --> 01:24.570
Ou bien nous pourrions avoir des ennemis qui sautent pour éviter les collisions.

01:24.810 --> 01:26.450
Ou, bien sûr, nous pouvons faire les deux.

01:26.460 --> 01:29.820
Nous pourrions avoir une visualisation et une IA actualisée.

01:30.450 --> 01:32.190
Comment prédire la physique ?

01:32.700 --> 01:37.200
Nous créons une scène primaire et nous configurons un objet avec des forces physiques.

01:37.200 --> 01:40.450
Nous créons ensuite une scène physique secondaire invisible.

01:40.470 --> 01:47.940
Nous pouvons y ajouter des billes de marquage et, pour chacune d'entre elles, simuler le temps Delta à l'aide d'un Delta unique.

01:47.940 --> 01:52.860
temps Delta unique qui parcourt l'arc de déplacement de l'objet.

01:53.430 --> 01:54.790
Jetons un coup d'œil à une démonstration.

01:54.810 --> 01:56.860
Regardons la prédiction de trajectoire.

01:56.880 --> 01:58.080
Jouons la scène.

01:58.080 --> 02:03.750
Nous allons voir l'inspecteur pour l'objet de jeu jumping Cube, nous allons mettre à jour sa force, nous allons voir la prédiction,

02:03.750 --> 02:05.160
et inspectera le code.

02:06.330 --> 02:06.570
Nous sommes d'accord.

02:06.570 --> 02:11.800
Nous voici à l'intérieur de unity, et nous passons à la prédiction de trajectoire.

02:11.820 --> 02:14.700
Dans ce projet, ce que j'ai mis en place est...

02:15.660 --> 02:18.050
Un cube contenant un script.

02:18.060 --> 02:25.940
Ce script illustre l'orientation de la force physique sur le point d'être appliquée.

02:25.950 --> 02:31.970
Vous pouvez voir cet arc de marqueurs devant le cube.

02:31.980 --> 02:36.810
Ce que je peux faire ici, c'est la force physique qui va être appliquée.

02:36.810 --> 02:41.550
J'utilise cette même valeur pour montrer où cette force va se déplacer.

02:41.940 --> 02:46.520
Pendant que je travaillais sur ce projet, je me suis rendu compte qu'il s'agissait d'un élément relativement nouveau dans unity.

02:46.530 --> 02:53.610
C'est une fonctionnalité publique, mais je ne l'avais pas encore utilisée en production et j'ai été déçu.

02:53.610 --> 02:55.200
par la vitesse de cette fonction.

02:55.200 --> 03:01.440
En fait, ce n'est pas très fluide et il pourrait y avoir des optimisations à faire, mais cela fonctionne.

03:01.440 --> 03:02.310
et il fonctionne bien.

03:02.310 --> 03:06.900
Je peux donc déplacer les forces ici et j'ai quelques boutons ici qui seraient mis en place,

03:06.900 --> 03:10.250
probablement en simulant l'entrée de l'utilisateur d'une manière ou d'une autre pour se déplacer.

03:10.260 --> 03:15.450
Je vais aller de l'avant et utiliser la force et vous pouvez voir qu'il saute ici et qu'il suit parfaitement la ligne.

03:15.450 --> 03:21.150
Vous voyez, j'ai quelques curseurs de prédiction ici pour que nous puissions en faire plus ou moins.

03:22.520 --> 03:25.820
Plus ou moins de ces marqueurs dans l'arc.

03:26.360 --> 03:29.540
Voyons ce qu'il en est si j'entre dans le code.

03:30.590 --> 03:31.910
Passons en revue les éléments importants.

03:31.910 --> 03:36.240
Les propriétés sérialisées que nous venons de voir sont présentes au début.

03:36.260 --> 03:41.480
Ce que je fais, c'est que je crée de nouveaux paramètres de scène et une nouvelle scène.

03:41.750 --> 03:44.440
Il s'agit d'un type appelé physique locale.

03:44.450 --> 03:50.600
Je crée donc une nouvelle scène qui s'exécutera de manière transparente à côté de notre scène principale.

03:51.080 --> 03:53.000
C'est ce que je fais au démarrage.

03:53.510 --> 03:56.750
Puis ici, dans le.

03:58.410 --> 03:59.640
Dans la prédiction.

04:03.690 --> 04:05.200
Moi voir ici.

04:05.210 --> 04:08.330
Que se passe-t-il réellement dans la prédiction ?

04:09.230 --> 04:11.840
Comme je l'appelle, il s'agit de marqueurs d'utilisation.

04:12.170 --> 04:14.570
J'ai mis en place quelques itérations de chronométrage.

04:14.570 --> 04:16.880
Voici donc le gros du travail, n'est-ce pas ?

04:17.090 --> 04:18.210
Il y a deux étapes.

04:18.230 --> 04:23.960
Tout d'abord, je reconstruis les marqueurs, donc périodiquement, lorsque je mets à jour l'inspecteur en modifiant certains des marqueurs.

04:23.960 --> 04:25.610
valeurs, je reconstruis les marqueurs.

04:25.640 --> 04:29.690
Encore une fois, il s'agit de régénérer ces objets de jeu de balle de marqueur.

04:30.200 --> 04:33.580
Et ce que je fais, c'est boucler et créer suffisamment d'objets.

04:33.590 --> 04:41.060
Maintenant que nous en avons suffisamment, remarquez qu'à la ligne 151, je déplace ces objets de jeu vers

04:41.060 --> 04:46.070
l'autre scène, vers la scène de prédiction que nous avons créée, et je leur donne également un nom qui

04:46.070 --> 04:47.660
m'aider dans l'inspecteur.

04:47.750 --> 04:51.590
Après avoir reconstruit les marqueurs, je peux donc effectuer la prédiction.

04:51.590 --> 04:57.980
Je prends donc le même ensemble d'itérations de prédiction et je les parcours en boucle.

04:57.980 --> 05:04.700
Et dans cette boucle for, ce que je fais, c'est que pour chaque prédiction que je fais, je simule la scène de

05:04.700 --> 05:05.300
physique.

05:05.300 --> 05:06.130
Un tick.

05:06.820 --> 05:12.060
Donc si je n'avais pas appelé manuellement simulate, il n'y aurait pas de simulation physique ici.

05:12.070 --> 05:19.210
Ce que je peux faire, c'est boucler la boucle et cocher la case une fois, puis déplacer l'un des marqueurs à cet endroit.

05:19.210 --> 05:25.440
Puis je le coche à nouveau et je déplace le marqueur suivant à cet endroit, et je continue jusqu'à ce que j'aie parcouru tout l'arc.

05:25.450 --> 05:26.620
Et c'est tout.

05:27.460 --> 05:29.170
Le processus fonctionne très bien.

05:29.170 --> 05:31.140
Il me donne exactement le résultat que je veux.

05:31.150 --> 05:37.690
Comme je l'ai dit, le processus n'est pas très rapide en termes de fréquence d'images, mais il fonctionne toujours très bien.

05:38.110 --> 05:38.750
C'est tout.

05:38.770 --> 05:39.730
Merci beaucoup.

05:41.950 --> 05:47.470
Dans la prochaine vidéo, nous examinerons la pile technologique orientée données ou les points pour la physique de l'unité.
