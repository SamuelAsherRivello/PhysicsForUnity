WEBVTT

00:01.610 --> 00:04.110
Section seven Advanced Topics.

00:04.130 --> 00:10.400
In this section, we'll cover best practices with physics, optimizing physics, predicting physics

00:10.400 --> 00:13.550
trajectory, as well as data oriented technology.

00:13.550 --> 00:16.400
Stack word dots for unity physics.

00:17.460 --> 00:19.350
Best practices with physics.

00:19.590 --> 00:23.800
In this video, we will cover the best practices you should do.

00:23.820 --> 00:30.750
We'll see the inefficient steps to be avoided and we'll look at the best project set up for best performance.

00:31.380 --> 00:33.780
Gotchas, dos and Don'ts.

00:33.810 --> 00:38.010
Gotchas are the helpful hints, which are not always obvious when developing.

00:38.010 --> 00:43.800
DOS are the best practices that give us smooth results, and the don't list will be things to avoid

00:43.800 --> 00:47.400
because they create bottlenecks or otherwise bad performance.

00:47.400 --> 00:48.900
Some general gotchas.

00:48.900 --> 00:52.800
First of all, when you're setting up your project, mimic the world scale.

00:52.800 --> 00:57.330
A common problem when you start out with rigid bodies is things look like they're in slow motion.

00:57.330 --> 01:01.080
This is actually just due to scale the default gravity settings.

01:01.080 --> 01:08.430
Assume that you have units corresponding to two units high for a human or four units long for a car.

01:08.430 --> 01:11.610
So try to use those scale are pretty close to it.

01:11.610 --> 01:12.630
Determinism.

01:12.630 --> 01:16.710
Generally speaking, today's unity physics is not deterministic.

01:16.710 --> 01:23.190
That means that it's not going to repeat the exact same result on every machine every time.

01:23.190 --> 01:27.560
This is due to the way that different compilers and processors implement their math.

01:27.570 --> 01:31.950
However, in the future, Unity dots physics promises determinism.

01:32.190 --> 01:35.940
Some general dos choose to DD versus three d smartly.

01:35.940 --> 01:40.410
If you're doing a 2D project, don't use the three d physics components.

01:40.410 --> 01:46.590
It's overkill static for each game object or go in a project.

01:46.590 --> 01:47.940
Set them to static.

01:47.940 --> 01:49.530
If you notice they're not moving.

01:49.530 --> 01:52.410
This is floor background platform elements.

01:52.410 --> 01:54.030
It's a great optimization.

01:54.030 --> 02:00.360
Next, keep your scale at one If you can try to keep your objects scales at one that will maximize the

02:00.360 --> 02:06.510
performance for rigid body and joints movement Use rigid body move position and move rotation instead

02:06.510 --> 02:09.330
of direct transform access or use.

02:09.330 --> 02:10.800
Add force and add torque.

02:10.800 --> 02:17.790
As we talked about before, joints use small differences less than ten times different in the masses

02:17.790 --> 02:23.640
between rigid body components that'll give you smoother results, things you shouldn't do in a general

02:23.640 --> 02:24.240
sense.

02:24.270 --> 02:30.240
Avoid making rotation or scale changes because this recreates the colliders and it's expensive to do.

02:30.270 --> 02:37.860
Don't use mesh colliders if you can get away with it, use these simpler primitive colliders box sphere,

02:37.860 --> 02:43.800
etc. If you can even add multiple because mesh colliders are very expensive to operate and avoid using

02:43.800 --> 02:46.350
wheel colliders, they're also very expensive.

02:46.620 --> 02:51.990
Some recasting tips things to do use the least amount of raise to get the job done.

02:51.990 --> 02:56.820
Try to be specific using layer masks on your ray casts things not to do.

02:56.850 --> 02:59.670
Don't extend the rays length more than you need to.

02:59.790 --> 03:05.670
If you know more or less that your level is 100 units, try and set that as the max so you're not scanning

03:05.670 --> 03:07.920
out into infinity, which is expensive.

03:07.920 --> 03:10.890
And don't use Ray cast against Mesh Collider.

03:10.890 --> 03:12.330
It's really expensive.

03:13.780 --> 03:16.360
Some good tips for Unity Project setup.

03:16.360 --> 03:18.720
Optimize the layer collision matrix.

03:18.730 --> 03:20.620
You can see it at the bottom of the screenshot.

03:20.620 --> 03:23.200
By default, everything collides with everything you know.

03:23.200 --> 03:27.400
After you get your project set up, go ahead and uncheck the boxes that aren't needed.

03:27.400 --> 03:32.980
It's going to lead to better results for ragdoll use, equal mass for all rigid bodies.

03:32.980 --> 03:37.480
Avoid using small limit spans like five or 15 or more.

03:37.480 --> 03:39.540
That's better if it's jittery.

03:39.550 --> 03:43.690
Update the default solver iterations use 20 or more.

03:44.600 --> 03:50.690
Some project settings in the time area do tweak the fix time step tweak it to reach a good compromise

03:50.690 --> 03:56.540
between accuracy, which is a high value, and the CPU spent on physics, which is a low value.

03:56.570 --> 04:02.120
You can see there that if we tweak it to like 0.1, that means we're still getting ten physics updates

04:02.120 --> 04:03.810
per second and that's pretty good.

04:03.830 --> 04:10.190
Tweak the maximum allowed timestamp as well, use 8 to 10 to cap the time spent on physics in your worst

04:10.190 --> 04:11.210
case scenario.

04:11.920 --> 04:18.160
Do use the unity profiler periodically, even during early development, open it up and investigate

04:18.160 --> 04:20.150
what large spikes in performance you have.

04:20.170 --> 04:24.250
Look for warnings to also it'll show a warning there.

04:24.250 --> 04:29.710
If, for example, you accidentally move something marked static, which is possible at gameplay, but

04:29.710 --> 04:30.910
really expensive.

04:32.500 --> 04:36.160
In the next video, we'll talk about optimizing physics.
