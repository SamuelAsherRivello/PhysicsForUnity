WEBVTT

00:00.670 --> 00:04.450
Physique Ray cast et Ray cast Command Schedule batch.

00:04.660 --> 00:08.500
Dans cette vidéo, nous verrons ce que sont les requêtes spatiales en physique.

00:08.650 --> 00:10.870
Pourquoi sont-elles utiles et comment les utiliser ?

00:11.320 --> 00:13.900
Ensuite, nous ouvrirons l'éditeur Unity et nous jouerons avec elles.

00:14.530 --> 00:15.810
Revenons en arrière.

00:15.820 --> 00:18.550
Que veut-on dire quand on parle d'un système physique de jeu ?

00:18.580 --> 00:20.140
Eh bien, il y a deux parties principales.

00:20.140 --> 00:23.980
Jusqu'à présent, la majeure partie de ce cours a porté sur la simulation de corps rigides.

00:24.280 --> 00:28.000
Il s'agit du mouvement réaliste et de l'interaction entre des groupes d'objets.

00:28.240 --> 00:31.120
Nous n'avons pas encore beaucoup parlé des requêtes spatiales.

00:31.330 --> 00:39.130
Il s'agit de la projection d'un rayon ou d'un collisionneur dans l'espace pour connaître la distance et vérifier les collisions futures.

00:39.400 --> 00:44.290
Par exemple, nous pourrions voir si mon arme pointe directement vers l'ennemi.

00:44.590 --> 00:49.090
La classe de physique définit la physique globale, les propriétés et les méthodes d'aide.

00:49.210 --> 00:55.270
Nous allons nous concentrer sur la refonte de la physique, l'une des méthodes qui nous donne des informations intéressantes à apprendre.

00:55.270 --> 00:57.130
Y a-t-il quelque chose devant mon objet ?

00:57.130 --> 00:59.200
Qu'y a-t-il exactement devant mon objet ?

00:59.200 --> 00:59.620
Qu'est-ce que c'est ?

00:59.620 --> 01:02.260
L'espace vide se trouve devant l'objet ?

01:02.440 --> 01:04.390
Alors pourquoi faire des requêtes spatiales ?

01:04.540 --> 01:08.370
Les requêtes spatiales peuvent nous aider à répondre à de nombreuses questions.

01:08.380 --> 01:09.970
Notre ennemi est-il proche d'un mur ?

01:09.970 --> 01:11.830
L'ennemi pourrait faire demi-tour.

01:11.860 --> 01:13.540
L'ennemi est-il dans notre ligne de mire ?

01:13.540 --> 01:17.300
Eh bien, nous pourrions indiquer au joueur qu'il est temps de tirer.

01:17.320 --> 01:18.640
L'ennemi peut-il me voir ?

01:18.670 --> 01:19.780
Cela pourrait aider l'ennemi.

01:19.780 --> 01:20.860
Alerte à l'IA.

01:20.860 --> 01:21.760
Autre ennemi.

01:21.760 --> 01:25.170
L'IA est un objet situé sous la position de ma souris.

01:25.180 --> 01:27.580
Cela peut nous aider à sélectionner ou à faire glisser l'objet.

01:27.580 --> 01:30.970
À quel endroit précis d'un collisionneur la collision s'est-elle produite ?

01:31.000 --> 01:36.940
Cela pourrait nous indiquer la différence de points récompensés pour un tir dans le mille sur une cible ou un point plus bas

01:36.940 --> 01:37.540
valeur.

01:37.900 --> 01:39.520
Et il y a bien d'autres possibilités.

01:39.520 --> 01:41.260
C'est très utile.

01:41.260 --> 01:45.360
Le cours de physique que j'ai mentionné a beaucoup de méthodes à notre disposition.

01:45.370 --> 01:47.080
Parlons de la refonte.

01:47.110 --> 01:48.800
Jetez un coup d'œil au diagramme ci-dessous.

01:48.820 --> 01:55.330
Imaginons que nous ayons lancé un tableau à partir du point un et que nous l'ayons lancé en direction de la boîte rose.

01:55.330 --> 02:00.980
Cela va nous renvoyer une liste ordonnée des collisionneurs qui se croisent dans la scène.

02:01.000 --> 02:03.880
Dans ce cas, elle renvoie le numéro trois.

02:03.910 --> 02:07.510
Remarquez que nous n'allons pas nous lancer dans l'espace infini.

02:07.510 --> 02:13.090
Nous allons utiliser une distance finie qui est une optimisation qui va faciliter les calculs.

02:13.090 --> 02:18.610
Par exemple, si la distance est réglée sur quatre, nous entrerons en collision avec la boîte rose, mais pas avec les objets suivants

02:18.610 --> 02:19.570
la boîte bleue.

02:19.600 --> 02:22.030
Une méthode similaire serait le lancer de boîte.

02:22.030 --> 02:27.690
Cette méthode permet de créer une forme à partir du point un jusqu'au cube rose, mais pas jusqu'au cube bleu.

02:27.700 --> 02:32.770
Au lieu d'envoyer une ligne ou un réseau, la distance ici est un espace plus épais.

02:32.770 --> 02:38.920
L'array cast, le command schedule, les fonctions batch, quelque chose comme la refonte de la physique, mais c'est beaucoup plus,

02:38.920 --> 02:39.940
beaucoup plus rapide.

02:39.940 --> 02:46.660
Les opérations seront effectuées de manière asynchrone et en parallèle sur des processeurs parallèles s'ils sont disponibles.

02:46.660 --> 02:48.940
Cela nous permet d'atteindre une vitesse fulgurante.

02:49.120 --> 02:53.200
Il s'agit d'une fonctionnalité relativement nouvelle pour unity, mais elle est disponible publiquement.

02:53.410 --> 02:54.670
Voyons quelques démonstrations.

02:54.940 --> 02:57.130
Jetons un coup d'œil à la démo Ray cast.

02:57.160 --> 02:59.800
Nous allons jouer la scène et inspecter le code.

03:03.000 --> 03:03.180
Ici.

03:03.180 --> 03:05.520
Nous allons examiner la démo recast.

03:06.770 --> 03:08.010
Nous exécutons la scène.

03:08.190 --> 03:16.410
Cette capsule, comme nous pouvons le voir avec la ligne directrice rouge ici, envoie une distribution de taux en dessous d'elle.

03:16.770 --> 03:20.850
Dans la fenêtre de la console, nous voyons ce avec quoi elle entre en collision.

03:21.240 --> 03:25.290
La ligne rouge, comme on peut s'y attendre, indique que la rampe est proche du sol.

03:25.350 --> 03:31.690
Maintenant, si je la déplace manuellement hors de la rampe, elle indique que le sol est proche en dessous.

03:31.710 --> 03:37.980
Vous voyez donc que nous pouvons détecter l'objet qui se trouve en dessous de nous ou dans la direction que nous voulons et obtenir des informations sur les objets qui se trouvent en dessous de nous.

03:37.980 --> 03:39.020
informations à son sujet.

03:39.030 --> 03:40.200
Voyons comment cela fonctionne.

03:44.590 --> 03:45.760
Dans la mise à jour.

03:46.670 --> 03:52.220
Ce que nous faisons, c'est que nous utilisons la physique, la refonte, et nous lançons un rayon dans la direction du bas.

03:52.460 --> 03:57.200
Ensuite, s'il y a un collisionneur avec lequel nous sommes entrés en collision, nous vérifions sa couche.

03:57.410 --> 04:00.890
S'il s'agit d'une couche de sol, dans ce cas, nous effectuons un journal de débogage.

04:01.010 --> 04:07.570
Les pas de votre personnage changent peut-être de son lorsqu'il marche sur une surface métallique ou sur de l'eau.

04:07.580 --> 04:09.230
On peut faire des choses comme ça.

04:09.560 --> 04:10.530
Et c'est tout.

04:10.550 --> 04:13.160
Nous allons jeter un coup d'œil à la démo de la commande Ray cast.

04:13.190 --> 04:15.800
Nous allons jouer la scène et inspecter le code.

04:16.770 --> 04:19.650
Très bien, ouvrons la démo de la commande Ray cast.

04:21.560 --> 04:21.830
Ici.

04:21.830 --> 04:27.090
Nous retrouvons la même configuration que dans notre démo Recast, mais avec la commande recast.

04:27.110 --> 04:32.030
Ce que nous allons faire est une manière légèrement différente d'obtenir le résultat final.

04:32.030 --> 04:37.760
Comme dans le cas précédent, la rampe est proche dans notre console.

04:38.150 --> 04:43.370
Nous nous déplaçons, le sol est proche du bas dans notre console, nous détectons donc ce qui se trouve en dessous de nous.

04:43.600 --> 04:46.070
Voyons que l'implémentation est ici différente.

04:47.070 --> 04:49.350
À l'intérieur de la commande recast.

04:50.460 --> 04:53.940
Ce que nous faisons est à l'intérieur de la commande update.

04:54.060 --> 05:01.790
À chaque mise à jour, je crée une nouvelle commande de refonte et je planifie un lot de commandes.

05:01.800 --> 05:08.310
Dans cet exemple simple, ce que je fais ici, c'est que j'alimente une liste de commandes avec une seule.

05:08.310 --> 05:10.800
Je mets la commande zéro index un.

05:10.800 --> 05:16.620
Mais vous pouvez imaginer que si vous avez une scène complexe où vous faites beaucoup de remaniements, nous

05:16.620 --> 05:20.730
pourrait les mettre tous dans la même liste de commandes et appeler le lot de programmation.

05:20.730 --> 05:21.450
Une fois.

05:21.540 --> 05:27.030
Nous pouvons alors garantir que nous obtiendrons des résultats très rapides, car voici ce qui va se passer

05:27.030 --> 05:31.560
de manière asynchrone et sur plusieurs cœurs.

05:31.560 --> 05:35.880
Si l'ordinateur ou l'appareil sur lequel vous travaillez dispose de plusieurs processeurs.

05:36.490 --> 05:42.490
Ensuite, comme dans l'exemple précédent, nous passons en revue les résultats que nous avons obtenus et nous constatons ce qui suit

05:42.490 --> 05:48.550
si pour l'un des hits, il y a un collisionneur présent et s'il s'agit du sol ou de la rampe, c'est

05:48.550 --> 05:49.000
c'est le cas.

05:49.150 --> 05:50.230
Une attribution de bonus.

05:50.230 --> 05:56.530
Si vous voulez aller plus loin dans le Ray casting, jetez un coup d'œil à la démo de Ray cast par glisser-déposer, jouez

05:56.530 --> 05:58.450
la scène et inspectez le code.

05:59.140 --> 06:05.260
Dans la prochaine vidéo, nous aborderons la physique, le débogage, le débogage, le dessin de rayons physiques, la fenêtre de débogage et les éléments suivants

06:05.260 --> 06:06.490
profil d'une fenêtre.

06:06.910 --> 06:09.790
Dans cette vidéo, nous verrons ce qu'est le bugging.

06:09.790 --> 06:12.520
Quels sont les défis posés par le débogage de la physique ?

06:12.520 --> 06:14.770
Quels sont les outils dont nous disposons pour nous aider ?

06:15.070 --> 06:18.580
Enfin, nous allons ouvrir l'éditeur Unity et jouer avec tout cela.
