WEBVTT

00:00.650 --> 00:06.320
Débogage de la physique : débogage de la physique des rayons, fenêtre de débogage et fenêtre de profilage.

00:06.410 --> 00:11.660
Dans cette vidéo, nous verrons ce qu'est le débogage et quels sont les défis que pose le débogage de la physique.

00:11.690 --> 00:16.700
Nous examinerons les outils dont nous disposons pour nous aider, puis nous ouvrirons unity et nous nous attaquerons à quelques problèmes courants de débogage.

00:16.700 --> 00:17.490
scénarios communs.

00:17.510 --> 00:18.950
Qu'est-ce que le débogage ?

00:18.980 --> 00:21.170
Un bug est un défaut d'erreur.

00:21.170 --> 00:23.860
Échec ou faute dans la programmation informatique.

00:23.870 --> 00:28.070
Le débogage est le processus d'identification et de suppression de ces erreurs dans un logiciel.

00:28.070 --> 00:31.670
Quels sont donc les défis posés par le débogage de la physique en particulier ?

00:31.670 --> 00:38.200
La physique est un système extrêmement complexe et gourmand en ressources, d'où l'importance de l'optimisation.

00:38.210 --> 00:45.470
La physique comprend un grand nombre de paramètres de configuration, de composants, de propriétés et autres, ainsi que vos propres paramètres personnalisés.

00:45.470 --> 00:48.860
La physique comprend de nombreux paramètres de configuration, des composants, des propriétés et autres, ainsi que vos propres propriétés de code personnalisées, des gestionnaires d'événements et autres.

00:48.860 --> 00:50.480
C'est beaucoup de complexité.

00:50.480 --> 00:55.760
Heureusement, unity fait automatiquement beaucoup pour vous avec unity physics, c'est bien.

00:55.760 --> 01:00.200
Mais à cause de la complexité du système, il y a beaucoup de choses qui peuvent mal tourner et c'est mauvais.

01:00.200 --> 01:02.300
Quels sont donc les outils de débogage général ?

01:02.300 --> 01:05.120
La fenêtre de la console Unity est très importante.

01:05.120 --> 01:09.700
Elle affiche les erreurs, les avertissements et les autres messages générés par Unity.

01:09.710 --> 01:15.290
Il affichera également vos messages personnalisés que vous générez avec debug log pour l'ouvrir.

01:15.290 --> 01:16.940
Utilisez la fenêtre unity.

01:16.940 --> 01:20.870
L'utilisation générale de la fenêtre de console est juste une détection.

01:20.870 --> 01:22.760
Est-ce que unity a atteint cette ligne de code ?

01:22.760 --> 01:29.000
Vous pouvez également dire quelle est la valeur spécifique d'une propriété ou d'une variable que vous pouvez voir dans le code

01:29.000 --> 01:36.710
snippet debug log Hello world transmet ce message à la console breakpoints pause du jeu à une

01:36.710 --> 01:41.660
moment précis du code et vous permet d'inspecter toutes les variables qui sont en mémoire.

01:41.660 --> 01:47.360
La configuration consiste à attacher l'unité de l'éditeur de code et à définir un point d'arrêt en cliquant dans la marge.

01:47.360 --> 01:51.650
Vous lancez unity et jouez normalement, en attendant que unity se mette en pause.

01:51.650 --> 01:54.890
Lorsque unity fait une pause, il vous indique que vous êtes à l'un de vos points d'arrêt.

01:54.890 --> 02:01.160
Inspectez l'éditeur de code et vous pouvez continuer ou arrêter l'utilisation de la session de débogage ici ou dans Unity.

02:01.160 --> 02:02.510
atteint cette ligne de code ?

02:02.510 --> 02:06.590
Et quelles sont les valeurs spécifiques de nombreuses propriétés et variables ?

02:06.770 --> 02:08.600
Code de débogage et de dessin personnalisé.

02:08.600 --> 02:13.250
L'API d'Unity permet de dessiner des lignes et des formes dans l'éditeur quand et où on le souhaite.

02:13.250 --> 02:17.810
Vous pouvez également le faire pour du code non physique, mais voici quelques exemples que j'ai utilisés.

02:17.810 --> 02:19.970
Où les collisions se sont-elles produites exactement ?

02:19.970 --> 02:25.340
Où se situent les limites de mon objet à un moment donné et quelle a été la trajectoire de mon objet dans le temps ?

02:25.340 --> 02:26.870
Le code est assez simple.

02:26.870 --> 02:28.250
Jetons un coup d'œil à une démo.

02:28.250 --> 02:34.310
Nous allons regarder la boîte suivante, jouer la scène, inspecter le code, nous allons ajouter notre propre journal de débogage.

02:34.310 --> 02:38.090
pour le voir fonctionner dans la fenêtre de la console, puis nous ajouterons un point d'arrêt.

02:38.210 --> 02:38.420
Nous ajouterons ensuite un point d'arrêt.

02:38.420 --> 02:40.820
Jetons un coup d'œil à la scène suivante.

02:40.820 --> 02:42.950
Nous allons examiner la boîte suivante.

02:42.970 --> 02:48.620
Ce qui m'intéresse le plus ici, c'est la vue de la scène, car j'ai mis en place un code de débogage.

02:48.620 --> 02:52.430
Il va dessiner quelques lignes directrices utiles, donc je vais lancer la scène.

02:53.450 --> 02:56.330
Et pendant que la scène se déroule, le cube tombe.

02:57.150 --> 02:59.820
Je tape plusieurs fois sur d, je vais faire une pause.

02:59.940 --> 03:06.420
Les lignes que nous pouvons voir ici, en vert pour le contact, en bleu pour l'endroit où la boîte est déplacée, sont les suivantes

03:06.420 --> 03:11.190
sa durée de vie et le blanc pour certaines limites de la clé où j'ai tapé sur la clé.

03:11.220 --> 03:13.760
Maintenant, il se peut que vous ne souhaitiez pas appuyer sur une touche.

03:13.770 --> 03:18.000
Peut-être voulez-vous que cela se produise en fonction d'une situation programmatique.

03:18.000 --> 03:23.780
Mais je voulais juste montrer que cela est basé sur une collision, sur la position, le déplacement ou l'entrée de l'utilisateur.

03:23.790 --> 03:26.250
Ceci n'est visible que pour nous, les développeurs.

03:26.250 --> 03:27.630
Ce n'est pas pour l'utilisateur final.

03:27.790 --> 03:29.790
Entrons dans le vif du sujet et jetons un coup d'œil au code.

03:29.790 --> 03:33.810
Vous pouvez imaginer quelques scénarios dans lesquels cela pourrait être utile pour des informations de débogage.

03:34.140 --> 03:40.350
Tout d'abord, lorsque nous avons une collision, nous parcourons le contexte de collision et nous dessinons un tableau.

03:40.380 --> 03:42.420
C'est ainsi que nous obtenons ces petites lignes vertes.

03:43.070 --> 03:51.110
Ensuite, chaque fois que je tape sur la touche, je recueille une liste des positions et à chaque image, je redessine toutes ces positions.

03:51.110 --> 03:54.950
petites cases blanches en fonction du fonctionnement du gizmo, du tiroir, du cube en fil de fer.

03:54.950 --> 03:59.300
Je dois les redessiner à chaque image, puis dessiner le chemin entier.

03:59.300 --> 04:00.170
C'est assez simple.

04:00.170 --> 04:06.860
Je capture simplement la position au démarrage, puis à chaque mise à jour, je fais un débogage et dessine une ligne à partir de la dernière position.

04:06.860 --> 04:08.120
à la position actuelle.

04:08.120 --> 04:12.440
C'est ainsi que j'obtiens cette longue ligne bleue qui indique où la boîte s'est trouvée au cours de sa vie.

04:12.740 --> 04:13.250
C'est tout.

04:13.250 --> 04:14.030
C'est assez simple.

04:14.030 --> 04:18.350
Quels sont donc les outils conçus spécifiquement pour la physique, le débogage et l'unité ?

04:18.380 --> 04:23.660
Eh bien, tout d'abord, si nous regardons le corps rigide dans l'inspecteur, nous pouvons voir qu'il y a une info

04:23.660 --> 04:29.200
que nous pouvons développer et nous pouvons voir beaucoup de très bonnes valeurs qui sont mises à jour régulièrement.

04:29.210 --> 04:30.950
C'est très utile pour le débogage.

04:30.950 --> 04:35.170
Vous pouvez le regarder en direct ou l'interrompre à tout moment en utilisant la pause de l'éditeur Unity.

04:35.180 --> 04:38.450
Notez qu'il est grisé, vous ne pouvez donc pas modifier ces valeurs.

04:38.450 --> 04:44.390
La fenêtre du débogueur physique vous permet d'inspecter rapidement la géométrie des collisionneurs dans votre scène et vous pouvez

04:44.390 --> 04:47.210
pouvez profiler certains scénarios courants basés sur la physique.

04:47.210 --> 04:53.270
La fenêtre de profilage affiche des statistiques sur les éléments physiques qui ont été traités par le moteur physique.

04:53.270 --> 04:53.960
dans votre scène.

04:53.960 --> 05:00.560
Ces informations peuvent vous aider à diagnostiquer et à résoudre les problèmes de performances ou les divergences inattendues liées à l'utilisation du moteur physique.

05:00.560 --> 05:01.550
à votre scène physique.

05:01.550 --> 05:06.770
Vous pouvez l'ouvrir et comme vous le voyez dans la capture d'écran ici, nous voyons une ligne ascendante et descendante de la quantité de

05:06.770 --> 05:08.540
puissance de calcul nécessaire.

05:08.540 --> 05:14.150
Ensuite, si nous recherchons des points particulièrement élevés, nous pouvons faire une pause et creuser dans le code pour voir si la puissance de calcul est suffisante.

05:14.150 --> 05:15.890
examiner ce qui est à l'origine du problème.

05:16.370 --> 05:17.610
Jetons un coup d'œil à une démo.

05:17.630 --> 05:19.460
Ouvrons à nouveau la boîte suivante.

05:19.460 --> 05:21.020
Cette fois, nous allons jouer la scène.

05:21.020 --> 05:22.970
Nous allons afficher les informations sur les corps rigides.

05:22.970 --> 05:27.470
Nous allons également ouvrir ces fenêtres, le débogueur physique et le profileur physique.

05:27.940 --> 05:29.720
Très bien, jetons un coup d'oeil à la scène suivante.

05:29.720 --> 05:32.030
Nous allons revoir la boîte qui tombe.

05:32.030 --> 05:37.670
Et cette fois, nous allons observer quelques nouveaux éléments, d'abord, pendant que la scène est jouée.

05:39.630 --> 05:44.730
Je vais la mettre en pause ici et regarder les informations sur le corps rigide.

05:45.150 --> 05:47.580
Il y a beaucoup d'informations utiles ici.

05:47.580 --> 05:53.730
Dans l'info, nous pouvons voir la vitesse actuelle, la vélocité, différentes valeurs de tenseur, etc. qui peuvent être très utiles.

05:53.730 --> 05:56.250
utiles pour déboguer votre code.

05:56.730 --> 06:02.490
Jetons également un coup d'œil à l'analyse des fenêtres et au profileur.

06:02.850 --> 06:09.960
Ici, nous sommes en mesure d'examiner le profileur physique au fil du temps pendant le jeu, même s'il sera mis à jour et si nous ne pouvons pas le faire.

06:09.960 --> 06:16.320
et de voir le nombre de collisionneurs dynamiques que nous avons, les corps rigides, etc. qui pourraient

06:16.320 --> 06:18.060
vous aider à déboguer votre scène.

06:18.690 --> 06:25.140
Nous allons également nous pencher sur l'analyse et le débogueur physique.

06:25.140 --> 06:26.520
pour que nous puissions le voir.

06:28.280 --> 06:34.310
Et ce que nous pouvons faire ici, c'est que pendant que la scène se joue ou qu'elle est en pause, nous pouvons regarder

06:34.310 --> 06:38.150
à toutes les différentes colorations qu'il ajoute à Swatch lorsque je le bascule.

06:38.660 --> 06:44.810
Pour nous avoir montré beaucoup d'informations différentes sur les colliders de la scène et sur ceux qui dorment,

06:44.810 --> 06:47.930
etc. Tout cela est très utile.

06:47.960 --> 06:48.680
C'est tout.

06:49.600 --> 06:54.480
Dans la section suivante, nous allons créer un projet, quelque chose comme le jeu Angry Birds.

06:54.490 --> 06:57.670
Il s'agira d'un jeu complet en 2D que nous créerons à partir de zéro.

06:57.670 --> 07:01.570
Nous le créerons en utilisant la physique, le mouvement des projectiles et les données d'entrée.

07:01.570 --> 07:05.260
Nous allons créer des obstacles de jeu qui interagissent avec la dynamique des corps rigides.

07:05.260 --> 07:08.950
Nous ajouterons des conditions de perte de vent et nous peaufinerons le tout à la fin.
