WEBVTT

00:00.840 --> 00:04.980
Is sleeping is kinematic use, gravity and velocity.

00:05.010 --> 00:09.480
In this video, we'll cover these very powerful, useful physics properties.

00:09.480 --> 00:13.380
We'll learn about turning on and off physics for each game object.

00:13.470 --> 00:15.720
We'll learn why we want to do that sometimes.

00:15.720 --> 00:17.490
Then we'll open up the Unity editor.

00:17.510 --> 00:19.020
We'll play with these properties.

00:19.020 --> 00:21.820
Let's recap some of the important physics properties.

00:21.840 --> 00:25.370
Imagine we've got a stack of cubes and one of those cubes is selected.

00:25.380 --> 00:30.750
It's got a box collider with some properties and a rigid body that has properties as well.

00:30.960 --> 00:37.800
Some of these properties are accessible from the inspector and also from code for example is kinematic

00:37.800 --> 00:39.030
and use gravity.

00:39.120 --> 00:45.480
However, some properties are accessible only from code, for example is sleeping and velocity.

00:45.930 --> 00:48.510
Let's take a look at rigid body is kinematic.

00:48.510 --> 00:53.520
This controls whether the physics in the system affects this rigid body or not.

00:53.640 --> 00:55.860
By default it's set to false.

00:55.860 --> 00:58.800
The game object will behave under physics control.

00:58.920 --> 01:05.580
Sometimes we want to set it to true, and then the physics forces collisions and joints will be ignored.

01:06.060 --> 01:12.660
Setting it to true will give our game object the opportunity to be driven by scripting instead of the

01:12.660 --> 01:13.680
physics system.

01:13.680 --> 01:16.290
We can even toggle it in certain scenarios.

01:16.290 --> 01:20.310
We could start with it true with a game object driven by scripting.

01:20.400 --> 01:26.310
And then when our character gets hit, for example, we could quickly turn it into a ragdoll and it

01:26.310 --> 01:28.260
would fall believably to the ground.

01:28.260 --> 01:32.850
By setting is kinematic to false rigid body use gravity.

01:32.850 --> 01:36.690
This controls whether gravity affects this rigid body or not.

01:37.110 --> 01:41.970
By default it's set to true, and that allows the object to fall under the forces of gravity.

01:42.120 --> 01:44.610
Sometimes we want to set it to false.

01:44.610 --> 01:50.580
If we want to behave like we're in outer space where there's no gravity affected, or if we want more

01:50.580 --> 01:52.530
manual control over the objects.

01:52.530 --> 01:55.440
Motion rigid body is sleeping.

01:55.740 --> 02:00.570
While this is not actually a property, it's a method as seen by the parentheses.

02:00.570 --> 02:04.020
After it we can get the value just like a property.

02:04.050 --> 02:06.930
This lets us know is the rigid body sleeping?

02:06.930 --> 02:13.680
When a rigid body is moving very slowly, the physics engine assumes it has come to a halt and it sets

02:13.680 --> 02:15.290
it into a sleeping mode.

02:15.300 --> 02:19.710
This optimization saves processor time for most purposes.

02:19.710 --> 02:26.130
Sleeping and waking happens automatically, so we can just assume when it's in motion is sleeping is

02:26.130 --> 02:29.880
false and when it's finally at rest is sleeping is true.

02:30.240 --> 02:36.090
Our focus, for example, is to detect when our character has stopped moving or an item in the game

02:36.090 --> 02:37.080
has stopped moving.

02:37.290 --> 02:43.230
For example, if my character shoots an arrow at a target, the arrow flies through the air and eventually

02:43.230 --> 02:44.400
comes to a stop.

02:44.730 --> 02:48.030
When it comes to a stop is sleeping would be true.

02:48.060 --> 02:52.980
I could check that and know, okay, it's ready for another arrow to be shot.

02:53.400 --> 02:55.110
Rigid body velocity.

02:55.110 --> 03:00.990
The velocity vector of the rigid body is held in this vector rigid body velocity.

03:00.990 --> 03:03.750
This is the velocity vector of the rigid body.

03:03.750 --> 03:06.040
It's the direction and speed of movement.

03:06.060 --> 03:12.780
In most cases, you should not modify the velocity directly as this can result in unrealistic behavior.

03:12.780 --> 03:14.610
However, there are exceptions.

03:14.850 --> 03:20.700
A typical usage is where you would change the velocity immediately in a first person shooter.

03:20.700 --> 03:26.460
When your character jumps, you want to have that quick change in velocity so you could set it directly.

03:26.640 --> 03:33.000
Our focus is typically to access the value without setting it just to get the object speed.

03:33.000 --> 03:39.810
For example, if we want to show the speedometer of a physics based car onto the screen, we could get

03:39.810 --> 03:40.710
this value.

03:40.710 --> 03:43.320
Let's talk about turning off the physics.

03:43.320 --> 03:47.970
Sometimes games may turn off physics for a specific object during gameplay.

03:47.970 --> 03:52.920
For example, we want to move the objects with the mouse input instead of physics.

03:52.920 --> 03:59.220
There's two properties we need to toggle here if we want to turn on and off the physics to turn it off,

03:59.220 --> 04:03.660
we set the use gravity to false and is kinematic to true.

04:03.660 --> 04:08.910
Now we can control the movement of that rigid body with code When we're ready to turn movement back

04:08.910 --> 04:15.000
on for physics based control, we can set use gravity to true and is kinematic to false.

04:15.000 --> 04:20.570
Then it would fall back under gravity and behave with joints and physics forces, etc..

04:20.580 --> 04:25.620
Let's create a demo that uses all of these properties we've talked about and see how they can work together.

04:25.620 --> 04:27.960
I created a scene called the Dropper Game.

04:27.960 --> 04:29.160
Let's play the scene.

04:29.160 --> 04:30.930
It's a very simplistic game.

04:30.930 --> 04:35.340
We will inspect the code and we'll look at how these four properties are being used.

04:35.340 --> 04:37.470
We wait for the user's next turn.

04:37.470 --> 04:38.880
By using is sleeping.

04:38.880 --> 04:47.070
We show the speed on a UI using the velocity and we use that combination of mouse drag versus falling

04:47.070 --> 04:51.060
By using the two properties is kinematic and use gravity.

04:52.110 --> 04:52.410
All right.

04:52.410 --> 04:53.760
Here we are back in unity.

04:54.240 --> 04:57.120
Let's take a look at the proper game scene.

04:58.260 --> 05:02.910
And we'll see how these properties for physics are used in the gameplay.

05:03.150 --> 05:04.320
Let's go ahead and give it a play.

05:10.350 --> 05:17.460
So there's four properties we're talking about One as the as the dropper box drops, the velocity on

05:17.460 --> 05:19.800
screen is using the velocity property.

05:20.160 --> 05:27.630
Secondly, after the box drops and hits the rail at the bottom, the box, the next box becomes available

05:27.630 --> 05:28.680
for me to use.

05:28.710 --> 05:33.390
So you can see there's a couple of seconds dropping and then another box ready for me to use.

05:33.600 --> 05:39.660
The way that I handle that is I wait until the is sleeping is true for the following box.

05:39.960 --> 05:42.600
So it's sleeping is false.

05:42.600 --> 05:47.040
And then when it finally hits, their sleeping is true, and then it's my turn again.

05:47.130 --> 05:48.630
So that's two of the properties.

05:49.080 --> 05:52.710
Also, notice how I can control the box with my mouse.

05:52.710 --> 05:58.650
So while it's using a rigid body, I have settings set so that I can move it manually.

05:58.830 --> 06:01.980
I turn gravity off and I turn is kinematic on.

06:01.980 --> 06:09.470
And then once I click with my mouse, then I turn kinematic off and I turn gravity on.

06:09.480 --> 06:11.040
So let's take a look at the code for that.

06:16.740 --> 06:20.490
So there's four spots where I access those one here.

06:20.490 --> 06:25.020
Every time I add a new dropper, you can see the comment access physics properties.

06:25.020 --> 06:30.240
What I'm doing there is I'm setting the gravity false kinematic true.

06:30.240 --> 06:31.980
That lets me have mouse control.

06:33.720 --> 06:41.400
Then in the update, which is called every frame, I then if I click the mouse button, then I toggle

06:41.400 --> 06:44.700
the gravity back on and turn kinematic to false.

06:44.700 --> 06:47.610
That lets it fall under the natural forces of gravity.

06:48.300 --> 06:52.980
Also, while it's falling in the update, eye check is sleeping.

06:53.250 --> 06:56.040
If it is sleeping, then it's ready for the next turn.

06:56.040 --> 06:58.830
So I score some points and then I go ahead and.

06:59.840 --> 07:01.160
Release the next dropper.

07:02.570 --> 07:05.330
And then finally, I.

07:06.660 --> 07:14.190
Capture the max velocity so that I reward points based on how fast the block was going at its fastest.

07:14.400 --> 07:20.910
It's a silly mechanic and it's an excuse to use velocity, but it rewards more points for dropping from

07:20.910 --> 07:21.750
a higher height.

07:21.750 --> 07:22.650
And that's it.

07:23.520 --> 07:29.010
In the next video, we'll look at physics, recast and recast Command Schedule batch.

07:29.040 --> 07:33.450
In this video, we'll cover what are spatial queries in a physics system.

07:33.450 --> 07:37.110
How and why are they useful to us, and what do we do with them?
