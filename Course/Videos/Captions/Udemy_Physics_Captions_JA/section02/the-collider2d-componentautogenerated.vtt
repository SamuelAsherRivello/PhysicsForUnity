WEBVTT

00:01.650 --> 00:03.450
コライダーの2番目のコンポーネント。

00:03.450 --> 00:08.530
このビデオでは、コライダー2RDコンポーネントとその最も重要な特性について説明します。

00:08.550 --> 00:11.000
また、このコンポーネントをエディターで操作してみましょう。

00:11.010 --> 00:16.410
コライダーは物理的な衝突のためにオブジェクトの形状を定義するコンポーネントです。

00:16.530 --> 00:20.760
この図が示すように、ゲームオブジェクトは複数のコンポーネントを持つことができる。

00:20.760 --> 00:25.560
この例では、以前のビデオで説明したように、トランスフォームと剛体を持っています。

00:25.560 --> 00:29.510
そしてコライダーも剛体とコライダーの両方を持っています。

00:29.520 --> 00:35.970
このオブジェクトはこのゲームの世界では物理的なもので、相互作用や衝突が可能だと考えることができます。

00:35.970 --> 00:36.750
他人と

00:36.870 --> 00:38.130
コライダーの種類

00:38.130 --> 00:44.310
最もポピュラーなサークルコライダーとボックスコライダーです。

00:44.310 --> 00:49.460
円形と箱形はゲームに必要なほとんどの例を含んでいます。

00:49.470 --> 00:55.770
しかし、この2つのポリゴンのどちらかに収まりきらない形状については、他にも様々なものがあります。

00:55.770 --> 00:57.660
エッジカプセル

00:57.660 --> 01:02.730
また、同じオブジェクトの中に複数のコライダーを配置したい場合もあります。

01:02.730 --> 01:08.730
オブジェクトの形状が複雑な場合、他のコライダーを一緒に追加するには

01:08.730 --> 01:09.920
コンポジットコライダーも。

01:09.930 --> 01:15.630
DD もしコライダーがあるシーンでゲームオブジェクトを選択すると、インスペクターウィンドウが開きます。

01:15.630 --> 01:17.110
を開き、すべてのコンポーネントを見ることができます。

01:17.130 --> 01:20.640
BoxColliderのプロパティをDDにブラウズしてみましょう。

01:20.670 --> 01:24.030
たくさんのプロパティがありますが、ここではいくつかのプロパティに絞って説明します。

01:24.030 --> 01:29.370
最も重要なのは、まず物理的な材質で、摩擦や弾みやすさを表します。

01:29.370 --> 01:30.300
01:30.300 --> 01:30.300

01:30.300 --> 01:35.250
これについては後のセクションで取り上げるが、ここではすでに見たことがあることを記しておきたい。

01:35.250 --> 01:36.990
のプロパティは剛体内部にあります。

01:36.990 --> 01:39.260
では、なぜ2つの場所に存在するのでしょうか？

01:39.270 --> 01:43.690
まあ、一般的には剛体だけに追加したいことがほとんどでしょう。

01:43.710 --> 01:50.190
しかし、複数のコライダーがあり、コライダーごとに固有のマテリアルを使用したい場合は、以下のようにすることができます。

01:50.190 --> 01:53.670
また、剛体の代わりにボックスコライダー内に置くこともできます。

01:53.820 --> 01:57.360
もう一つの重要なプロパティはトリガーかどうかのブール値です。

01:57.360 --> 01:59.940
コライダーがトリガーとして動作するかどうかを決定します。

01:59.940 --> 02:01.740
デフォルトはfalseです。

02:01.740 --> 02:03.720
ソリッドオブジェクトとして動作します。

02:03.720 --> 02:07.860
他のオブジェクトと衝突し、衝突イベントが発生します。

02:07.860 --> 02:11.000
例えば、弾がキャラクターに当たったのか？

02:11.010 --> 02:14.610
しかし、トリガーが真であって欲しい状況もある。

02:14.610 --> 02:19.620
これは他のオブジェクトと衝突しないことを意味します。

02:19.620 --> 02:20.280
トリガー

02:20.280 --> 02:24.420
主人公は洞窟に入ったのか？

02:24.420 --> 02:30.210
キャラクターが洞窟に入るのを許可したいのですが、トリガーを使うことで通知を受け取ることができます。

02:30.210 --> 02:32.790
ゲームイベントを発生させることができます。

02:32.790 --> 02:39.910
デフォルトでは、コライダーはグラフィックの大きさに合わせて配置されます。

02:39.960 --> 02:43.650
しかし、コライダーの位置やスケールは自由に調整できます。

02:43.650 --> 02:48.870
例えば、コライダーをグラフィックよりも大きくして、衝突を検出するようにすることもできます。

02:48.870 --> 02:49.740
もう少し早く

02:49.740 --> 02:54.210
あるいは、コライダーをグラフィックよりも小さくして、もう少し寛容にしたいのかもしれません。

02:54.210 --> 02:57.690
(´・ω・｀)そうすれば、ゲームに違った難易度を与えることができるかもしれない。

02:57.690 --> 03:02.940
コライダーの大きさは、コライダーの編集ボタンで視覚的に調整できます、

03:02.940 --> 03:09.180
また、オフセット・サイズやエッジの半径など、個々のプロパティを数値で調整することもできる。

03:10.290 --> 03:14.670
Dピラミッドのシーンでは、木箱を選択します。

03:14.700 --> 03:17.150
コライダーがインスペクターウィンドウに表示されます。

03:17.160 --> 03:22.170
コライダーを視覚的、数値的に編集することができます。

03:22.170 --> 03:27.180
そして最後に、is triggerの値をtrueとfalseに設定して結果を観察してみよう。

03:28.600 --> 03:33.820
2つのDピラミッドを開き、シーンビューで木箱を1つ選択してみましょう。

03:33.830 --> 03:40.180
コライダーを編集し、数値で調整することができます。

03:41.540 --> 03:43.610
シーンビューでは動いているのがわかります。

03:44.780 --> 03:48.410
オフセットとサイズの位置関係

03:49.310 --> 03:53.480
また、マウスを使って視覚的に操作することもできます。

03:55.760 --> 03:56.360
以上です。

03:57.430 --> 03:59.680
次のビデオでは2つ目のエフェクターを紹介します。
