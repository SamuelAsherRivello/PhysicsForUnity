WEBVTT

00:01.890 --> 00:07.500
物理学、ライフサイクルの物理学、シミュレートと時間の拡張このビデオでは、その構造をカバーします。

00:07.500 --> 00:13.650
unityプロジェクトの構造、unity内部でのmonoビヘイビアの役割、物理のためのビヘイビアコード。

00:13.830 --> 00:15.660
では、Unityはどのような構造になっているのでしょうか？

00:15.840 --> 00:18.330
Unityの構造を最上位から。

00:18.330 --> 00:21.870
シーンの中にプロジェクトがあります。

00:21.870 --> 00:26.990
ゲームオブジェクトが1つ以上あり、それぞれのゲームオブジェクトにC-sharpコンポーネントがあります。

00:27.000 --> 00:30.330
C-sharpコンポーネントのデータ型はunity engineです。

00:30.350 --> 00:31.260
私の動作

00:31.260 --> 00:36.120
このコースではコンポーネントとビヘイビアを同じものとして扱います。

00:36.120 --> 00:41.460
画像のように、中央にゲームオブジェクトがあり、その周りに多くのコンポーネントが存在します。

00:41.460 --> 00:43.770
それらのゲームオブジェクトはゲームの世界に収まっています。

00:44.190 --> 00:49.290
ビヘイビアを理解することはユニティのビヘイビアを理解するために不可欠です。

00:49.290 --> 00:56.010
ゲームオブジェクトにコードクラスをアタッチするには、monoビヘイビアを拡張する必要があります。

00:56.010 --> 00:58.440
モノ・ビヘイビアを拡張する。

00:58.440 --> 01:03.840
Monoビヘイビアには実行順序が予測できる強力な関数が組み込まれています。

01:03.840 --> 01:08.400
モノビヘイビアの実行順序はゲーム開発において非常に重要です。

01:08.400 --> 01:09.720
ランタイムについて説明します。

01:09.720 --> 01:11.160
これが実行順序です。

01:11.160 --> 01:16.620
右の画像で選手がゲームを実行している間、多くのゲームが実行されているのがわかります。

01:16.620 --> 01:18.990
様々な実行順序関数があります。

01:19.020 --> 01:20.340
もう少し拡大してみましょう。

01:20.490 --> 01:26.400
上半分には主要なセクション、初期化、物理、入力イベントなどが見えます。

01:26.430 --> 01:32.400
それぞれunityが呼び出してくれる関数で、オプションでリッスンすることもできる。

01:32.400 --> 01:34.710
重要なのは目覚めだ。

01:34.710 --> 01:41.100
トリガーとコリジョンイベントの固定更新を開始。

01:41.100 --> 01:42.690
図が続きます。

01:42.690 --> 01:46.440
シーンのレンダリング、一時停止、破棄があります。

01:46.440 --> 01:49.260
ここでは破壊に焦点を当てます。

01:49.290 --> 01:55.320
気になるモンテのビヘイビア関数の実行順序は、ここにまとめてある。

01:55.320 --> 01:59.100
startはプロジェクトの初期に一度だけ、真ん中と太字で呼ばれている。

01:59.100 --> 02:01.590
物理学に関連する重要なものがいくつかあります。

02:01.590 --> 02:04.470
固定アップデートは物理ティックごとに1回呼び出されます。

02:04.500 --> 02:09.600
フレームレートに依存しないことが重要で、トリガー時に信頼できる結果を得ることができる。

02:09.600 --> 02:11.640
イベントと衝突イベントで信頼できる結果を得ることができます。

02:11.640 --> 02:13.440
それについては後で詳しく説明します。

02:13.440 --> 02:19.440
しかし、物理ワールドのオブジェクトが重なっているとき、そのアップデートをリッスンする方法は以下の通りだ。

02:19.440 --> 02:20.640
フレームに1回呼び出されます。

02:20.640 --> 02:25.110
この関数は物理以外のほとんどのコードで使われている。

02:25.110 --> 02:30.390
destroyのコードはゲームオブジェクトが削除された時やゲームの世界が終了した時に呼び出されます。

02:31.910 --> 02:35.870
ここに、私が作成したテンプレートファイルの例を示します。

02:35.870 --> 02:41.060
これはCのコードで、これをunityで宣言すればうまく動くだろう。

02:41.060 --> 02:42.680
これはCのコードです。

02:42.680 --> 02:45.200
関数の宣言が空っぽなだけです。

02:45.200 --> 02:48.770
ただ、このシグネチャーがどのようにセットアップされているのかをお見せしたいだけです。

02:48.860 --> 02:54.680
そして重要なのは、これらのすべてを宣言する必要はないということだ。

02:54.680 --> 02:55.190
更新する。

02:55.190 --> 02:56.530
それも宣言すればいい。

02:56.540 --> 02:59.060
しかし、ここでは完全なテンプレートをお見せします。

03:00.140 --> 03:02.950
このテンプレートが実際に動いているところをデモで見てみましょう。

03:02.960 --> 03:08.900
ビヘイビアテンプレートを実行し、シーンを確認します。

03:08.900 --> 03:14.300
そして、衝突イベントのトリガーをテストします。

03:15.540 --> 03:17.970
アセットを開いてみましょう。

03:17.970 --> 03:22.050
ビヘイビアテンプレートのセクション1、ビデオ5です。

03:22.050 --> 03:22.710
このシーンでは

03:22.710 --> 03:25.220
床にキューブが一つ浮いています。

03:25.230 --> 03:28.170
ボックスコライダーと剛体に加えて

03:28.170 --> 03:31.000
Monarch Behaviorのテンプレートスクリプトがあることがわかります。

03:31.020 --> 03:32.220
それをクリックしてみましょう。

03:32.490 --> 03:34.500
好きなコードエディターで開きます。

03:34.860 --> 03:38.910
ここで上から、すでに説明したさまざまなメソッドを見ることができます。

03:38.910 --> 03:45.480
awakeの中にデバッグログがあり、またon collision enterの中にもデバッグログがあります。

03:45.480 --> 03:51.480
を確認するためにunity内のウィンドウにテキストを送信します。

03:51.480 --> 03:53.040
|にできるようになります。

03:53.040 --> 03:54.600
シーンを実行してみましょう。

03:56.470 --> 04:01.240
コンソールウインドウの下の方で、ウェイクアップと衝突が起きているのが確認できます。

04:01.240 --> 04:06.010
そして、シーンを停止し、すべてのオブジェクトがクリーンアップされると、破壊されるのがわかります。

04:06.080 --> 04:08.070
コリジョンが入力されているのがわかります。

04:08.080 --> 04:10.750
キューブが床に衝突したと表示されています。

04:10.750 --> 04:14.680
キューブが床にぶつかったと表示されています。

04:14.680 --> 04:17.410
これが物理を使った検出方法だ。

04:18.520 --> 04:20.130
時間拡張の話をしよう。

04:20.140 --> 04:20.560
では

04:20.560 --> 04:26.710
映画「マトリックス」のようなスロー効果や

04:26.710 --> 04:33.250
|にできるようにあなたがそれをすることができます本当に出くわすことあなたは、実際には私のパートナーとi約束、誰でも素早くはちょうど無視これらの一見正確にどのように{}人のことを忘れることができます。

04:33.280 --> 04:35.300
物理学でシミュレーションできる

04:35.320 --> 04:42.070
物理の自動シミュレーションをfalseにして、手動でシミュレーションするんだ。

04:42.100 --> 04:43.120
これが鍵だ。

04:43.150 --> 04:48.060
物理シミュレーションをわざわざ呼び出す前に、一定の時間を待っている。

04:48.070 --> 04:52.540
私たちのプロジェクトでは、そしておそらくあなたのプロジェクトでも、こんなことをする必要はないだろう。

04:52.720 --> 04:57.400
このようなことを理解するために、時間の拡張について少し話したいと思います。

04:57.400 --> 05:04.450
unityは地球の重力に対して現実的な方法で実行されるので、手動で物理シミュレーションをする必要はありません。

05:04.450 --> 05:06.310
でも、必要ならこんな方法もあります。

05:08.790 --> 05:09.830
次のセクションでは

05:09.840 --> 05:12.150
Dフィジックスのコンポーネントを2つ統合。
