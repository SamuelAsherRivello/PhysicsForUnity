WEBVTT

00:00.670 --> 00:04.450
物理レイキャストとレイキャストコマンドスケジュールバッチ。

00:04.660 --> 00:08.500
このビデオでは、物理学における空間クエリとは何か？

00:08.650 --> 00:10.870
なぜ空間クエリーは有用なのか？

00:11.320 --> 00:13.900
そしてUnityのエディターを開いて、それらを使って遊んでみましょう。

00:14.530 --> 00:15.810
一歩下がってみましょう。

00:15.820 --> 00:18.550
ゲーム物理システムとはどういうものなのか？

00:18.580 --> 00:20.140
大きく分けて2つあります。

00:20.140 --> 00:23.980
このコースではこれまで剛体シミュレーションについて説明してきました。

00:24.280 --> 00:28.000
これはオブジェクトのグループ間のリアルな動きと相互作用です。

00:28.240 --> 00:31.120
空間クエリについてはまだあまり触れていません。

00:31.330 --> 00:39.130
これは空間に光線やコライダーを投影して距離を調べたり、将来の衝突をチェックするものです。

00:39.400 --> 00:44.290
例えば、私の銃が敵の方を向いているかどうかがわかります。

00:44.590 --> 00:49.090
物理クラスはグローバルな物理、プロパティ、ヘルパーメソッドを定義します。

00:49.210 --> 00:55.270
このクラスは物理学に特化したクラスです。

00:55.270 --> 00:57.130
目の前に何かある？

00:57.130 --> 00:59.200
目の前には何がある？

00:59.200 --> 00:59.620
何が？

00:59.620 --> 01:02.260
物体の前には何もない？

01:02.440 --> 01:04.390
では、なぜ空間クエリーをするのか？

01:04.540 --> 01:08.370
空間クエリを使えば、多くの魅力的な質問に答えることができる。

01:08.380 --> 01:09.970
敵は壁の近くにいるのか？

01:09.970 --> 01:11.830
敵は振り向くかもしれない

01:11.860 --> 01:13.540
照準に敵はいるか？

01:13.540 --> 01:17.300
今が撃つ時だと、プレイヤーに示すことができますね。

01:17.320 --> 01:18.640
敵から見えるか？

01:18.670 --> 01:19.780
これは敵の助けになるかもしれません。

01:19.780 --> 01:20.860
AIが警告

01:20.860 --> 01:21.760
他の敵

01:21.760 --> 01:25.170
マウス位置の下にAIがいます。

01:25.180 --> 01:27.580
このようにオブジェクトを選択したり、ドラッグしたりすることができます。

01:27.580 --> 01:30.970
コライダー内のどこで衝突が起きたのか？

01:31.000 --> 01:36.940
これは、ターゲットに正鵠を得たシュートを打った場合とそうでない場合のポイントの違いを示している。

01:36.940 --> 01:37.540
値

01:37.900 --> 01:39.520
さらに多くの可能性がある

01:39.520 --> 01:41.260
これはとても便利なものだ。

01:41.260 --> 01:45.360
物理学のクラスにはたくさんのメソッドが用意されています。

01:45.370 --> 01:47.080
リキャストについて話そう。

01:47.110 --> 01:48.800
この図を見てください。

01:48.820 --> 01:55.330
点から配列をピンクのボックスの方向にキャストするとします。

01:55.330 --> 02:00.980
これで、シーン内で交差しているコライダーの順序付きリストが返されます。

02:01.000 --> 02:03.880
この場合、3番が返されます。

02:03.910 --> 02:07.510
ここで、無限空間にキャストするわけではないことに注意してください。

02:07.510 --> 02:13.090
"有限距離 "を計算することで 最適化するんだ

02:13.090 --> 02:18.610
例えば、距離を4とした場合、ピンクのボックスと衝突することになるが、そうではなく

02:18.610 --> 02:19.570
青い箱

02:19.600 --> 02:22.030
似たような方法としてボックスキャストがある。

02:22.030 --> 02:27.690
これは点1からピンクの立方体までの形をキャストするが、青い立方体まではキャストしない。

02:27.700 --> 02:32.770
この距離は線や配列ではなく、より太い空間です。

02:32.770 --> 02:38.920
配列のキャスト、コマンドのスケジュール、バッチ関数、物理学のリキャストみたいなものだが、それ以上のものだ、

02:38.920 --> 02:39.940
もっと速い

02:39.940 --> 02:46.660
この処理は非同期で実行され、並列プロセッサがあれば並列に実行される。

02:46.660 --> 02:48.940
これにより、圧倒的なスピードが実現する。

02:49.120 --> 02:53.200
unityでは比較的新しい機能ですが、公開されています。

02:53.410 --> 02:54.670
デモを見てみよう。

02:54.940 --> 02:57.130
レイキャストのデモを見てみましょう。

02:57.160 --> 02:59.800
シーンを再生し、コードを確認します。

03:03.000 --> 03:03.180
ここです。

03:03.180 --> 03:05.520
リキャストのデモを見ます。

03:06.770 --> 03:08.010
シーンを流します。

03:08.190 --> 03:16.410
このカプセルは、赤いガイドラインでわかるように、その下にレートキャストを送っています。

03:16.770 --> 03:20.850
そしてコンソールウィンドウには衝突しているものが表示されています。

03:21.240 --> 03:25.290
赤い線は、予想通り、ランプが下に近づいていることを示しています。

03:25.350 --> 03:31.690
手動でこれをスロープから外すと、床が下に近いと表示されます。

03:31.710 --> 03:37.980
つまり、どの物体が下にあるのか、あるいはどの方向にあるのかを検出することができるのだ。

03:37.980 --> 03:39.020
情報を得ることができる。

03:39.030 --> 03:40.200
どうなるかな？

03:44.590 --> 03:45.760
アップデートで

03:46.670 --> 03:52.220 
物理演算とリキャストを使って、下方向に光線を投げます。

03:52.460 --> 03:57.200
そして、衝突したコライダーがあれば、そのレイヤーをチェックします。

03:57.410 --> 04:00.890
レイヤーが床の場合、デバッグログを取ります。

04:01.010 --> 04:07.570
金属の上や水の上を歩くと足音が変わります。

04:07.580 --> 04:09.230
そんなこともできますね。

04:09.560 --> 04:10.530
それでおしまい。

04:10.550 --> 04:13.160
レイキャストコマンドのデモを見てみる。

04:13.190 --> 04:15.800
シーンを再生してコードを確認します。

04:16.770 --> 04:19.650
レイキャストコマンドのデモを開いてみましょう。

04:21.560 --> 04:21.830
ここです。

04:21.830 --> 04:27.090
リキャストコマンドのデモでおなじみのセットアップです。

04:27.110 --> 04:32.030
このように、"recast "コマンドを使用することで、"recast "コマンドを使用するのとしないのとでは、結果が変わってきます。

04:32.030 --> 04:37.760
前回と同じように、コンソールの下にランプが表示されます。

04:38.150 --> 04:43.370
"床 "がコンソールの下にあるため、下を探知しています。

04:43.600 --> 04:46.070
ここでは実装が異なることを確認しましょう。

04:47.070 --> 04:49.350
リキャストコマンドの内部

04:50.460 --> 04:53.940
アップデートの中です。

04:54.060 --> 05:01.790
アップデートのたびに、ここで新しいリキャストコマンドを作成し、コマンドのバッチをスケジューリングしています。

05:01.800 --> 05:08.310
この単純な例では、コマンドのリストに1つだけ入力しています。

05:08.310 --> 05:10.800
ゼロ・インデックス・ワンのコマンドを入れています。

05:10.800 --> 05:16.620
しかし、もし複雑なシーンで多くのリキャストを行うようなことがあれば、次のようになります。

05:17.730 --> 05:20.730
同じコマンドリストに入れて、バッチスケジュールを呼び出せばいい。

05:20.730 --> 05:21.450
一旦。

05:21.540 --> 05:27.030
そうすれば、本当に速い結果が得られることを保証できる。

05:27.030 --> 05:31.560
非同期で、しかもマルチコアで行われるからだ。

05:31.560 --> 05:35.880
コンピュータやデバイスに複数の処理がある場合。

05:36.490 --> 05:42.490
そして、この下にある、前回の例と同じように、ヒットしたものを調べてみると、以下のようになります。

05:42.490 --> 05:48.550
どのヒットにもコライダーが存在し、それが床かスロープのどちらかであれば、それは

05:48.550 --> 05:49.000
それ

05:49.150 --> 05:50.230
ボーナスです。

05:50.230 --> 05:56.530
レイ・キャストをもう少し深く知りたい方は、レイ・キャストのドラッグ＆ドロップ・デモをご覧ください。

05:56.530 --> 05:58.450
シーンを再生し、コードを確認してください。

05:59.140 --> 06:05.260
次のビデオでは、物理、デバッグ、デバッグ、ドローレイ物理、デバッガーウィンドウ、そして

06:05.260 --> 06:06.490
ウィンドウのプロファイル

06:06.910 --> 06:09.790
このビデオでは、デバッグとは何か？

06:09.790 --> 06:12.520
物理学のデバッグの難しさとは？

06:12.520 --> 06:14.770
どのようなツールがあるのか？

06:15.070 --> 06:18.580
そして最後に、Unityエディターを開いて、このすべてを遊んでみましょう。
