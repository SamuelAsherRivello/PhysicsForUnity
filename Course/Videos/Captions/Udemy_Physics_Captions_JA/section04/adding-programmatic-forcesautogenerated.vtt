WEBVTT

00:00.700 --> 00:02.470
プログラムを追加

00:02.740 --> 00:08.720
このビデオでは、ユニティでの動き、伝統的な動きと物理を使った動きの両方を取り上げます。

00:08.740 --> 00:12.510
このビデオではunityの動きについて説明します。

00:12.520 --> 00:15.220
ユニティーを開き、その力を使って遊びます。

00:15.400 --> 00:18.490
ユニティで伝統的な動きをします。

00:18.490 --> 00:22.060
unityではtransformコンポーネントを使って移動します。

00:22.360 --> 00:25.600
更新コールのスニペットを見てみましょう。

00:25.600 --> 00:32.260
この例では、右矢印キーを押しながらtransformを動かします。

00:32.260 --> 00:35.290
の位置を移動させます。

00:35.290 --> 00:40.870
ステップとしては、入力の更新とトランスフォームの移動です。

00:40.870 --> 00:45.640
物理学では、剛体コンポーネントを介して移動が行われます。

00:45.910 --> 00:53.140
このような例では、固定されたアップデートを使用し、入力を受け取り、力を加えます。

00:54.520 --> 01:00.640
updateとupdateは1フレームにつき1回呼び出されます。

01:00.760 --> 01:06.760
これはフレームレートに依存し、開発者が設定した意図的なフレームレートと実際のフレームレートがあります。

01:07.000 --> 01:12.970
フレームレートはデバイスや計算量によって変化し、予測不可能です。

01:12.970 --> 01:14.470

01:14.470 --> 01:17.580
一方、固定アップデートは物理演算のみ。

01:17.590 --> 01:22.870
プロジェクトの設定によって、1フレームに0回、1回、何回と呼ばれます。

01:22.870 --> 01:25.810
固定時間ステップと呼ばれる値に依存します。

01:25.810 --> 01:27.610
予測可能です。

01:27.640 --> 01:29.170
そして、固定更新の注意点です。

01:29.170 --> 01:35.260
固定アップデートの機能は、力を加えたり、剛体の設定を変更する場所として推奨されています。

01:35.260 --> 01:39.310
他のほとんどのunityタスクに使われるupdateとは対照的です。

01:39.310 --> 01:45.700
その理由は、物理のアップデートは計測された時間ステップで実行されるため、以下のように一致しないからです。

01:45.700 --> 01:46.870
フレームの更新と一致しないからです。

01:46.870 --> 01:53.260
固定アップデートは各物理アップデートの直前に呼び出されるため、そこで行われた変更はすべて処理される。

01:53.260 --> 01:53.920
を直接呼び出す。

01:53.920 --> 01:58.900
そのため、物理ベースの操作には物理アップデートを使いたい。

01:58.900 --> 02:03.430
unityの物理演算を見てみよう。

02:03.460 --> 02:10.750
unityで物理の動きを見てみよう。

02:15.730 --> 02:21.220
回転を変えたい場合は角速度を変えることになりますが、そのためのメソッドがあります。

02:21.700 --> 02:25.090
角速度を変化させるには、角速度を変化させる方法と、角速度を変化させる方法があります。

02:25.090 --> 02:27.280
本当に力を加えるのが一番多い。

02:27.400 --> 02:32.740
このコードを見てみると、固定されたアップデートの中で、力とこのオブジェクトを追加していることがわかる。

02:32.740 --> 02:37.060
x 方向の正方向、つまり右に向かって移動している。

02:37.240 --> 02:44.740
もしトルクを加えるのであれば、同じような設定でトルクを加える方法を使い、回転を加えることができる。

02:44.740 --> 02:45.690
そのオブジェクトに

02:45.700 --> 02:52.240
ADD forceとADD torqueに渡されるフォース・モードが異なる結果になる。

02:52.330 --> 02:54.730
デフォルトはforceです。

02:54.820 --> 02:58.950
加速度、インパルス、速度変化もあります。

02:58.960 --> 03:04.300
物体の質量の影響を受けるものと受けないものがあることがわかります。

03:04.480 --> 03:11.320
力の典型的なものは、緩やかで現実的な動きで、一般的に使われるものです。

03:11.320 --> 03:13.840
03:11.320 --> 03:13.840

03:13.930 --> 03:16.630
しかし、他のものは良い選択肢を提供してくれます。

03:16.870 --> 03:18.370
デモを見てみよう。

03:18.400 --> 03:24.340
アドフォースのデモを開き、シーンを再生し、上下の矢印キーを使います。

03:24.340 --> 03:29.380
を使うことができます。

03:29.380 --> 03:34.600
そして、インスペクタとソースコードをチェックして、物理的なマテリアルを使ってみましょう、

03:35.770 --> 03:35.980
わかったよ

03:35.980 --> 03:37.300
次のシーンを開きましょう。

03:37.300 --> 03:39.280
アドフォースのデモを見てみましょう。

03:40.310 --> 03:44.270
ここではスロープの上にキューブが並んでいます。

03:44.480 --> 03:46.190
ハイライトの文字に注目

03:46.190 --> 03:51.560
このように、力、インパルス速度変化、加速度が得られます。

03:53.010 --> 03:58.610
インスペクタでそれぞれのコードを見てみると、力を加えるデモスクリプトがあります。

03:58.620 --> 04:01.020
上向き矢印と下向き矢印です。

04:01.020 --> 04:05.880
入力は全て同じで、X方向に20の力を加えます。

04:05.880 --> 04:09.450
4つのキューブで力のかかり方が異なります。

04:10.430 --> 04:12.380
ここで強調しているのはフォースである。

04:12.380 --> 04:18.080
同じシナリオで、どのように挙動が異なるかを見てみましょう。

04:18.080 --> 04:19.040
フォースモードの違いだけです。

04:24.220 --> 04:26.380
自分のコントロールで倒れるなら。

04:28.080 --> 04:30.030
そして上キーを押しながら

04:34.710 --> 04:36.570
そして下キーを押し続ける

04:42.730 --> 04:48.310
あるものはより速く加速し、またあるものはより予測不可能な動きをする。

04:48.310 --> 04:49.510
Y方向

04:50.320 --> 04:51.610
ボーナス課題として

04:51.610 --> 04:57.640
もっと深く知りたい方は、そのアドトークデモをご覧ください。

04:57.670 --> 05:02.740
シーンを再生し、矢印キーを使い、コードを調べて見ることができます。

05:02.740 --> 05:04.930
トークについてもっと知りたくなったら。

05:05.410 --> 05:12.160
次のビデオでは、スリープのキネマティックな使い方、重力と速度について説明します。

05:12.250 --> 05:16.300
これらは一般的で便利な物理特性で、コードで設定することができます。

05:16.330 --> 05:21.760
また、ゲームオブジェクトの物理演算のオン・オフについても説明します。

05:22.180 --> 05:26.800
また、Unity Editorでこれらのプロパティを操作することもあります。
