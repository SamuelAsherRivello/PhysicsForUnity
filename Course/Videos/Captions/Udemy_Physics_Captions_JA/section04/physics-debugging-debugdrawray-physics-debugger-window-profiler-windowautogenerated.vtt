WEBVTT

00:00.650 --> 00:06.320
物理学デバッグデバッグ描画レイ物理学、デバッガーウィンドウとプロファイラーウィンドウ。

00:06.410 --> 00:11.660
このビデオでは、デバッグとは何か、物理デバッグの難しさについて説明します。

00:11.690 --> 00:16.700
このビデオでは、デバッグとは何か、そして物理のデバッグの難しさについて説明します。

00:16.700 --> 00:17.490
シナリオ

00:17.510 --> 00:18.950
デバッグとは？

00:18.980 --> 00:21.170
バグとはエラーの欠陥です。

00:21.170 --> 00:23.860
コンピュータ・プログラミングにおける失敗や欠陥のこと。

00:23.870 --> 00:28.070
00:23.870→00:28.070デバッグとは，ソフトウェアのエラーを特定し，取り除く作業のことである。

00:28.070 --> 00:31.670
では、物理学のデバッグには具体的にどのような課題があるのでしょうか？

00:31.670 --> 00:38.200
物理学は非常に複雑でリソースを大量に消費するシステムですから，最適化が重要です。

00:38.210 --> 00:45.470
物理学には多くの設定、コンポーネント、プロパティなどが含まれており、また独自のカスタム設定も可能です。

00:45.470 --> 00:48.860
コードプロパティ、イベントハンドラなどが一緒に含まれています。

00:48.860 --> 00:50.480
これはとても複雑なことだ。

00:50.480 --> 00:55.760
幸いなことに、unity physicsを使えばunityが自動的にいろいろやってくれる。

00:55.760 --> 01:00.200
しかし、システムが複雑なため、うまくいかないことも多く、それは悪いことだ。

01:00.200 --> 01:02.300
では、一般的なデバッグのためのツールとは？

01:02.300 --> 01:05.120
Unityのコンソールウィンドウはとても重要です。

01:05.120 --> 01:09.700
unityが生成したエラーや警告、その他のメッセージを表示します。

01:09.710 --> 01:15.290
また、デバッグログを開いて生成したカスタムメッセージも表示されます。

01:15.290 --> 01:16.940
ユニティウィンドウを使います。

01:16.940 --> 01:20.870
一般的なコンソールウィンドウの使い方は検知するだけです。

01:20.870 --> 01:22.760
unityはこの行に到達したのか？

01:22.760 --> 01:29.000
また、コードで見ることができるプロパティや変数の具体的な値を言うこともできます。

01:29.000 --> 01:36.710
snippet debug log Hello world そのメッセージをコンソールに送ります。

01:36.710 --> 01:41.660
コード内の特定の瞬間に一時停止し、メモリ内のすべての変数を調べることができます。

01:41.660 --> 01:47.360
コードエディターのユニティに接続し、余白をクリックしてブレークポイントを設定します。

01:47.360 --> 01:51.650
unityを起動し、unityが一時停止するのを待つ。

01:51.650 --> 01:54.890
unityが一時停止すると、ブレイクポイントのひとつにいることを教えてくれます。

01:54.890 --> 02:01.160
|にできるようにあなたがそれをすることができます本当に出くわすことあなたは、実際には私のパートナーとi約束、誰でも素早くはちょうど無視これらの一見正確にどのように{}人のことを忘れることができます。

02:01.160 --> 02:02.510
このコードの行に到達しましたか？

02:02.510 --> 02:06.590
また、多くのプロパティや変数の具体的な値は何ですか？

02:06.770 --> 02:08.600
カスタムデバッグとドローコード

02:08.600 --> 02:13.250
UnityのAPIは、エディタ上で好きな時に好きな場所に線や図形を描画することをサポートしています。

02:13.250 --> 02:17.810
物理以外のコードでもできますが、私が使った例をいくつか紹介します。

02:17.810 --> 02:19.970
衝突はどこで起きたのか？

02:19.970 --> 02:25.340
ある瞬間の物体の境界線はどこで、時間の経過とともに物体の進路はどうなったのか？

02:25.340 --> 02:26.870
コードはいたってシンプルだ。

02:26.870 --> 02:28.250
デモを見てみよう。

02:28.250 --> 02:34.310
以下のボックスを見て、シーンを再生し、コードを検査し、独自のデバッグログを追加します。

02:34.310 --> 02:38.090
そしてブレークポイントを追加します。

02:38.210 --> 02:38.420
よし。

02:38.420 --> 02:40.820
次のシーンを見てみましょう。

02:40.820 --> 02:42.950
次のボックスを見てみましょう。

02:42.970 --> 02:48.620
デバッグコードを設定したので、このシーンビューに興味がある。

02:48.620 --> 02:52.430
このシーンではガイドラインが表示されます。

02:53.450 --> 02:56.330
再生中にキューブが落下します

02:57.150 --> 02:59.820
何度かdをタップして、そこで一時停止します。

02:59.940 --> 03:06.420
緑が接触、青がボックスが移動した場所です。

03:06.420 --> 03:11.190
白はキーの境界線。

03:11.220 --> 03:13.760
キーはタップしない方がいいかもしれない。

03:13.770 --> 03:18.000
プログラム上の事情でそうしたいのかもしれない。

03:18.000 --> 03:23.780
ただ、これは衝突、位置、移動、ユーザーの入力に基づいていることを示したかっただけです。

03:23.790 --> 03:26.250
これは私たち開発者しか見ることができません。

03:26.250 --> 03:27.630
エンドユーザーには見えない。

03:27.790 --> 03:29.790
では、早速コードを見てみましょう。

03:29.790 --> 03:33.810
デバッグに役立つシーンがいくつか想像できるだろう。

03:34.140 --> 03:40.350
まず、衝突があった場合、衝突のコンテキストを実行し、配列を描画します。

03:40.380 --> 03:42.420
緑色の線が描かれます。

03:43.070 --> 03:51.110
そして、キーをタップするたびに位置のリストを集め、フレームごとにそれらをすべて再描画する。

03:51.110 --> 03:54.950
ギズモ、ドロワー、ワイヤーキューブがどのように機能するかに基づいて、小さな白いボックス。

03:54.950 --> 03:59.300
(´・ω・｀)フレームごとに再描画して、パス全体を描かないといけない。

03:59.300 --> 04:00.170
シンプルだな

04:00.170 --> 04:06.860
開始時に位置をキャプチャして、更新のたびにデバッグして、最後の位置から線を引くだけ

04:06.860 --> 04:08.120
から現在の位置まで線を引く。

04:08.120 --> 04:12.440
こうして、ボックスが生きている間にどこにいたかを青い長い線で示すことができる。

04:12.740 --> 04:13.250
これで終わり。

04:13.250 --> 04:14.030
シンプルだな

04:14.030 --> 04:18.350
物理学、デバッグ、ユニティに特化したツールとは？

04:18.380 --> 04:23.660
まず、インスペクタの剛体を見てみると、インフォメーションがあります。

04:23.660 --> 04:29.200
セクションを展開すると、定期的に更新される非常に優れた値を見ることができる。

04:29.210 --> 04:30.950
これはデバッグに非常に役立つ。

04:30.950 --> 04:35.170
ライブで見ることもできますし、Unityエディタの一時停止を使えばいつでも一時停止できます。

04:35.180 --> 04:38.450
グレーアウトしているので、編集はできません。

04:38.450 --> 04:44.390
物理デバッガーウィンドウでは、シーン内のコライダージオメトリを素早く検査することができます。

04:44.390 --> 04:47.210
物理ベースの一般的なシナリオをプロファイリングすることができます。

04:47.210 --> 04:53.270
プロファイラウィンドウは物理エンジンによって処理された物理に関する統計情報を表示します。

04:53.270 --> 04:53.960
が表示されます。

04:53.960 --> 05:00.560
この情報は、パフォーマンスの問題や予期せぬ不一致を診断し、解決するのに役立ちます。

05:00.560 --> 05:01.550
物理シーンに関連するパフォーマンス上の問題や予期せぬ不一致を解決するのに役立ちます。

05:01.550 --> 05:06.770
を開くことができます。

05:06.770 --> 05:08.540
計算パワーが必要です。

05:08.540 --> 05:14.150
次に、特に高いポイントを探せば、そこで一時停止し、コードを掘り下げることができる。

05:16.370 --> 05:17.610
デモを見てみましょう。

05:17.630 --> 05:19.460
もう一度以下のボックスを開いてみましょう。

05:19.460 --> 05:21.020
今度はシーンを再生します。

05:21.020 --> 05:22.970
剛体情報を表示します。

05:22.970 --> 05:27.470
物理デバッガーと物理プロファイラーも開きます。

05:27.940 --> 05:29.720
それでは次のシーンをご覧ください。

05:29.720 --> 05:32.030
また箱が落ちてきます。

05:32.030 --> 05:37.670
そして、今回はいくつかの新しいことを見ていきます。

05:39.630 --> 05:44.730
ここで一時停止して、剛体の情報を見てみます。

05:45.150 --> 05:47.580
さて、ここには役に立つ情報がたくさんあります。

05:47.580 --> 05:53.730
この情報では、現在のスピード、速度、テンソル値などを見ることができます。

05:53.730 --> 05:56.250
コードのデバッグに役立ちます。

05:56.730 --> 06:02.490
また、ウィンドウ解析とプロファイラも見てみましょう。

06:02.850 --> 06:09.960
こちらは物理プロファイラの時間経過を見ることができます。

06:09.960 --> 06:16.320
をスクラブし、動的コライダーや剛体などの数を確認することができます。

06:16.320 --> 06:18.060
シーンのデバッグにも役立ちます。

06:18.690 --> 06:25.140
また、解析と物理デバッガーを紹介します。

06:25.140 --> 06:26.520
をご覧ください。

06:28.280 --> 06:34.310
シーンを再生している間、あるいは一時停止している間に、このシーンを見ることができます。

06:34.310 --> 06:38.150
トグルでスウォッチに追加される様々な色合いを見ることができる。

06:38.660 --> 06:44.810
シーンのコライダーやスリープ中のコライダーなど、様々な情報を表示してくれる、

06:44.810 --> 06:47.930
など。全部まとめてくれて本当に助かるよ。

06:47.960 --> 06:48.680
以上です。

06:49.600 --> 06:54.480
次のセクションでは、アングリーバードゲームのようなプロジェクトを作成します。

06:54.490 --> 06:57.670
これは完全な2Dゲームで、ゼロから作ります。

06:57.670 --> 07:01.570
物理演算、投射動作、入力を使って作ります。

07:01.570 --> 07:05.260
剛体力学を利用した障害物を作ります。

07:05.260 --> 07:08.950
風力損失の条件を追加し、さらに最後に磨きをかけます。
