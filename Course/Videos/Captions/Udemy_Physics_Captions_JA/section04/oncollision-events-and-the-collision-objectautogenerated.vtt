WEBVTT

00:00.660 --> 00:01.770
第4セクション

00:01.930 --> 00:02.370
団結

00:02.420 --> 00:04.170
Cシャープ物理プログラミング

00:04.200 --> 00:10.470
このセクションでは、衝突やトリガーなどの物理イベントの処理、物理的な力の追加について説明します。

00:10.470 --> 00:11.560
オブジェクトを移動させます。

00:11.580 --> 00:15.690
物理プロパティと物理関数の使い方。

00:15.690 --> 00:20.940
そして、衝突イベントと衝突オブジェクトの物理デバッグを見ていきます。

00:20.970 --> 00:24.300
このビデオでは、物理学のライフサイクルをまとめます。

00:24.300 --> 00:26.700
そして、コリジョンイベントについて説明します。

00:26.700 --> 00:28.020
なぜ有用なのか？

00:28.020 --> 00:33.870
そして、Unityのエディタを開き、コリジョンイベントと推奨される表示物理で遊んでみましょう、

00:33.870 --> 00:40.350
ライフサイクル物理学、シミュレート、時間拡張は物理学の核となる基礎、イベントを紹介します、

00:40.620 --> 00:42.210
物理学，ライフサイクルの総括

00:42.210 --> 00:48.360
以前のセクションで見たように、衝突に関するイベントは コライダーが他のコライダーと交差するとき

00:48.360 --> 00:55.560
ビヘイビアの内部でon collision enterメソッドを使用します。

00:55.560 --> 00:58.530
コリジョンイベントでコリジョンオブジェクトを通過します。

00:58.530 --> 00:59.820
もう少し詳しく見てみましょう。

00:59.820 --> 01:00.900
なぜそれを使うのか？

01:00.900 --> 01:02.730
まず、衝突の際に使うのか？

01:02.730 --> 01:05.640
物理的な衝突について詳しく教えてください。

01:05.640 --> 01:09.720
剛体同士の衝突です。

01:09.720 --> 01:11.580
トリガーがfalseに設定されている場合

01:11.580 --> 01:16.980
よくある例としては、弾が敵に当たった時や、キャラクターがコインを集めた時などです。

01:16.980 --> 01:20.100
衝突時のシナリオを見てみましょう。

01:20.100 --> 01:24.450
ピンクの立方体が青い立方体に向かって下向きに落下しているとします。

01:24.450 --> 01:27.030
それぞれに剛体とコライダーがあります。

01:27.030 --> 01:29.220
コライダーはトリガーがfalseに設定されています。

01:29.220 --> 01:30.480
ピンクが落下しています。

01:30.480 --> 01:33.480
ピンクが衝突します。

01:33.480 --> 01:35.730
01:35.730→01:35.730ピンクが衝突

01:35.730 --> 01:42.810
01:33.480→01:35.730ピンクがコリジョンに入る。

01:45.600 --> 01:47.070
その後、ピンクは倒れ続けます。

01:49.500 --> 01:55.050
弾丸が敵に当たったり、コインが回収されたりするシーンを撮影します。

01:55.080 --> 02:00.570
このメソッドに含まれるコリジョンオブジェクトは、コリジョンに関する詳細な情報を与えてくれます。

02:00.570 --> 02:05.640
コリジョンゲームオブジェクトに「何にぶつかったのか？

02:05.640 --> 02:08.700
3D世界のどこで衝突したのか？

02:08.700 --> 02:10.620
では、何にぶつかったのかを見てみましょう。

02:10.620 --> 02:15.990
コリジョンゲームオブジェクトの名前をチェックして、探しているものと一致するかどうかを確認します。

02:16.020 --> 02:18.150
これは非常に特殊なチェックに適していますね。

02:18.150 --> 02:21.540
このタグを使えば、全カテゴリーのチェックが可能です。

02:21.540 --> 02:22.440
チェックできます。

02:22.440 --> 02:26.700
コインとタグ付けされたコインのどれかと衝突していないか？

02:26.700 --> 02:27.870
代替案は？

02:27.870 --> 02:31.470
また、レイヤーをチェックすることもできます。

02:31.470 --> 02:35.760
レイヤーをフロアタグとレイヤーに設定して何かヒットした？

02:35.760 --> 02:36.960
どちらでも使えます。

02:36.960 --> 02:38.370
注意すべきことがあります。

02:38.370 --> 02:42.450
タグやレイヤーは0個でも1個でも構いません。

02:42.450 --> 02:47.670
タグは無制限だが、レイヤーは31個しかない。

02:47.760 --> 02:50.790
また、レイヤーの方がタグよりもはるかに高速であることもわかります。

02:50.790 --> 02:56.040
レイヤーの数が少なくてスピードアップを望むなら、レイヤーを使うことをお勧めします。

02:56.040 --> 03:00.000
いろいろな組み合わせをチェックしたいのであれば、タグの方がいいかもしれません。

03:00.000 --> 03:06.120
メニューのunity、Edit Project Settings、Tags、Layersから開いて管理できます。

03:06.450 --> 03:08.190
デモに飛び込みましょう。

03:08.520 --> 03:12.540
コリジョンイベント、1シーンと2シーンを見てみましょう。

03:12.540 --> 03:16.050
シーンを再生し、コードを確認します。

03:16.080 --> 03:16.950
Unityの内部です。

03:16.950 --> 03:20.010
コリジョンイベントを開いてみましょう。

03:20.930 --> 03:22.190
ピンクのキューブです。

03:22.990 --> 03:24.010
青いキューブ

03:24.640 --> 03:26.110
ピンクのキューブが落ちる

03:26.880 --> 03:27.930
どうなるかな？

03:30.760 --> 03:34.000
落下して衝突し、そのまま落下し続けます。

03:35.020 --> 03:40.810
コンソールウインドウを見ると、入室が1回、滞在が数回、退室が1回となっています。

03:42.920 --> 03:48.590
デバッグログを使って、簡単なテキストを送信しています。

03:49.100 --> 03:49.730
以上です。

03:50.780 --> 03:52.730
衝突イベントを見てみましょう。

03:52.730 --> 03:53.510
2回目

03:55.740 --> 03:57.060
同じシナリオ

03:57.180 --> 03:58.530
この時点で床がある

03:59.220 --> 03:59.940
勝負だ

04:02.800 --> 04:04.090
衝突が確認されました。

04:04.090 --> 04:08.140
また、各コンソールラインでは衝突している相手も確認できます。

04:08.590 --> 04:11.200
ピンクのキューブはキューブBと衝突しています。

04:11.530 --> 04:13.780
床には衝突していません。

04:13.810 --> 04:15.040
その様子を見てみましょう。

04:18.110 --> 04:19.370
各メソッドの内部

04:19.370 --> 04:24.920
床と衝突しているかどうかをチェックし、デバッグログの文は言いません。

04:25.100 --> 04:26.840
では、床はどのように機能しているのでしょうか？

04:27.790 --> 04:29.800
レイヤーをチェックするだけです。

04:29.920 --> 04:32.170
今は床のレイヤーですか？

04:32.170 --> 04:34.780
フロアレイヤーの定数はフロアと同じです。

04:34.810 --> 04:37.240
その変数を保存するのは簡単なんだ。

04:38.490 --> 04:44.160
unityでfloorに期待すると、レイヤーがfloorに設定されていることがわかる。

04:44.310 --> 04:46.290
それがこのコードでわかる。

04:46.290 --> 04:50.310
床と衝突した時にデバッグログとまでは言いません。

04:50.340 --> 04:51.090
以上です。

04:52.180 --> 04:56.830
次のビデオでは、トリガーイベントとコライダーオブジェクトについて説明します。

04:56.950 --> 05:01.510
トリガーイベントとは何なのか？

05:01.510 --> 05:04.750
また、unityを開いて、トリガーイベントをいくつか使ってみましょう。
