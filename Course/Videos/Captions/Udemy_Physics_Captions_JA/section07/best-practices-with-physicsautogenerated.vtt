WEBVTT

00:01.610 --> 00:04.110
第7節 アドバンスド・トピックス

00:04.130 --> 00:10.400
このセクションでは、物理学のベストプラクティス、物理学の最適化、物理学の予測について説明します。

00:10.400 --> 00:13.550
軌道、そしてデータ指向の技術について説明する。

00:13.550 --> 00:16.400
物理学の統一を意味する単語を積み重ねる。

00:17.460 --> 00:19.350
物理学のベストプラクティス。

00:19.590 --> 00:23.800
この動画では、物理演算のベストプラクティスを紹介します。

00:23.820 --> 00:30.750
このビデオでは "ベストプラクティス "を紹介します。

00:31.380 --> 00:33.780
注意点、すべきこと、してはいけないこと。

00:33.810 --> 00:38.010
ゴッチャとは、開発時に必ずしも明らかではない、役に立つヒントのことです。

00:38.010 --> 00:43.800
DOSはスムーズな結果をもたらすベストプラクティスで、Don'tリストは避けるべきものです。

00:43.800 --> 00:47.400
ボトルネックやパフォーマンスの低下を引き起こすからだ。

00:47.400 --> 00:48.900
一般的な問題

00:48.900 --> 00:52.800
まず第一に、プロジェクトを立ち上げるときは、ワールドスケールを模倣すること。

00:52.800 --> 00:57.330
リジッドボディを使い始めた時によくある問題は、物事がスローモーションのように見えることです。

00:57.330 --> 01:01.080
これはデフォルトの重力設定によるものです。

01:01.080 --> 01:08.430
人間なら高さ2単位、車なら長さ4単位に相当する単位があるとします。

01:08.430 --> 01:11.610
だから、それに近いスケールを使ってみるんだ。

01:11.610 --> 01:12.630
決定論です。

01:12.630 --> 01:16.710
一般的に言って、今日の統一物理学は決定論的ではない。

01:16.710 --> 01:23.190
つまり、どのマシンでも毎回全く同じ結果を繰り返すわけではないということだ。

01:23.190 --> 01:27.560
これはコンパイラやプロセッサの実装方法によるものです。

01:27.570 --> 01:31.950
しかし、将来的にはユニティ・ドッツ物理学が決定論を約束する。

01:32.190 --> 01:35.940
一般的なドスでは、DD対3Dをスマートに選択する選手もいます。

01:35.940 --> 01:40.410
2Dプロジェクトなら、3D物理コンポーネントは使うな。

01:40.410 --> 01:46.590
オブジェクトごとに静的化するのはやりすぎです。

01:46.590 --> 01:47.940
staticにします。

01:47.940 --> 01:49.530
動かないことに気づいたら。

01:49.530 --> 01:52.410
これは床背景のプラットフォーム要素です。

01:52.410 --> 01:54.030
素晴らしい最適化です。

01:54.030 --> 02:00.360
次に、オブジェクトのスケールを1つにしてみましょう。

02:00.360 --> 02:06.510
剛体と関節の動きのパフォーマンス 剛体の移動位置と移動回転を代わりに使う

02:06.510 --> 02:09.330
直接トランスフォームにアクセスしたり、使用したりするのではなく

02:09.330 --> 02:10.800
力を加えてトルクを加える

02:10.800 --> 02:17.790
前にも話したように、関節は質量の10倍以下の小さな違いを利用する。

02:17.790 --> 02:23.640
剛体の構成要素間のわずかな違いを利用することで，よりスムーズな結果を得ることができる。

02:24.270 --> 02:30.240
回転やスケールの変更はコライダーを再作成することになり、コストがかかるので避けましょう。

02:30.270 --> 02:37.860
できればメッシュコライダーは使わないで、もっとシンプルなプリミティブコライダーボックススフィアを使いましょう、

02:37.860 --> 02:43.800
など。メッシュコライダーは操作に非常にコストがかかるので、できることなら複数を追加して使わないようにしましょう。

02:43.800 --> 02:46.350
ホイールコライダーも非常にコストがかかる。

02:46.620 --> 02:51.990
(´・ω・｀)ゞ(´・ω・｀)ゞ(´・ω・｀)ゞ(´・ω・｀)ゞ

02:51.990 --> 02:56.820
レイヤーマスクを使ってレイキャストをする。

02:56.850 --> 02:59.670
光線の長さを必要以上に伸ばさない。

02:59.790 --> 03:05.670
もし、自分のレベルが100単位であることが分かっているのであれば、それを最大値として設定し、スキャンしないようにする。

03:05.670 --> 03:07.920
(この場合)無限大をスキャンすることになり、コストがかかる。

03:07.920 --> 03:10.890
メッシュコライダーに対してレイキャストを使わない。

03:10.890 --> 03:12.330
高いんだよ。

03:13.780 --> 03:16.360
Unity Projectのセットアップのヒント。

03:16.360 --> 03:18.720
レイヤーのコリジョンマトリックスを最適化する。

03:18.730 --> 03:20.620
スクリーンショットの下の方にあります。

03:20.620 --> 03:23.200
デフォルトでは、すべてのものが知っているものと衝突します。

03:23.200 --> 03:27.400
プロジェクトの設定が完了したら、先に進んで必要のないボックスのチェックを外してください。

03:27.400 --> 03:32.980
このようにすることで、ラグドールを使用する際、すべての剛体の質量を等しくすることができ、より良い結果を得ることができます。

03:32.980 --> 03:37.480
5回や15回などの小さなリミットスパンは使わないようにする。

03:37.480 --> 03:39.540
ジリ貧ならその方がいい。

03:39.550 --> 03:43.690
デフォルトのソルバーの反復回数を20回以上に更新。

03:44.600 --> 03:50.690
時間領域のプロジェクト設定で、固定時間ステップを微調整する。

03:50.690 --> 03:56.540
正確さ（高い値）と物理演算に費やすCPU（低い値）の妥協点を探る。

03:56.570 --> 04:02.120
0.1に調整しても、物理演算の更新は10回行われます。

04:02.120 --> 04:03.810
これはかなり良いことだ。

04:03.830 --> 04:10.190
タイムスタンプの最大値も調整し、8から10で物理演算に費やす時間の上限を設定する。

04:10.190 --> 04:11.210
となる。

04:11.920 --> 04:18.160
開発初期であっても定期的にunityプロファイラを使用し、それを開いて調査してください。

04:18.160 --> 04:20.150
unityのプロファイラを定期的に使ってみてください。

04:20.170 --> 04:24.250
また、警告が表示されることもあります。

04:24.250 --> 04:29.710
例えば、静的と表示されているものを誤って動かしてしまった場合、ゲームプレイでは可能ですが

04:29.710 --> 04:30.910
本当に高くつく。

04:32.500 --> 04:36.160
次回は、物理演算の最適化についてお話しします。
