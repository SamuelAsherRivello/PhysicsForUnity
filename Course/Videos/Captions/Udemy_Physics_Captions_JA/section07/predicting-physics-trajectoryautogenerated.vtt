WEBVTT

00:01.540 --> 00:03.510
物理の軌道を予測する

00:03.520 --> 00:08.050
このビデオでは、物理の動きを事前に予測する方法を紹介します。

00:08.050 --> 00:13.090
そしてunityを開いて見てみよう。

00:13.090 --> 00:16.270
軌跡を予測する実例です。

00:16.270 --> 00:18.100
物理学的予測とは？

00:18.100 --> 00:24.400
予測とは、例えば物体の位置や回転など、将来の特性を計算することである。

00:24.400 --> 00:25.480
物理システム

00:25.750 --> 00:33.280
このような例として、ユーザーに弾丸の位置を示す線や矢印を表示する視覚化がある。

00:33.280 --> 00:34.240
を示す。

00:34.240 --> 00:40.900
|にできるようにあなたがそれをすることができます本当に出くわすことあなたは、実際には私たち約束、誰でも素早くはちょうど無視これらの一見正確にどのように{}人のことを忘れることができます。

00:41.970 --> 00:45.870
第5節のアップセット・ダックス戦の例を見てみよう。

00:45.870 --> 00:50.220
現在は完成してプレイ可能ですが、予測物理学はありません。

00:50.220 --> 00:57.330
可視化の例としては、小惑星の進路を計算し、矢印で表示する。

00:57.330 --> 01:02.220
そうすることで、ユーザーへのフィードバックが増え、ゲームとのつながりが深まる。

01:02.220 --> 01:03.840
よりポジティブなゲーム感覚。

01:03.840 --> 01:09.330
その結果、ユーザーが小惑星を放出する前に、より賢い選択ができるようになる。

01:09.330 --> 01:11.400
小惑星がどこに向かっているのか、大体分かるようになる。

01:11.430 --> 01:13.410
もう一つの例はAIだ。

01:13.440 --> 01:16.500
目視で小惑星の進路を計算できる。

01:16.530 --> 01:20.520
敵に恐怖のリアクションをさせることができる。

01:20.520 --> 01:24.570
衝突を避けるために飛び出す敵がいてもいい。

01:24.810 --> 01:26.450
もちろんその両方でもいい。

01:26.460 --> 01:29.820
ビジュアライゼーションとAIのアップデート

01:30.450 --> 01:32.190
物理学の予測は？

01:32.700 --> 01:37.200
(1)シーンにオブジェクトを設定し、物理的な力を設定する。

01:37.200 --> 01:40.450
次に見えない物理シーンを作ります。

01:40.470 --> 01:47.940
そこにマーカーボールを追加し、それぞれのボールについてデルタ時間をシミュレートする。

01:47.940 --> 01:52.860
01:47.940 --> 01:52.860...その物体が移動する弧の時間を刻みます。

01:53.430 --> 01:54.790
デモを見てみよう。

01:54.810 --> 01:56.860
軌道予測を見てみましょう。

01:56.880 --> 01:58.080
シーンを再生します。

01:58.080 --> 02:03.750
ジャンプしているキューブオブジェクトのインスペクタを表示します、

02:03.750 --> 02:05.160
そしてコードをチェックします。

02:06.330 --> 02:06.570
よし

02:06.570 --> 02:11.800
unityで軌道予測に入ります。

02:11.820 --> 02:14.700
このプロジェクトで設定したのは

02:15.660 --> 02:18.050
スクリプトが書かれたキューブ。

02:18.060 --> 02:25.940
そして、このスクリプトは、これから加えられる物理的な力がどこに向かうのかを示している。

02:25.950 --> 02:31.970
この円弧のマーカーが立方体の前にあるのがわかると思います。

02:31.980 --> 02:36.810
"物理的な力 "を加えることができる

02:36.810 --> 02:41.550
同じ値で移動先を示す

02:41.940 --> 02:46.520
今ひとつ、この作業をしている間、これはunityの比較的新しいものです。

02:46.530 --> 02:53.610
公開されている機能なんだけど、それでも本番で使うのは初めてで、がっかりしたんだ。

02:53.610 --> 02:55.200
02:53.610 --> 02:55.200

02:55.200 --> 03:01.440
実際にはそれほどスムーズではないし、最適化も必要だろうが、確かに機能する。

03:01.440 --> 03:02.310
そしてうまく機能している。

03:02.310 --> 03:06.900
そして、いくつかのボタンが設定された、

03:06.900 --> 03:10.250
おそらくユーザーの入力をシミュレートしているのだろう。

03:10.260 --> 03:15.450
このままフォースを使ってみると、ホップするのがわかると思います。

03:15.450 --> 03:21.150
予測スライダーがいくつかあるから、それを使って多めにしたり少なめにしたりできるんだ。

03:22.520 --> 03:25.820
弧を描くマーカーを増やすか減らすか。

03:26.360 --> 03:29.540
このコードを見てみよう。

03:30.590 --> 03:31.910
重要なところを見ていきましょう。

03:31.910 --> 03:36.240
先ほど見たシリアライズされたプロパティが最初にありますね。

03:36.260 --> 03:41.480
新しいシーンパラメーターと新しいシーンを作成します。

03:41.750 --> 03:44.440
これはローカル物理と呼ばれるタイプです。

03:44.450 --> 03:50.600
新しいシーンを作成し、メインのシーンの隣で透過的に動作させます。

03:51.080 --> 03:53.000
スタートでそうします。

03:53.510 --> 03:56.750
そして

03:58.410 --> 03:59.640
予想では

04:03.690 --> 04:05.200
こっちは

04:05.210 --> 04:08.330
予想ではどうなっているんだ？

04:09.230 --> 04:11.840
マーカーを使うということで

04:12.170 --> 04:14.570
何度かタイミングを繰り返しています。

04:14.570 --> 04:16.880
ここからが本番だろ？

04:17.090 --> 04:18.210
2つのステップがある

04:18.230 --> 04:23.960
まず、マーカーを再構築します。定期的にインスペクターを更新し、マーカーを微調整します。

04:23.960 --> 04:25.610
マーカーを再構築します。

04:25.640 --> 04:29.690
もう一度、マーカーのボールゲームオブジェクトを再生成します。

04:30.200 --> 04:33.580
そして、ループを繰り返しながら、十分な数のオブジェクトを生成しています。

04:33.590 --> 04:41.060
十分な数ができたので、151行目でこれらのゲームオブジェクトを

04:41.060 --> 04:46.070
もう一つのシーン、我々が作成した予測シーンに移動させている。

04:46.070 --> 04:47.660
インスペクターに表示される

04:47.750 --> 04:51.590
マーカーを再構築した後、実際に予測を行うことができます。

04:51.590 --> 04:57.980
同じ予測反復をループさせます。

04:57.980 --> 05:04.700
このforループの中でやっているのは、それぞれの予測に対して、そのシーンの

05:04.700 --> 05:05.300
をシミュレートしている。

05:05.300 --> 05:06.130
1ティック

05:06.820 --> 05:12.060
つまり、手動でシミュレーションを呼び出さなければ、物理シミュレーションは行われていないことになる。

05:12.070 --> 05:19.210
だから、ループして一回カチカチやって、マーカーの一つをその場所に移動させる。

05:19.210 --> 05:25.440
そしてまた刻み、次のマーカーをその場所に移動させ、弧を描くように進む。

05:25.450 --> 05:26.620
これで終了。

05:27.460 --> 05:29.170
このプロセスは実にうまくいっている。

05:29.170 --> 05:31.140
このプロセスは本当にうまくいっている。

05:31.150 --> 05:37.690
さっきも言ったように、フレームレート的にはそんなに速くはないんだけど、それでもすごくよく動いてる。

05:38.110 --> 05:38.750
以上。

05:38.770 --> 05:39.730
ありがとうございました。

05:41.950 --> 05:47.470
次のビデオでは、ユニティ物理学のデータ指向技術スタック、またはドッツを見てみよう。
